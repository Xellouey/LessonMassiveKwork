"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–Ω–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ - PaymentService
"""
import asyncio
import sys
from datetime import datetime, timezone
from unittest.mock import AsyncMock
from sqlalchemy.ext.asyncio import AsyncSession, create_async_engine, async_sessionmaker

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ path
sys.path.insert(0, '.')

from database.database import Base
from database.models import User, Lesson, Purchase
from services.user import UserService
from services.lesson import LessonService
from services.payment import PaymentService

# –¢–µ—Å—Ç–æ–≤–∞—è –ë–î –≤ –ø–∞–º—è—Ç–∏
TEST_DATABASE_URL = "sqlite+aiosqlite:///:memory:"

async def test_payment_service():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ PaymentService - –ö–†–ò–¢–ò–ß–ù–´–ô –ö–û–ú–ü–û–ù–ï–ù–¢"""
    print("üß™ –ö–†–ò–¢–ò–ß–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï PaymentService...")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –¥–≤–∏–∂–∫–∞ –ë–î
    engine = create_async_engine(
        TEST_DATABASE_URL,
        echo=False,
        future=True
    )
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.create_all)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏
    async_session = async_sessionmaker(
        engine, 
        class_=AsyncSession, 
        expire_on_commit=False
    )
    
    async with async_session() as session:
        # –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–∫-–±–æ—Ç–∞
        mock_bot = AsyncMock()
        payment_service = PaymentService(session, mock_bot)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        user = User(
            user_id=123456789,
            username="payment_user",
            full_name="–¢–µ—Å—Ç–æ–≤—ã–π –ü–ª–∞—Ç–µ–ª—å—â–∏–∫",
            registration_date=datetime.now(timezone.utc),
            is_active=True,
            language='ru',
            total_spent=0,
            last_activity=datetime.now(timezone.utc)
        )
        
        lesson = Lesson(
            title="–ü–ª–∞—Ç–Ω—ã–π —É—Ä–æ–∫",
            description="–£—Ä–æ–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø–ª–∞—Ç—ã",
            price_stars=200,
            content_type="video",
            file_id="payment_test_video",
            is_active=True,
            is_free=False,
            category="–ü–ª–∞—Ç–Ω—ã–µ"
        )
        
        session.add(user)
        session.add(lesson)
        await session.commit()
        await session.refresh(user)
        await session.refresh(lesson)
        
        print("  üí≥ 1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        
        # –í–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        is_valid, error_msg, lesson_data = await payment_service.validate_payment_data(
            user.user_id, lesson.id
        )
        assert is_valid is True, f"–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –ø—Ä–æ–π—Ç–∏ —É—Å–ø–µ—à–Ω–æ: {error_msg}"
        assert lesson_data is not None, "–î–∞–Ω–Ω—ã–µ —É—Ä–æ–∫–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã"
        assert lesson_data["price_stars"] == lesson.price_stars, "–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–≤–ø–∞–¥–∞—Ç—å"
        print("     ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        
        # –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —É—Ä–æ–∫
        is_valid, error_msg, lesson_data = await payment_service.validate_payment_data(
            user.user_id, 999999
        )
        assert is_valid is False, "–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –ø—Ä–æ–≤–∞–ª–∏—Ç—å—Å—è –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —É—Ä–æ–∫–∞"
        assert error_msg == "–£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞"
        print("     ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —É—Ä–æ–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        
        print("  üí≥ 2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–≤–æ–π—Å–∞...")
        
        # –£—Å–ø–µ—à–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–≤–æ–π—Å–∞
        mock_bot.send_invoice.return_value = True
        
        result = await payment_service.create_invoice(
            user_id=user.user_id,
            lesson_id=lesson.id,
            lesson_title=lesson.title,
            lesson_description=lesson.description,
            price_stars=lesson.price_stars
        )
        
        assert result is True, "–ò–Ω–≤–æ–π—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ"
        mock_bot.send_invoice.assert_called_once()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤—ã–∑–æ–≤–∞
        call_args = mock_bot.send_invoice.call_args
        assert call_args[1]['chat_id'] == user.user_id, "ID —á–∞—Ç–∞ –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å"
        assert call_args[1]['currency'] == "XTR", "–í–∞–ª—é—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å Telegram Stars"
        assert len(call_args[1]['prices']) == 1, "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ–¥–Ω–∞ —Ü–µ–Ω–∞"
        assert call_args[1]['prices'][0].amount == lesson.price_stars, "–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–≤–ø–∞–¥–∞—Ç—å"
        print("     ‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–≤–æ–π—Å–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        
        print("  üí≥ 3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ pre-checkout –≤–∞–ª–∏–¥–∞—Ü–∏–∏...")
        
        # –í–∞–ª–∏–¥–Ω—ã–π pre-checkout
        payload = f"lesson_{lesson.id}_{user.user_id}_1672531200"
        
        is_valid, error_msg = await payment_service.process_pre_checkout(
            pre_checkout_query_id="test_query_123",
            user_id=user.user_id,
            total_amount=lesson.price_stars,
            invoice_payload=payload
        )
        
        assert is_valid is True, f"Pre-checkout –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–π—Ç–∏ —É—Å–ø–µ—à–Ω–æ: {error_msg}"
        print("     ‚úÖ Pre-checkout –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        
        # –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π payload
        is_valid, error_msg = await payment_service.process_pre_checkout(
            pre_checkout_query_id="test_query_456",
            user_id=user.user_id,
            total_amount=lesson.price_stars,
            invoice_payload="invalid_payload"
        )
        
        assert is_valid is False, "Pre-checkout —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º payload –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–≤–∞–ª–∏—Ç—å—Å—è"
        print("     ‚úÖ Pre-checkout –æ—Ç–∫–ª–æ–Ω—è–µ—Ç –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!")
        
        print("  üí≥ 4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ - –ö–†–ò–¢–ò–ß–ù–û!")
        
        # –£—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂
        purchase = await payment_service.process_successful_payment(
            user_id=user.user_id,
            payment_charge_id="critical_test_payment_123",
            total_amount=lesson.price_stars,
            invoice_payload=payload
        )
        
        assert purchase is not None, "–ü–æ–∫—É–ø–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω–∞"
        assert purchase.user_id == user.user_id, "ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å"
        assert purchase.lesson_id == lesson.id, "ID —É—Ä–æ–∫–∞ –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å" 
        assert purchase.payment_charge_id == "critical_test_payment_123", "ID –ø–ª–∞—Ç–µ–∂–∞ –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å"
        assert purchase.amount_stars == lesson.price_stars, "–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–≤–ø–∞–¥–∞—Ç—å"
        assert purchase.status == "completed", "–°—Ç–∞—Ç—É—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 'completed'"
        
        print("     ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        
        print("  üí≥ 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã - –ö–†–ò–¢–ò–ß–ù–û!")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —É—Ä–æ–∫—É –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏
        lesson_service = LessonService(session)
        has_access = await lesson_service.check_user_has_lesson(user.user_id, lesson.id)
        assert has_access is True, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏"
        print("     ‚úÖ –î–æ—Å—Ç—É–ø –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        
        print("  üí≥ 6. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—â–∏—Ç—ã –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞...")
        
        # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–≥–æ –∂–µ –ø–ª–∞—Ç–µ–∂–∞
        duplicate_purchase = await payment_service.process_successful_payment(
            user_id=user.user_id,
            payment_charge_id="critical_test_payment_123",  # –¢–æ—Ç –∂–µ charge_id
            total_amount=lesson.price_stars,
            invoice_payload=payload
        )
        
        assert duplicate_purchase is None, "–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞"
        print("     ‚úÖ –ó–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        
        print("  üí≥ 7. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
        user_service = UserService(session)
        updated_user = await user_service.get_user_by_telegram_id(user.user_id)
        assert updated_user.total_spent == lesson.price_stars, "–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –æ–±–Ω–æ–≤–∏—Ç—å—Å—è"
        print("     ‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        
        print("  üí≥ 8. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —É–∂–µ –∫—É–ø–ª–µ–Ω–Ω–æ–≥–æ —É—Ä–æ–∫–∞...")
        
        # –ü–æ–ø—ã—Ç–∫–∞ –∫—É–ø–∏—Ç—å —É–∂–µ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–Ω—ã–π —É—Ä–æ–∫
        is_valid, error_msg, lesson_data = await payment_service.validate_payment_data(
            user.user_id, lesson.id
        )
        
        assert is_valid is False, "–í–∞–ª–∏–¥–∞—Ü–∏—è —É–∂–µ –∫—É–ø–ª–µ–Ω–Ω–æ–≥–æ —É—Ä–æ–∫–∞ –¥–æ–ª–∂–Ω–∞ –ø—Ä–æ–≤–∞–ª–∏—Ç—å—Å—è"
        assert error_msg == "–£—Ä–æ–∫ —É–∂–µ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω", "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞"
        print("     ‚úÖ –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–∫—É–ø–∫–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
    
    await engine.dispose()
    print("üéâ –í–°–ï –ö–†–ò–¢–ò–ß–ù–´–ï –¢–ï–°–¢–´ PaymentService –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")

async def main():
    """–ó–∞–ø—É—Å–∫ –∫—Ä–∏—Ç–∏—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üí≥ –ó–ê–ü–£–°–ö –ö–†–ò–¢–ò–ß–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ü–õ–ê–¢–ï–ñ–ù–û–ô –°–ò–°–¢–ï–ú–´...\n")
    
    try:
        await test_payment_service()
        print()
        
        print("üéâüí≥üéâ –ü–õ–ê–¢–ï–ñ–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –†–ê–ë–û–¢–ê–ï–¢ –ö–û–†–†–ï–ö–¢–ù–û! üéâüí≥üéâ")
        print("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
        print("‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–≤–æ–π—Å–æ–≤")
        print("‚úÖ Pre-checkout –≤–∞–ª–∏–¥–∞—Ü–∏—è")
        print("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π")
        print("‚úÖ –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ —É—Ä–æ–∫–∞–º")
        print("‚úÖ –ó–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π")
        print("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        print("‚úÖ –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫")
        print()
        print("üí∞ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π Telegram Stars!")
        
    except Exception as e:
        print(f"‚ùå –ö–†–ò–¢–ò–ß–ù–ê–Ø –û–®–ò–ë–ö–ê –í –ü–õ–ê–¢–ï–ñ–ù–û–ô –°–ò–°–¢–ï–ú–ï: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(main())