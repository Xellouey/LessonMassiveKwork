"""
–¢–µ—Å—Ç—ã –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞–º–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
"""
import pytest
from unittest.mock import AsyncMock, MagicMock, patch
from datetime import datetime, timezone
from sqlalchemy.ext.asyncio import AsyncSession

from database.models import TextSetting
from services.text import TextService


class TestTextService:
    """–¢–µ—Å—Ç—ã –¥–ª—è TextService"""

    @pytest.fixture
    async def text_service(self, db_session):
        """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è TextService"""
        return TextService(db_session)

    @pytest.fixture
    async def sample_text_settings(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ç–µ–∫—Å—Ç–æ–≤"""
        return [
            TextSetting(
                id=1,
                key="welcome_message",
                value_ru="ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä –ò–ò!",
                value_en="ü§ñ Welcome to the AI world!",
                category="messages",
                description="–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
                updated_at=datetime.now(timezone.utc)
            ),
            TextSetting(
                id=2,
                key="button_catalog",
                value_ru="üß† AI-–∫—É—Ä—Å—ã",
                value_en="üß† AI Courses",
                category="buttons",
                description="–ö–Ω–æ–ø–∫–∞ –∫–∞—Ç–∞–ª–æ–≥–∞",
                updated_at=datetime.now(timezone.utc)
            ),
            TextSetting(
                id=3,
                key="error_payment",
                value_ru="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ –∫—É—Ä—Å–∞",
                value_en="‚ùå Course payment error",
                category="errors",
                description="–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –æ–ø–ª–∞—Ç—ã",
                updated_at=datetime.now(timezone.utc)
            )
        ]

    async def test_get_all_text_settings(self, text_service, db_session, sample_text_settings):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ç–µ–∫—Å—Ç–æ–≤"""
        # –ú–æ–∫–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
        mock_result = AsyncMock()
        mock_result.scalars.return_value.all.return_value = sample_text_settings
        
        with patch.object(db_session, 'execute', return_value=mock_result):
            texts = await text_service.get_all_text_settings()
            
            assert len(texts) == 3
            assert texts[0].key == "welcome_message"
            assert texts[1].category == "buttons"
            assert texts[2].value_ru == "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ"

    async def test_get_text_settings_by_category(self, text_service, db_session, sample_text_settings):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ç–µ–∫—Å—Ç–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        button_settings = [sample_text_settings[1]]  # –¢–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∏
        
        mock_result = AsyncMock()
        mock_result.scalars.return_value.all.return_value = button_settings
        
        with patch.object(db_session, 'execute', return_value=mock_result):
            texts = await text_service.get_text_settings_by_category("buttons")
            
            assert len(texts) == 1
            assert texts[0].category == "buttons"
            assert texts[0].key == "button_catalog"

    async def test_get_text_setting_by_key(self, text_service, db_session, sample_text_settings):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ –∫–ª—é—á—É"""
        welcome_setting = sample_text_settings[0]
        
        mock_result = AsyncMock()
        mock_result.scalar_one_or_none.return_value = welcome_setting
        
        with patch.object(db_session, 'execute', return_value=mock_result):
            text = await text_service.get_text_setting_by_key("welcome_message")
            
            assert text is not None
            assert text.key == "welcome_message"
            assert text.value_ru == "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –±–æ—Ç!"

    async def test_get_text_setting_by_key_not_found(self, text_service, db_session):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        mock_result = AsyncMock()
        mock_result.scalar_one_or_none.return_value = None
        
        with patch.object(db_session, 'execute', return_value=mock_result):
            text = await text_service.get_text_setting_by_key("nonexistent_key")
            
            assert text is None

    async def test_create_text_setting(self, text_service, db_session):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ–∫—Å—Ç–∞"""
        new_text = TextSetting(
            key="new_message",
            value_ru="–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
            value_en="New message",
            category="messages",
            description="–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
        )
        
        db_session.add = AsyncMock()
        db_session.commit = AsyncMock()
        db_session.refresh = AsyncMock()
        
        result = await text_service.create_text_setting(
            key="new_message",
            value_ru="–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
            value_en="New message",
            category="messages",
            description="–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±—ä–µ–∫—Ç –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–µ—Å—Å–∏—é
        db_session.add.assert_called_once()
        db_session.commit.assert_called_once()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–π –æ–±—ä–µ–∫—Ç
        assert result.key == "new_message"
        assert result.value_ru == "–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
        assert result.category == "messages"

    async def test_update_text_setting(self, text_service, db_session, sample_text_settings):
        """–¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ–∫—Å—Ç–∞"""
        existing_text = sample_text_settings[0]
        
        mock_result = AsyncMock()
        mock_result.scalar_one_or_none.return_value = existing_text
        
        db_session.commit = AsyncMock()
        
        with patch.object(db_session, 'execute', return_value=mock_result):
            updated_text = await text_service.update_text_setting(
                key="welcome_message",
                value_ru="–û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ",
                value_en="Updated welcome"
            )
            
            assert updated_text is not None
            assert updated_text.value_ru == "–û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ"
            assert updated_text.value_en == "Updated welcome"
            db_session.commit.assert_called_once()

    async def test_update_text_setting_not_found(self, text_service, db_session):
        """–¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        mock_result = AsyncMock()
        mock_result.scalar_one_or_none.return_value = None
        
        with patch.object(db_session, 'execute', return_value=mock_result):
            result = await text_service.update_text_setting(
                key="nonexistent_key",
                value_ru="–ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç"
            )
            
            assert result is None

    async def test_delete_text_setting(self, text_service, db_session, sample_text_settings):
        """–¢–µ—Å—Ç —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ–∫—Å—Ç–∞"""
        existing_text = sample_text_settings[0]
        
        mock_result = AsyncMock()
        mock_result.scalar_one_or_none.return_value = existing_text
        
        db_session.delete = AsyncMock()
        db_session.commit = AsyncMock()
        
        with patch.object(db_session, 'execute', return_value=mock_result):
            success = await text_service.delete_text_setting("welcome_message")
            
            assert success is True
            db_session.delete.assert_called_once_with(existing_text)
            db_session.commit.assert_called_once()

    async def test_delete_text_setting_not_found(self, text_service, db_session):
        """–¢–µ—Å—Ç —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        mock_result = AsyncMock()
        mock_result.scalar_one_or_none.return_value = None
        
        with patch.object(db_session, 'execute', return_value=mock_result):
            success = await text_service.delete_text_setting("nonexistent_key")
            
            assert success is False

    async def test_get_text_value(self, text_service, db_session, sample_text_settings):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –ø–æ –∫–ª—é—á—É –∏ —è–∑—ã–∫—É"""
        welcome_setting = sample_text_settings[0]
        
        mock_result = AsyncMock()
        mock_result.scalar_one_or_none.return_value = welcome_setting
        
        with patch.object(db_session, 'execute', return_value=mock_result):
            # –¢–µ—Å—Ç –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
            value_ru = await text_service.get_text_value("welcome_message", "ru")
            assert value_ru == "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –±–æ—Ç!"
            
            # –¢–µ—Å—Ç –¥–ª—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
            value_en = await text_service.get_text_value("welcome_message", "en")
            assert value_en == "Welcome to our bot!"

    async def test_get_text_value_fallback_to_russian(self, text_service, db_session):
        """–¢–µ—Å—Ç fallback –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫ –µ—Å–ª–∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"""
        text_setting = TextSetting(
            key="test_message",
            value_ru="–†—É—Å—Å–∫–∏–π —Ç–µ–∫—Å—Ç",
            value_en=None,
            category="messages"
        )
        
        mock_result = AsyncMock()
        mock_result.scalar_one_or_none.return_value = text_setting
        
        with patch.object(db_session, 'execute', return_value=mock_result):
            value = await text_service.get_text_value("test_message", "en")
            assert value == "–†—É—Å—Å–∫–∏–π —Ç–µ–∫—Å—Ç"  # Fallback –∫ —Ä—É—Å—Å–∫–æ–º—É

    async def test_get_text_value_not_found(self, text_service, db_session):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
        mock_result = AsyncMock()
        mock_result.scalar_one_or_none.return_value = None
        
        with patch.object(db_session, 'execute', return_value=mock_result):
            value = await text_service.get_text_value("nonexistent_key", "ru")
            assert value is None

    async def test_get_categories_list(self, text_service, db_session):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
        categories_result = [("messages",), ("buttons",), ("errors",)]
        
        mock_result = AsyncMock()
        mock_result.fetchall.return_value = categories_result
        
        with patch.object(db_session, 'execute', return_value=mock_result):
            categories = await text_service.get_categories_list()
            
            assert len(categories) == 3
            assert "messages" in categories
            assert "buttons" in categories
            assert "errors" in categories

    async def test_bulk_update_texts(self, text_service, db_session, sample_text_settings):
        """–¢–µ—Å—Ç –º–∞—Å—Å–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤"""
        updates = [
            {"key": "welcome_message", "value_ru": "–ù–æ–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ", "value_en": "New welcome"},
            {"key": "button_catalog", "value_ru": "üìñ –£—Ä–æ–∫–∏", "value_en": "üìñ Lessons"}
        ]
        
        # –ú–æ–∫–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
        mock_results = [
            AsyncMock(scalar_one_or_none=AsyncMock(return_value=sample_text_settings[0])),
            AsyncMock(scalar_one_or_none=AsyncMock(return_value=sample_text_settings[1]))
        ]
        
        db_session.commit = AsyncMock()
        
        with patch.object(db_session, 'execute', side_effect=mock_results):
            success_count = await text_service.bulk_update_texts(updates)
            
            assert success_count == 2
            db_session.commit.assert_called()

    async def test_search_text_settings(self, text_service, db_session, sample_text_settings):
        """–¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ç–µ–∫—Å—Ç–æ–≤"""
        search_results = [sample_text_settings[0]]  # –¢–æ–ª—å–∫–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        
        mock_result = AsyncMock()
        mock_result.scalars.return_value.all.return_value = search_results
        
        with patch.object(db_session, 'execute', return_value=mock_result):
            results = await text_service.search_text_settings("–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ")
            
            assert len(results) == 1
            assert results[0].key == "welcome_message"

    async def test_get_text_statistics(self, text_service, db_session, sample_text_settings):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Ç–µ–∫—Å—Ç–∞–º"""
        mock_result = AsyncMock()
        mock_result.scalars.return_value.all.return_value = sample_text_settings
        
        with patch.object(db_session, 'execute', return_value=mock_result):
            stats = await text_service.get_text_statistics()
            
            assert stats['total_texts'] == 3
            assert stats['categories_count'] == 3
            assert 'messages' in stats['category_distribution']
            assert 'buttons' in stats['category_distribution']
            assert 'errors' in stats['category_distribution']
            assert stats['texts_with_translation'] == 3  # –í—Å–µ —Ç–µ–∫—Å—Ç—ã –∏–º–µ—é—Ç –ø–µ—Ä–µ–≤–æ–¥

    async def test_error_handling_in_create(self, text_service, db_session):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏"""
        db_session.add = AsyncMock()
        db_session.commit = AsyncMock(side_effect=Exception("Database error"))
        db_session.rollback = AsyncMock()
        
        result = await text_service.create_text_setting(
            key="test_key",
            value_ru="–¢–µ—Å—Ç",
            category="messages"
        )
        
        assert result is None
        db_session.rollback.assert_called_once()

    async def test_error_handling_in_update(self, text_service, db_session, sample_text_settings):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏"""
        existing_text = sample_text_settings[0]
        
        mock_result = AsyncMock()
        mock_result.scalar_one_or_none.return_value = existing_text
        
        db_session.commit = AsyncMock(side_effect=Exception("Database error"))
        db_session.rollback = AsyncMock()
        
        with patch.object(db_session, 'execute', return_value=mock_result):
            result = await text_service.update_text_setting(
                key="welcome_message",
                value_ru="–ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç"
            )
            
            assert result is None
            db_session.rollback.assert_called_once()

    async def test_validate_text_key_format(self, text_service):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–æ—Ä–º–∞—Ç–∞ –∫–ª—é—á–∞"""
        # –í–∞–ª–∏–¥–Ω—ã–µ –∫–ª—é—á–∏
        assert text_service.validate_key_format("welcome_message") is True
        assert text_service.validate_key_format("button_catalog") is True
        assert text_service.validate_key_format("error_payment_failed") is True
        
        # –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –∫–ª—é—á–∏
        assert text_service.validate_key_format("Welcome Message") is False  # –ü—Ä–æ–±–µ–ª—ã
        assert text_service.validate_key_format("button-catalog") is False   # –î–µ—Ñ–∏—Å—ã
        assert text_service.validate_key_format("123_start") is False        # –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å —Ü–∏—Ñ—Ä—ã
        assert text_service.validate_key_format("") is False                 # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞

    async def test_export_texts_for_translation(self, text_service, db_session, sample_text_settings):
        """–¢–µ—Å—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞ —Ç–µ–∫—Å—Ç–æ–≤ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞"""
        mock_result = AsyncMock()
        mock_result.scalars.return_value.all.return_value = sample_text_settings
        
        with patch.object(db_session, 'execute', return_value=mock_result):
            export_data = await text_service.export_texts_for_translation()
            
            assert len(export_data) == 3
            assert export_data[0]['key'] == 'welcome_message'
            assert export_data[0]['value_ru'] == '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –±–æ—Ç!'
            assert export_data[0]['value_en'] == 'Welcome to our bot!'
            assert export_data[0]['category'] == 'messages'