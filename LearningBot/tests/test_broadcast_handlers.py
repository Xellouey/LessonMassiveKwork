"""
–¢–µ—Å—Ç—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Ä–∞—Å—Å—ã–ª–æ–∫ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
"""
import pytest
from unittest.mock import AsyncMock, MagicMock, patch
from datetime import datetime, timezone
from aiogram.types import CallbackQuery, Message, User as TgUser
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession

from database.models import Admin, User, Broadcast
# from database.models import BroadcastDelivery  # ‚ùå –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è MVP
from services.broadcast import BroadcastService
from states.admin import BroadcastStates


class TestBroadcastHandlers:
    """–¢–µ—Å—Ç—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Ä–∞—Å—Å—ã–ª–æ–∫"""

    @pytest.fixture
    async def mock_callback(self):
        """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è mock CallbackQuery"""
        callback = AsyncMock(spec=CallbackQuery)
        callback.message = AsyncMock(spec=Message)
        callback.from_user = AsyncMock(spec=TgUser)
        callback.from_user.id = 12345  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        callback.answer = AsyncMock()
        callback.message.edit_text = AsyncMock()
        return callback

    @pytest.fixture
    async def mock_message(self):
        """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è mock Message"""
        message = AsyncMock(spec=Message)
        message.from_user = AsyncMock(spec=TgUser)
        message.from_user.id = 12345  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        message.answer = AsyncMock()
        message.delete = AsyncMock()
        return message

    @pytest.fixture
    async def mock_state(self):
        """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è mock FSMContext"""
        state = AsyncMock(spec=FSMContext)
        state.set_state = AsyncMock()
        state.get_state = AsyncMock()
        state.set_data = AsyncMock()
        state.get_data = AsyncMock(return_value={})
        state.clear = AsyncMock()
        return state

    @pytest.fixture
    async def mock_broadcast_service(self):
        """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è mock BroadcastService"""
        service = AsyncMock(spec=BroadcastService)
        return service

    @pytest.fixture
    async def sample_broadcast_data(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
        broadcast = Broadcast(
            id=1,
            admin_id=12345,
            text="–¢–µ—Å—Ç–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞",
            media_type=None,
            file_id=None,
            status="pending",
            created_at=datetime.now(timezone.utc),
            total_users=0,
            success_count=0
        )
        return broadcast

    async def test_show_broadcasts_menu(self, mock_callback, db_session):
        """–¢–µ—Å—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω—é —Ä–∞—Å—Å—ã–ª–æ–∫"""
        from handlers.admin.broadcast import show_broadcasts_menu
        
        await show_broadcasts_menu(mock_callback)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ
        mock_callback.message.edit_text.assert_called_once()
        mock_callback.answer.assert_called_once()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
        call_args = mock_callback.message.edit_text.call_args
        assert "üì¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∞–º–∏" in call_args[0][0]

    async def test_show_new_broadcast_form(self, mock_callback, mock_state):
        """–¢–µ—Å—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ñ–æ—Ä–º—ã —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏"""
        from handlers.admin.broadcast import show_new_broadcast_form
        
        await show_new_broadcast_form(mock_callback, mock_state)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É —Å–æ—Å—Ç–æ—è–Ω–∏—è
        mock_state.set_state.assert_called_once_with(BroadcastStates.entering_broadcast_text)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è
        mock_callback.message.edit_text.assert_called_once()
        call_args = mock_callback.message.edit_text.call_args
        assert "üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏" in call_args[0][0]

    async def test_handle_broadcast_text_input(self, mock_message, mock_state):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
        from handlers.admin.broadcast import handle_broadcast_text
        
        mock_message.text = "–ü—Ä–∏–≤–µ—Ç! –ù–æ–≤—ã–π —É—Ä–æ–∫ —É–∂–µ –¥–æ—Å—Ç—É–ø–µ–Ω!"
        mock_state.get_data.return_value = {}
        
        await handle_broadcast_text(mock_message, mock_state)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        mock_state.set_data.assert_called_once()
        saved_data = mock_state.set_data.call_args[0][0]
        assert saved_data['text'] == "–ü—Ä–∏–≤–µ—Ç! –ù–æ–≤—ã–π —É—Ä–æ–∫ —É–∂–µ –¥–æ—Å—Ç—É–ø–µ–Ω!"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
        mock_state.set_state.assert_called_once_with(BroadcastStates.uploading_broadcast_media)

    async def test_handle_media_upload(self, mock_message, mock_state):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–¥–∏–∞"""
        from handlers.admin.broadcast import handle_broadcast_media
        
        # –°–æ–∑–¥–∞–µ–º mock –¥–ª—è —Ñ–æ—Ç–æ
        mock_message.photo = [MagicMock()]
        mock_message.photo[-1].file_id = "test_photo_id"
        mock_state.get_data.return_value = {'text': '–¢–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç'}
        
        await handle_broadcast_media(mock_message, mock_state)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        mock_state.set_data.assert_called_once()
        saved_data = mock_state.set_data.call_args[0][0]
        assert saved_data['media_type'] == 'photo'
        assert saved_data['file_id'] == 'test_photo_id'
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –≤—ã–±–æ—Ä–∞ –∞—É–¥–∏—Ç–æ—Ä–∏–∏
        mock_state.set_state.assert_called_once_with(BroadcastStates.selecting_audience)

    async def test_handle_skip_media(self, mock_callback, mock_state):
        """–¢–µ—Å—Ç –ø—Ä–æ–ø—É—Å–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–¥–∏–∞"""
        from handlers.admin.broadcast import skip_media_upload
        
        mock_state.get_data.return_value = {'text': '–¢–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç'}
        
        await skip_media_upload(mock_callback, mock_state)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É –∞—É–¥–∏—Ç–æ—Ä–∏–∏
        mock_state.set_state.assert_called_once_with(BroadcastStates.selecting_audience)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∞—É–¥–∏—Ç–æ—Ä–∏–∏
        mock_callback.message.edit_text.assert_called_once()

    async def test_select_audience_all(self, mock_callback, mock_state, db_session, mock_broadcast_service):
        """–¢–µ—Å—Ç –≤—ã–±–æ—Ä–∞ –∞—É–¥–∏—Ç–æ—Ä–∏–∏ '–≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º'"""
        from handlers.admin.broadcast import select_audience
        
        mock_callback.data = "broadcast_audience:all"
        mock_state.get_data.return_value = {
            'text': '–¢–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç',
            'media_type': None,
            'file_id': None
        }
        
        with patch('handlers.admin.broadcast.BroadcastService') as MockBroadcastService:
            MockBroadcastService.return_value = mock_broadcast_service
            mock_broadcast_service.create_broadcast.return_value = AsyncMock(id=1)
            
            await select_audience(mock_callback, mock_state, db_session)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏
            mock_broadcast_service.create_broadcast.assert_called_once_with(
                admin_id=12345,
                text='–¢–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç',
                media_type=None,
                file_id=None
            )

    async def test_confirm_broadcast_send(self, mock_callback, mock_state, db_session, mock_broadcast_service):
        """–¢–µ—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏"""
        from handlers.admin.broadcast import confirm_broadcast_send
        
        mock_callback.data = "confirm_broadcast:1:all"
        
        with patch('handlers.admin.broadcast.BroadcastService') as MockBroadcastService:
            MockBroadcastService.return_value = mock_broadcast_service
            mock_broadcast_service.send_broadcast.return_value = True
            
            await confirm_broadcast_send(mock_callback, mock_state, db_session)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Ä–∞—Å—Å—ã–ª–∫–∏
            mock_broadcast_service.send_broadcast.assert_called_once_with(
                broadcast_id=1,
                target_audience="all",
                bot_token=None  # –í —Ç–µ—Å—Ç–∞—Ö —Ç–æ–∫–µ–Ω –Ω–µ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è
            )

    async def test_show_broadcasts_history(self, mock_callback, db_session, mock_broadcast_service, sample_broadcast_data):
        """–¢–µ—Å—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞—Å—Å—ã–ª–æ–∫"""
        from handlers.admin.broadcast import show_broadcasts_history
        
        with patch('handlers.admin.broadcast.BroadcastService') as MockBroadcastService:
            MockBroadcastService.return_value = mock_broadcast_service
            mock_broadcast_service.get_broadcasts_history.return_value = [sample_broadcast_data]
            
            await show_broadcasts_history(mock_callback, db_session)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å –∏—Å—Ç–æ—Ä–∏–∏
            mock_broadcast_service.get_broadcasts_history.assert_called_once()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            mock_callback.message.edit_text.assert_called_once()
            call_args = mock_callback.message.edit_text.call_args
            assert "üìã –ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—Å—ã–ª–æ–∫" in call_args[0][0]

    async def test_show_broadcast_statistics(self, mock_callback, db_session, mock_broadcast_service):
        """–¢–µ—Å—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏"""
        from handlers.admin.broadcast import show_broadcast_stats
        
        mock_callback.data = "broadcast_stats:1"
        
        mock_stats = {
            'broadcast_id': 1,
            'text': '–¢–µ—Å—Ç–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞',
            'status': 'completed',
            'total_users': 100,
            'success_count': 95,
            'failed_count': 5,
            'success_rate': 95.0,
            'sent_at': datetime.now(timezone.utc)
        }
        
        with patch('handlers.admin.broadcast.BroadcastService') as MockBroadcastService:
            MockBroadcastService.return_value = mock_broadcast_service
            mock_broadcast_service.get_broadcast_statistics.return_value = mock_stats
            
            await show_broadcast_stats(mock_callback, db_session)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            mock_broadcast_service.get_broadcast_statistics.assert_called_once_with(1)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            mock_callback.message.edit_text.assert_called_once()
            call_args = mock_callback.message.edit_text.call_args
            text = call_args[0][0]
            assert "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏" in text
            assert "95.0%" in text  # Success rate

    async def test_cancel_broadcast(self, mock_callback, db_session, mock_broadcast_service):
        """–¢–µ—Å—Ç –æ—Ç–º–µ–Ω—ã —Ä–∞—Å—Å—ã–ª–∫–∏"""
        from handlers.admin.broadcast import cancel_broadcast
        
        mock_callback.data = "cancel_broadcast:1"
        
        with patch('handlers.admin.broadcast.BroadcastService') as MockBroadcastService:
            MockBroadcastService.return_value = mock_broadcast_service
            mock_broadcast_service.cancel_broadcast.return_value = True
            
            await cancel_broadcast(mock_callback, db_session)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–º–µ–Ω—É —Ä–∞—Å—Å—ã–ª–∫–∏
            mock_broadcast_service.cancel_broadcast.assert_called_once_with(1)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
            mock_callback.answer.assert_called_once()
            assert "–æ—Ç–º–µ–Ω–µ–Ω–∞" in mock_callback.answer.call_args[0][0]

    async def test_delete_broadcast(self, mock_callback, db_session, mock_broadcast_service):
        """–¢–µ—Å—Ç —É–¥–∞–ª–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
        from handlers.admin.broadcast import delete_broadcast
        
        mock_callback.data = "delete_broadcast:1"
        
        with patch('handlers.admin.broadcast.BroadcastService') as MockBroadcastService:
            MockBroadcastService.return_value = mock_broadcast_service
            mock_broadcast_service.delete_broadcast.return_value = True
            
            await delete_broadcast(mock_callback, db_session)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–¥–∞–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏
            mock_broadcast_service.delete_broadcast.assert_called_once_with(1)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
            mock_callback.answer.assert_called_once()
            assert "—É–¥–∞–ª–µ–Ω–∞" in mock_callback.answer.call_args[0][0]

    async def test_show_active_broadcasts(self, mock_callback, db_session, mock_broadcast_service, sample_broadcast_data):
        """–¢–µ—Å—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫"""
        from handlers.admin.broadcast import show_active_broadcasts
        
        sample_broadcast_data.status = "sending"
        
        with patch('handlers.admin.broadcast.BroadcastService') as MockBroadcastService:
            MockBroadcastService.return_value = mock_broadcast_service
            mock_broadcast_service.get_active_broadcasts.return_value = [sample_broadcast_data]
            
            await show_active_broadcasts(mock_callback, db_session)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫
            mock_broadcast_service.get_active_broadcasts.assert_called_once()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            mock_callback.message.edit_text.assert_called_once()
            call_args = mock_callback.message.edit_text.call_args
            assert "‚è∏Ô∏è –ê–∫—Ç–∏–≤–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏" in call_args[0][0]

    async def test_error_handling_in_broadcast_creation(self, mock_callback, mock_state, db_session):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏"""
        from handlers.admin.broadcast import select_audience
        
        mock_callback.data = "broadcast_audience:all"
        mock_state.get_data.return_value = {
            'text': '–¢–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç',
            'media_type': None,
            'file_id': None
        }
        
        with patch('handlers.admin.broadcast.BroadcastService') as MockBroadcastService:
            mock_service = AsyncMock()
            mock_service.create_broadcast.side_effect = Exception("Database error")
            MockBroadcastService.return_value = mock_service
            
            await select_audience(mock_callback, mock_state, db_session)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–∫–∏
            mock_callback.answer.assert_called_once()
            assert "–û—à–∏–±–∫–∞" in mock_callback.answer.call_args[0][0]

    async def test_broadcast_text_validation(self, mock_message, mock_state):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
        from handlers.admin.broadcast import handle_broadcast_text
        
        # –¢–µ—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        mock_message.text = "–ê" * 5000  # –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        
        await handle_broadcast_text(mock_message, mock_state)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        mock_message.answer.assert_called_once()
        call_args = mock_message.answer.call_args
        assert "—Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π" in call_args[0][0].lower() or "–ø—Ä–µ–≤—ã—à–∞–µ—Ç" in call_args[0][0]

    async def test_broadcast_with_video_media(self, mock_message, mock_state):
        """–¢–µ—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ —Å –≤–∏–¥–µ–æ"""
        from handlers.admin.broadcast import handle_broadcast_media
        
        # –°–æ–∑–¥–∞–µ–º mock –¥–ª—è –≤–∏–¥–µ–æ
        mock_message.video = MagicMock()
        mock_message.video.file_id = "test_video_id"
        mock_message.photo = None
        mock_message.document = None
        mock_state.get_data.return_value = {'text': '–¢–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å –≤–∏–¥–µ–æ'}
        
        await handle_broadcast_media(mock_message, mock_state)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–∏–¥–µ–æ
        mock_state.set_data.assert_called_once()
        saved_data = mock_state.set_data.call_args[0][0]
        assert saved_data['media_type'] == 'video'
        assert saved_data['file_id'] == 'test_video_id'

    async def test_broadcast_with_document_media(self, mock_message, mock_state):
        """–¢–µ—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ —Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–º"""
        from handlers.admin.broadcast import handle_broadcast_media
        
        # –°–æ–∑–¥–∞–µ–º mock –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞
        mock_message.document = MagicMock()
        mock_message.document.file_id = "test_document_id"
        mock_message.photo = None
        mock_message.video = None
        mock_state.get_data.return_value = {'text': '–¢–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–º'}
        
        await handle_broadcast_media(mock_message, mock_state)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        mock_state.set_data.assert_called_once()
        saved_data = mock_state.set_data.call_args[0][0]
        assert saved_data['media_type'] == 'document'
        assert saved_data['file_id'] == 'test_document_id'