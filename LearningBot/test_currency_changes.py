"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∞–ª—é—Ç
"""
import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from services.currency import CurrencyService

def test_currency_conversion():
    """–¢–µ—Å—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∞–ª—é—Ç"""
    print("=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∞–ª—é—Ç ===")
    
    # –¢–µ—Å—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ USD –≤ Stars
    usd_amounts = [10, 25, 50, 100]
    for usd in usd_amounts:
        stars = CurrencyService.usd_to_stars(usd)
        print(f"${usd} -> {stars} –∑–≤–µ–∑–¥")
    
    print()
    
    # –¢–µ—Å—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ Stars –≤ USD
    stars_amounts = [100, 500, 1000, 2000]
    for stars in stars_amounts:
        usd = CurrencyService.stars_to_usd(stars)
        print(f"{stars} –∑–≤–µ–∑–¥ -> ${usd}")
    
    print()
    
    # –¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–µ–Ω
    prices = [0, 5, 10.50, 25, 99.99, 100]
    for price in prices:
        formatted = CurrencyService.format_usd_price(price)
        print(f"{price} -> {formatted}")

def test_database_schema():
    """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("\n=== –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ===")
    
    import sqlite3
    
    try:
        conn = sqlite3.connect('learning_bot.db')
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª–µ price_usd –¥–æ–±–∞–≤–ª–µ–Ω–æ
        cursor.execute("PRAGMA table_info(lessons)")
        columns = cursor.fetchall()
        
        price_usd_exists = False
        for column in columns:
            if column[1] == 'price_usd':
                price_usd_exists = True
                print(f"‚úÖ –ü–æ–ª–µ price_usd –Ω–∞–π–¥–µ–Ω–æ: {column}")
                break
        
        if not price_usd_exists:
            print("‚ùå –ü–æ–ª–µ price_usd –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Ç–∞–±–ª–∏—Ü–µ lessons")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —É—Ä–æ–∫–æ–≤
        cursor.execute("SELECT id, title, price_stars, price_usd, is_free FROM lessons LIMIT 5")
        lessons = cursor.fetchall()
        
        print("\n–ü—Ä–∏–º–µ—Ä—ã —É—Ä–æ–∫–æ–≤:")
        print("ID | –ù–∞–∑–≤–∞–Ω–∏–µ | Stars | USD | –ë–µ—Å–ø–ª–∞—Ç–Ω–æ")
        print("-" * 50)
        for lesson in lessons:
            print(f"{lesson[0]} | {lesson[1][:20]}... | {lesson[2]} | ${lesson[3]} | {bool(lesson[4])}")
        
        conn.close()
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

if __name__ == "__main__":
    test_currency_conversion()
    test_database_schema()
    
    print("\n=== –ò—Ç–æ–≥ ===")
    print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∞–ª—é—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞")
    print("‚úÖ –¶–µ–Ω—ã —Ç–µ–ø–µ—Ä—å –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö")
    print("‚úÖ –û–ø–ª–∞—Ç–∞ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ Telegram Stars")
    print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
    print("\nüéâ –í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")