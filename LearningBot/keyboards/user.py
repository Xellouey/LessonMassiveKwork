"""
–ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
"""
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from typing import List, Optional

# –≠–∫—Å–ø–æ—Ä—Ç –∫–ª–∞—Å—Å–æ–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
__all__ = [
    'InlineKeyboardMarkup', 
    'InlineKeyboardButton', 
    'InlineKeyboardBuilder',
    'ReplyKeyboardMarkup', 
    'KeyboardButton',
    'main_menu_keyboard',
    'catalog_keyboard', 
    'dynamic_catalog_keyboard',
    'categories_list_keyboard',
    'lesson_detail_keyboard',
    'payment_keyboard',
    'my_purchases_keyboard',
    'settings_keyboard',
    'language_keyboard',
    'search_keyboard',
    'confirmation_keyboard',
    'lesson_list_keyboard',
    'profile_menu_keyboard',
    'lesson_controls_keyboard'
]


def main_menu_keyboard() -> InlineKeyboardMarkup:
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    builder = InlineKeyboardBuilder()
    
    builder.row(
        InlineKeyboardButton(text="üìö –ö–∞—Ç–∞–ª–æ–≥ —É—Ä–æ–∫–æ–≤", callback_data="catalog"),
        InlineKeyboardButton(text="üéÅ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π —É—Ä–æ–∫", callback_data="free_lesson")
    )
    builder.row(
        InlineKeyboardButton(text="üë§ –ú–æ–∏ –ø–æ–∫—É–ø–∫–∏", callback_data="my_purchases")
        # InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫", callback_data="search")  # ‚ùå –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è MVP
    )
    builder.row(
        InlineKeyboardButton(text="üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support")
    )
    
    return builder.as_markup()


def catalog_keyboard(page: int = 0, total_pages: int = 1) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∫–∞—Ç–∞–ª–æ–≥–∞ —É—Ä–æ–∫–æ–≤ (—É—Å—Ç–∞—Ä–µ–≤—à–∞—è)"""
    builder = InlineKeyboardBuilder()
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    builder.row(
        InlineKeyboardButton(text="üéØ –í—Å–µ —É—Ä–æ–∫–∏", callback_data="catalog:all"),
        InlineKeyboardButton(text="üìã –ö–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="catalog:categories")
    )
    
    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
    builder.row(InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))
    
    return builder.as_markup()


def lesson_detail_keyboard(lesson_id: int, is_purchased: bool = False, is_free: bool = False) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏ —É—Ä–æ–∫–∞"""
    builder = InlineKeyboardBuilder()
    
    if is_purchased:
        builder.row(InlineKeyboardButton(text="‚ñ∂Ô∏è –û—Ç–∫—Ä—ã—Ç—å —É—Ä–æ–∫", callback_data=f"open_lesson:{lesson_id}"))
    elif is_free:
        builder.row(InlineKeyboardButton(text="üéÅ –ü–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ", callback_data=f"get_free:{lesson_id}"))
    else:
        builder.row(InlineKeyboardButton(text="üí≥ –ö—É–ø–∏—Ç—å —É—Ä–æ–∫", callback_data=f"buy_lesson:{lesson_id}"))
    
    builder.row(
        InlineKeyboardButton(text="üëÄ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä", callback_data=f"preview:{lesson_id}"),
        InlineKeyboardButton(text="üìã –ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data=f"info:{lesson_id}")
    )
    
    builder.row(
        InlineKeyboardButton(text="üîô –ö –∫–∞—Ç–∞–ª–æ–≥—É", callback_data="catalog"),
        InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    )
    
    return builder.as_markup()


def payment_keyboard(lesson_id: int, price_stars: int) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã —É—Ä–æ–∫–∞"""
    builder = InlineKeyboardBuilder()
    
    builder.row(
        InlineKeyboardButton(
            text=f"‚≠ê –û–ø–ª–∞—Ç–∏—Ç—å {price_stars} –∑–≤–µ–∑–¥", 
            callback_data=f"pay:{lesson_id}:{price_stars}"
        )
    )
    builder.row(
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"lesson:{lesson_id}")
    )
    
    return builder.as_markup()


def my_purchases_keyboard(page: int = 0, total_pages: int = 1) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Å–ø–∏—Å–∫–∞ –ø–æ–∫—É–ø–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    builder = InlineKeyboardBuilder()
    
    # –§–∏–ª—å—Ç—Ä—ã
    builder.row(
        InlineKeyboardButton(text="üìÖ –ü–æ –¥–∞—Ç–µ", callback_data="purchases:date"),
        InlineKeyboardButton(text="üìö –ü–æ —É—Ä–æ–∫–∞–º", callback_data="purchases:lessons")
    )
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
    if total_pages > 1:
        nav_buttons = []
        
        if page > 0:
            nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"purchases_page:{page-1}"))
        
        nav_buttons.append(InlineKeyboardButton(text=f"{page+1}/{total_pages}", callback_data="current_page"))
        
        if page < total_pages - 1:
            nav_buttons.append(InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"purchases_page:{page+1}"))
        
        builder.row(*nav_buttons)
    
    builder.row(InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))
    
    return builder.as_markup()


def profile_menu_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è"""
    builder = InlineKeyboardBuilder()
    
    builder.row(
        InlineKeyboardButton(text="üë§ –ú–æ–∏ –ø–æ–∫—É–ø–∫–∏", callback_data="my_purchases"),
        InlineKeyboardButton(text="üìö –ö–∞—Ç–∞–ª–æ–≥", callback_data="catalog")
        # InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="my_stats")  # ‚ùå –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    )
    builder.row(
        InlineKeyboardButton(text="üåç –Ø–∑—ã–∫", callback_data="change_language"),
        InlineKeyboardButton(text="üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="notifications_settings")
    )
    builder.row(InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))
    
    return builder.as_markup()


def lesson_controls_keyboard(lesson_id: int, has_access: bool = False) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—Ä–æ–∫–æ–º"""
    builder = InlineKeyboardBuilder()
    
    if has_access:
        builder.row(InlineKeyboardButton(text="‚ñ∂Ô∏è –°–º–æ—Ç—Ä–µ—Ç—å —É—Ä–æ–∫", callback_data=f"watch_lesson:{lesson_id}"))
        builder.row(
            InlineKeyboardButton(text="üìù –û–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"lesson_info:{lesson_id}")
            # InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data=f"lesson_stats:{lesson_id}")  # ‚ùå –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        )
    
    builder.row(
        InlineKeyboardButton(text="üë§ –ú–æ–∏ –ø–æ–∫—É–ø–∫–∏", callback_data="my_purchases"),
        InlineKeyboardButton(text="üìö –ö–∞—Ç–∞–ª–æ–≥", callback_data="catalog")
    )
    builder.row(InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))
    
    return builder.as_markup()


def settings_keyboard(current_language: str = "ru") -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    builder = InlineKeyboardBuilder()
    
    # –í—ã–±–æ—Ä —è–∑—ã–∫–∞
    lang_text = "üá∑üá∫ –†—É—Å—Å–∫–∏–π" if current_language == "ru" else "üá∫üá∏ English"
    builder.row(InlineKeyboardButton(text=f"üåç –Ø–∑—ã–∫: {lang_text}", callback_data="change_language"))
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    builder.row(InlineKeyboardButton(text="üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="notifications_settings"))
    
    # –ü—Ä–æ—Ñ–∏–ª—å
    builder.row(InlineKeyboardButton(text="üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile"))
    
    builder.row(InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))
    
    return builder.as_markup()


def language_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞"""
    builder = InlineKeyboardBuilder()
    
    builder.row(
        InlineKeyboardButton(text="üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="lang:ru"),
        InlineKeyboardButton(text="üá∫üá∏ English", callback_data="lang:en")
    )
    builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="settings"))
    
    return builder.as_markup()


def search_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞"""
    builder = InlineKeyboardBuilder()
    
    builder.row(
        InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é", callback_data="search:title"),
        InlineKeyboardButton(text="üè∑Ô∏è –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="search:category")
    )
    builder.row(
        InlineKeyboardButton(text="üí∞ –ü–æ —Ü–µ–Ω–µ", callback_data="search:price"),
        InlineKeyboardButton(text="‚≠ê –ü–æ —Ä–µ–π—Ç–∏–Ω–≥—É", callback_data="search:rating")
    )
    builder.row(InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))
    
    return builder.as_markup()


def confirmation_keyboard(action: str, item_id: Optional[int] = None) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è"""
    builder = InlineKeyboardBuilder()
    
    callback_data = f"confirm:{action}:{item_id}" if item_id else f"confirm:{action}"
    
    builder.row(
        InlineKeyboardButton(text="‚úÖ –î–∞", callback_data=callback_data),
        InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="cancel")
    )
    
    return builder.as_markup()


def dynamic_catalog_keyboard(categories: List[dict], page: int = 0, total_pages: int = 1) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∫–∞—Ç–∞–ª–æ–≥–∞ —É—Ä–æ–∫–æ–≤ —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏"""
    builder = InlineKeyboardBuilder()
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    builder.row(
        InlineKeyboardButton(text="üéØ –í—Å–µ —É—Ä–æ–∫–∏", callback_data="catalog:all"),
        InlineKeyboardButton(text="üìã –ö–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="catalog:categories")
    )
    
    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
    builder.row(InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))
    
    return builder.as_markup()


def categories_list_keyboard(categories: List[dict]) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    builder = InlineKeyboardBuilder()
    
    # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    if categories:
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ 2 –≤ —Ä—è–¥
        for i in range(0, len(categories), 2):
            row_categories = categories[i:i+2]
            
            if len(row_categories) == 2:
                builder.row(
                    InlineKeyboardButton(
                        text=f"üìã {row_categories[0]['name']} ({row_categories[0]['lesson_count']})",
                        callback_data=f"catalog:category:{row_categories[0]['id']}"
                    ),
                    InlineKeyboardButton(
                        text=f"üìã {row_categories[1]['name']} ({row_categories[1]['lesson_count']})",
                        callback_data=f"catalog:category:{row_categories[1]['id']}"
                    )
                )
            else:
                builder.row(
                    InlineKeyboardButton(
                        text=f"üìã {row_categories[0]['name']} ({row_categories[0]['lesson_count']})",
                        callback_data=f"catalog:category:{row_categories[0]['id']}"
                    )
                )
    else:
        builder.row(InlineKeyboardButton(text="üì≠ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç", callback_data="no_action"))
    
    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
    builder.row(InlineKeyboardButton(text="üîô –ö –∫–∞—Ç–∞–ª–æ–≥—É", callback_data="catalog"))
    builder.row(InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))
    
    return builder.as_markup()


def lesson_list_keyboard(lessons: List[dict], page: int = 0, items_per_page: int = 5) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º —É—Ä–æ–∫–æ–≤"""
    builder = InlineKeyboardBuilder()
    
    start_idx = page * items_per_page
    end_idx = min(start_idx + items_per_page, len(lessons))
    
    for i in range(start_idx, end_idx):
        lesson = lessons[i]
        price_text = "üéÅ –ë–µ—Å–ø–ª–∞—Ç–Ω–æ" if lesson.get('is_free') else f"‚≠ê {lesson.get('price_stars', 0)} –∑–≤–µ–∑–¥"
        
        builder.row(InlineKeyboardButton(
            text=f"üìö {lesson.get('title', '–£—Ä–æ–∫')} - {price_text}",
            callback_data=f"lesson:{lesson.get('id')}"
        ))
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏—è
    total_pages = (len(lessons) + items_per_page - 1) // items_per_page
    if total_pages > 1:
        nav_buttons = []
        
        if page > 0:
            nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"lessons_page:{page-1}"))
        
        nav_buttons.append(InlineKeyboardButton(text=f"{page+1}/{total_pages}", callback_data="current_page"))
        
        if page < total_pages - 1:
            nav_buttons.append(InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"lessons_page:{page+1}"))
        
        builder.row(*nav_buttons)
    
    builder.row(InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))
    
    return builder.as_markup()