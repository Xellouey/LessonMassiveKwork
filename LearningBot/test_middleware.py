"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è middleware –∏ –ø–æ–∏—Å–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
"""
import asyncio
import logging
import sys
from aiogram import Bot, Dispatcher, Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage

from config import settings
from database.database import init_db, get_db_session
from services.admin import AdminService
from middlewares.database import DatabaseMiddleware
from middlewares.auth import AuthMiddleware 
from middlewares.admin import AdminMiddleware

# –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

router = Router()

@router.message(Command("test_admin"))
async def test_admin_access(message: Message, admin, is_admin_db):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    user_id = message.from_user.id
    
    text = f"""
üîç <b>–¢–µ—Å—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>

üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b>
‚Ä¢ ID: <code>{user_id}</code>
‚Ä¢ Username: @{message.from_user.username or '–ù–µ —É–∫–∞–∑–∞–Ω'}

üîê <b>–ü—Ä–∞–≤–∞:</b>
‚Ä¢ is_admin_db: {is_admin_db}
‚Ä¢ admin –æ–±—ä–µ–∫—Ç: {admin is not None}

üìã <b>–î–µ—Ç–∞–ª–∏ admin:</b>
"""
    
    if admin:
        text += f"""
‚Ä¢ ID: {admin.user_id}
‚Ä¢ Username: {admin.username}
‚Ä¢ –ü—Ä–∞–≤–∞: {admin.permissions}
‚Ä¢ –ê–∫—Ç–∏–≤–µ–Ω: {admin.is_active}
‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥: {admin.last_login}
"""
    else:
        text += "‚Ä¢ –û–±—ä–µ–∫—Ç admin –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
    
    await message.answer(text, parse_mode="HTML")

@router.callback_query(F.data == "test_support")
async def test_support_callback(callback: CallbackQuery, admin, is_admin_db):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ callback –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
    user_id = callback.from_user.id
    
    logger.info(f"Callback test_support: user_id={user_id}, admin={admin}, is_admin_db={is_admin_db}")
    
    if not is_admin_db or not admin:
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return
    
    await callback.answer("‚úÖ –î–æ—Å—Ç—É–ø –∫ –ø–æ–¥–¥–µ—Ä–∂–∫–µ —Ä–∞–∑—Ä–µ—à–µ–Ω!")
    await callback.message.edit_text(
        f"‚úÖ –¢–µ—Å—Ç –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!\n\n–ê–¥–º–∏–Ω: {admin.username}\n–ü—Ä–∞–≤–∞: {admin.permissions}"
    )

async def main():
    """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±–æ—Ç–∞"""
    await init_db()
    
    bot = Bot(
        token=settings.telegram.bot_token,
        default=DefaultBotProperties(parse_mode=ParseMode.HTML)
    )
    
    dp = Dispatcher(storage=MemoryStorage())
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º middleware –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    dp.message.middleware(DatabaseMiddleware())
    dp.callback_query.middleware(DatabaseMiddleware())
    dp.message.middleware(AuthMiddleware()) 
    dp.callback_query.middleware(AuthMiddleware())
    dp.message.middleware(AdminMiddleware())
    dp.callback_query.middleware(AdminMiddleware())
    
    dp.include_router(router)
    
    await bot.delete_webhook(drop_pending_updates=True)
    
    print("üß™ –¢–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    print("üìù –ö–æ–º–∞–Ω–¥—ã:")
    print("   /test_admin - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
    print("   Callback 'test_support' - —Ç–µ—Å—Ç callback")
    
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("üëã –¢–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")