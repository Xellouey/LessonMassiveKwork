"""
–°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
"""
import logging
from typing import List, Optional
from aiogram import Bot
from sqlalchemy.ext.asyncio import AsyncSession

from services.admin import AdminService
from database.models import SupportTicket, Admin

logger = logging.getLogger(__name__)


class NotificationService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º"""
    
    def __init__(self, bot: Bot, session: AsyncSession):
        self.bot = bot
        self.session = session
        self.admin_service = AdminService(session)
    
    async def notify_admins_of_support_request(self, ticket: SupportTicket) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –æ –Ω–æ–≤–æ–º —Ç–∏–∫–µ—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
            admins = await self.admin_service.get_all_admins()
            active_admins = [admin for admin in admins if admin.is_active]
            
            if not active_admins:
                logger.warning("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–¥–¥–µ—Ä–∂–∫–µ")
                return False
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            notification_message = f"""
üÜò <b>–ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É #{ticket.ticket_number}</b>

üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {ticket.user.full_name}
üÜî <b>ID:</b> <code>{ticket.user_id}</code>
üì± <b>Username:</b> @{ticket.user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}

üí¨ <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b>
{ticket.initial_message}

üî• <b>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</b> {ticket.priority.upper()}
üïí <b>–í—Ä–µ–º—è:</b> {ticket.created_at.strftime('%d.%m.%Y %H:%M')}

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∏–∫–µ—Ç–∞–º–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏.
"""
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
            success_count = 0
            failed_admins = []
            
            for admin in active_admins:
                try:
                    await self.bot.send_message(
                        chat_id=admin.user_id,
                        text=notification_message,
                        parse_mode="HTML"
                    )
                    success_count += 1
                    logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–∏–∫–µ—Ç–µ #{ticket.ticket_number} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É {admin.user_id}")
                    
                except Exception as e:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin.user_id}: {e}")
                    failed_admins.append(admin.user_id)
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            if success_count > 0:
                logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ç–∏–∫–µ—Ç–µ #{ticket.ticket_number} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã {success_count} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
            
            if failed_admins:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º: {failed_admins}")
            
            return success_count > 0
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Ç–∏–∫–µ—Ç–µ #{ticket.ticket_number}: {e}")
            return False
    
    async def notify_user_of_response(self, ticket: SupportTicket, response_message: str, admin_name: str = "Support") -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –Ω–æ–≤–æ–º –æ—Ç–≤–µ—Ç–µ –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
        try:
            notification_message = f"""
üí¨ <b>–ù–æ–≤—ã–π –æ—Ç–≤–µ—Ç –ø–æ —Ç–∏–∫–µ—Ç—É #{ticket.ticket_number}</b>

üë®‚Äçüíº <b>–û—Ç–≤–µ—Ç –æ—Ç:</b> {admin_name}

üìù <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b>
{response_message}

‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.
"""
            
            await self.bot.send_message(
                chat_id=ticket.user_id,
                text=notification_message,
                parse_mode="HTML"
            )
            
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –æ—Ç–≤–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {ticket.user_id} –ø–æ —Ç–∏–∫–µ—Ç—É #{ticket.ticket_number}")
            return True
            
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {ticket.user_id}: {e}")
            return False
    
    async def notify_admin_of_status_change(self, ticket: SupportTicket, old_status: str, new_status: str, admin_id: int) -> bool:
        """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Ç–∏–∫–µ—Ç–∞"""
        try:
            if not ticket.assigned_admin_id or ticket.assigned_admin_id == admin_id:
                return True  # –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–∞–º–æ–º—É —Å–µ–±–µ –∏–ª–∏ –µ—Å–ª–∏ –∞–¥–º–∏–Ω –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω
            
            status_text = {
                "open": "üü° –û—Ç–∫—Ä—ã—Ç",
                "in_progress": "üîµ –í —Ä–∞–±–æ—Ç–µ", 
                "closed": "üü¢ –ó–∞–∫—Ä—ã—Ç"
            }
            
            notification_message = f"""
üîÑ <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç–∏–∫–µ—Ç–∞ #{ticket.ticket_number}</b>

üìä <b>–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω:</b> {status_text.get(old_status, old_status)} ‚Üí {status_text.get(new_status, new_status)}

üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {ticket.user.full_name}
üí¨ <b>–ü—Ä–æ–±–ª–µ–º–∞:</b> {ticket.initial_message[:100]}{'...' if len(ticket.initial_message) > 100 else ''}

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π.
"""
            
            await self.bot.send_message(
                chat_id=ticket.assigned_admin_id,
                text=notification_message,
                parse_mode="HTML"
            )
            
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É {ticket.assigned_admin_id}")
            return True
            
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
            return False
    
    async def notify_admin_of_new_message(self, ticket: SupportTicket, message: str) -> bool:
        """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            if not ticket.assigned_admin_id:
                # –ï—Å–ª–∏ –∞–¥–º–∏–Ω –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω, —É–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤
                return await self.notify_admins_of_support_request(ticket)
            
            notification_message = f"""
üí¨ <b>–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ —Ç–∏–∫–µ—Ç—É #{ticket.ticket_number}</b>

üë§ <b>–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> {ticket.user.full_name}
üìù <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b>
{message}

üïí <b>–í—Ä–µ–º—è:</b> {ticket.updated_at.strftime('%d.%m.%Y %H:%M')}

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin –¥–ª—è –æ—Ç–≤–µ—Ç–∞.
"""
            
            await self.bot.send_message(
                chat_id=ticket.assigned_admin_id,
                text=notification_message,
                parse_mode="HTML"
            )
            
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É {ticket.assigned_admin_id}")
            return True
            
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏: {e}")
            return False
    
    async def send_broadcast_notification(self, message: str, admin_ids: Optional[List[int]] = None) -> int:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–∞—Å—Å–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º"""
        try:
            if admin_ids is None:
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
                admins = await self.admin_service.get_all_admins()
                admin_ids = [admin.user_id for admin in admins if admin.is_active]
            
            success_count = 0
            
            for admin_id in admin_ids:
                try:
                    await self.bot.send_message(
                        chat_id=admin_id,
                        text=message,
                        parse_mode="HTML"
                    )
                    success_count += 1
                    
                except Exception as e:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å broadcast –∞–¥–º–∏–Ω—É {admin_id}: {e}")
            
            logger.info(f"Broadcast –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω {success_count} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
            return success_count
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ broadcast: {e}")
            return 0