"""
–í—Ä–µ–º–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–ª–∞–¥–∫–∏ –∞–¥–º–∏–Ω-–¥–æ—Å—Ç—É–ø–∞
"""
import asyncio
import logging
import sys
from aiogram import Bot, Dispatcher, Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage

from config import settings
from database.database import init_db, get_db_session
from services.admin import AdminService

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

router = Router()

@router.message(Command("start"))
async def start_command(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    user_id = message.from_user.id
    username = message.from_user.username
    first_name = message.from_user.first_name
    
    # –ü—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–ø–∏—Å–∫–µ –∞–¥–º–∏–Ω–æ–≤
    async for session in get_db_session():
        admin_service = AdminService(session)
        admin = await admin_service.get_admin_by_user_id(user_id)
        
        admin_status = "‚úÖ –í–´ –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†" if admin else "‚ùå –ù–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
        
        info_text = f"""
üÜî <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ:</b>

‚Ä¢ Telegram ID: <code>{user_id}</code>
‚Ä¢ Username: @{username or '–ù–µ —É–∫–∞–∑–∞–Ω'}
‚Ä¢ –ò–º—è: {first_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
‚Ä¢ –°—Ç–∞—Ç—É—Å: {admin_status}

üìù <b>–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∞–¥–º–∏–Ω—ã:</b>
–ï—Å–ª–∏ –≤—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º, —Å–æ–æ–±—â–∏—Ç–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É –≤–∞—à ID: <code>{user_id}</code>
"""
        
        await message.answer(info_text, parse_mode="HTML")
        break

@router.message(Command("admin"))
async def admin_command(message: Message):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω–∫–µ"""
    user_id = message.from_user.id
    
    async for session in get_db_session():
        admin_service = AdminService(session)
        admin = await admin_service.get_admin_by_user_id(user_id)
        
        if admin:
            await message.answer(f"‚úÖ –í—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä! Username: {admin.username}, –ü—Ä–∞–≤–∞: {admin.permissions}")
        else:
            await message.answer(f"‚ùå –í–∞—à ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
        break

async def main():
    """–ó–∞–ø—É—Å–∫ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–≥–æ –±–æ—Ç–∞"""
    await init_db()
    
    bot = Bot(
        token=settings.telegram.bot_token,
        default=DefaultBotProperties(parse_mode=ParseMode.HTML)
    )
    
    dp = Dispatcher(storage=MemoryStorage())
    dp.include_router(router)
    
    await bot.delete_webhook(drop_pending_updates=True)
    
    print("üîç Debug bot –∑–∞–ø—É—â–µ–Ω. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∞—à–µ–≥–æ ID")
    print("üì± –ò–ª–∏ /admin –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω-–¥–æ—Å—Ç—É–ø–∞")
    
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("üëã Debug bot –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")