"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - —Å—Ç–∞—Ä—Ç –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
"""
import logging
from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession

from services.user import UserService
from keyboards.user import main_menu_keyboard, settings_keyboard, language_keyboard, InlineKeyboardMarkup, InlineKeyboardButton
from states.user import UserStates

logger = logging.getLogger(__name__)

router = Router()


@router.message(CommandStart())
async def cmd_start(message: Message, session: AsyncSession, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ
    """
    try:
        # –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        await state.clear()
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram
        if not message.from_user:
            await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return
            
        user_id = message.from_user.id
        username = message.from_user.username
        full_name = message.from_user.full_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
        user_service = UserService(session)
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await user_service.get_or_create_user(
            user_id=user_id,
            username=username,
            full_name=full_name
        )
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        await user_service.log_user_activity(user_id, "start_command")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–æ–≤—ã–π –ª–∏ —ç—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        is_new_user = user.registration_date.date() == user.last_activity.date()
        
        if is_new_user:
            # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            welcome_text = f"""
ü§ñ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä –ò–ò, {full_name}!</b>

–≠—Ç–æ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –ø–æ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–º—É –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É, –≥–¥–µ –≤—ã –º–æ–∂–µ—Ç–µ:
üß† –û—Å–≤–æ–∏—Ç—å –Ω–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏ –∏ –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ
üéÅ –ü–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —É—Ä–æ–∫–∏ –ø–æ –æ—Å–Ω–æ–≤–∞–º –ò–ò  
‚ú® –ü–æ–∫—É–ø–∞—Ç—å –ø—Ä–µ–º–∏—É–º AI-–∫—É—Ä—Å—ã –∑–∞ –∑–≤–µ–∑–¥—ã Telegram
üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ –∏–∑—É—á–µ–Ω–∏–∏ –ò–ò

<i>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ:</i>
"""
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await message.answer(
                welcome_text,
                reply_markup=main_menu_keyboard()
            )
            
        else:
            # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            welcome_back_text = f"""
üëã <b>–ü—Ä–∏–≤–µ—Ç, {full_name}!</b>

–†–∞–¥ –≤–∏–¥–µ—Ç—å –≤–∞—Å —Å–Ω–æ–≤–∞ –≤ –Ω–∞—à–µ–º AI-–±–æ—Ç–µ! 

üìà <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
üí∞ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ –Ω–∞ AI-–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ: {user.total_spent} ‚≠ê
üìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–∏–∑–∏—Ç: {user.last_activity.strftime('%d.%m.%Y %H:%M')}

<i>–ö–∞–∫–∏–µ –Ω–æ–≤—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –ò–ò –±—É–¥–µ–º –∏–∑—É—á–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è?</i>
"""
            
            await message.answer(
                welcome_back_text,
                reply_markup=main_menu_keyboard()
            )
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} ({username}) {'–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω' if is_new_user else '–≤–æ—à–µ–ª –≤ —Å–∏—Å—Ç–µ–º—É'}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /start –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id if message.from_user else 'Unknown'}: {e}")
        await message.answer(
            "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            reply_markup=main_menu_keyboard()
        )


async def show_free_lesson_info(message: Message, user_service: UserService):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–º —É—Ä–æ–∫–µ"""
    free_lesson_text = """
üéÅ <b>–í–∞—à –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π AI-—É—Ä–æ–∫ –∂–¥–µ—Ç!</b>

üéØ <b>–£—Ä–æ–∫:</b> "–í–≤–µ–¥–µ–Ω–∏–µ –≤ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç"
‚è±Ô∏è <b>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b> 5 –º–∏–Ω—É—Ç
üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> –£–∑–Ω–∞–π—Ç–µ, —á—Ç–æ —Ç–∞–∫–æ–µ –ò–ò, –∫–∞–∫ –æ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –∫–∞–∫–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–ª—è –≤–∞—à–µ–π –∫–∞—Ä—å–µ—Ä—ã

<i>–ü–æ–ª—É—á–∏—Ç–µ —É—Ä–æ–∫ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!</i>
"""
    
    from keyboards.user import lesson_detail_keyboard
    
    # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ –ë–î –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ —É—Ä–æ–∫–∞
    await message.answer(
        free_lesson_text,
        reply_markup=lesson_detail_keyboard(lesson_id=1, is_free=True)
    )


@router.callback_query(F.data == "main_menu")
async def show_main_menu(callback: CallbackQuery, session: AsyncSession):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    try:
        user_service = UserService(session)
        await user_service.update_user_activity(callback.from_user.id)
        await user_service.log_user_activity(callback.from_user.id, "main_menu")
        
        main_menu_text = """
üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>

–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:
"""
        
        if callback.message:
            await callback.message.edit_text(
                main_menu_text,
                reply_markup=main_menu_keyboard()
            )
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@router.callback_query(F.data == "settings")
async def show_settings(callback: CallbackQuery, session: AsyncSession):
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user_service = UserService(session)
        user = await user_service.get_user_by_telegram_id(callback.from_user.id)
        
        if not user:
            await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        await user_service.log_user_activity(callback.from_user.id, "settings")
        
        settings_text = f"""
‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>

üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å:</b>
‚îú –ò–º—è: {user.full_name}
‚îú Username: @{user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}
‚îú –Ø–∑—ã–∫: {'üá∑üá∫ –†—É—Å—Å–∫–∏–π' if user.language == 'ru' else 'üá∫üá∏ English'}
‚îî –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user.registration_date.strftime('%d.%m.%Y')}

üí∞ <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚îú –ü–æ—Ç—Ä–∞—á–µ–Ω–æ –∑–≤–µ–∑–¥: {user.total_spent} ‚≠ê
‚îî –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {user.last_activity.strftime('%d.%m.%Y %H:%M')}
"""
        
        if callback.message:
            await callback.message.edit_text(
                settings_text,
                reply_markup=settings_keyboard(user.language)
            )
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@router.callback_query(F.data == "support")
async def show_support(callback: CallbackQuery, session: AsyncSession, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–≤—è–∑—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π"""
    try:
        user_service = UserService(session)
        await user_service.update_user_activity(callback.from_user.id)
        
        await state.set_state(UserStates.contacting_support)
        
        support_text = """
üìû <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞</b>

–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ –≤–æ–ø—Ä–æ—Å, –∏ –º—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –ø–æ–º–æ—á—å –≤–∞–º –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ!

üìù <b>–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:</b>
<i>–û–ø–∏—à–∏—Ç–µ —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ, –∫–∞–∫–æ–π —É –≤–∞—Å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞...</i>
"""
        
        back_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üè† –û—Ç–º–µ–Ω–∞", callback_data="main_menu")]
        ])
        
        if callback.message:
            await callback.message.edit_text(
                support_text,
                reply_markup=back_keyboard
            )
        await callback.answer("üìû –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–æ–º")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@router.message(UserStates.contacting_support)
async def handle_support_message(message: Message, session: AsyncSession, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É"""
    try:
        if not message.from_user:
            await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return
            
        if not message.text:
            await message.answer("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_service = UserService(session)
        user = await user_service.get_user_by_telegram_id(message.from_user.id)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∏–∫–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏
        from services.support import SupportService
        from services.notification import NotificationService
        
        support_service = SupportService(session)
        notification_service = NotificationService(bot, session)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∏–∫–µ—Ç
        ticket = await support_service.create_support_ticket(
            user_id=message.from_user.id,
            message=message.text,
            priority="normal"
        )
        
        if not ticket:
            await message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=main_menu_keyboard()
            )
            await state.clear()
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º
        try:
            await notification_service.notify_admins_of_support_request(ticket)
        except Exception as notify_error:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Ç–∏–∫–µ—Ç–µ: {notify_error}")
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –¥–∞–∂–µ –µ—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏—Å—å
        
        # –û—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer(
            f"‚úÖ <b>–í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ!</b>\n\n"
            f"üé´ <b>–ù–æ–º–µ—Ä —Ç–∏–∫–µ—Ç–∞:</b> #{ticket.ticket_number}\n"
            f"üîç –ú—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏!\n\n"
            f"üï∞ –û–±—ã—á–Ω–æ –º—ã –æ—Ç–≤–µ—á–∞–µ–º –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —á–∞—Å–æ–≤.",
            reply_markup=main_menu_keyboard(),
            parse_mode="HTML"
        )
        
        await state.clear()
        
        logger.info(f"–°–æ–∑–¥–∞–Ω —Ç–∏–∫–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ #{ticket.ticket_number} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±—Ä–∞—â–µ–Ω–∏—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=main_menu_keyboard()
        )
        await state.clear()


@router.callback_query(F.data == "change_language")
async def show_language_selection(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä —è–∑—ã–∫–∞"""
    try:
        language_text = """
üåç <b>–í—ã–±–æ—Ä —è–∑—ã–∫–∞</b>

–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞:
"""
        
        if callback.message:
            await callback.message.edit_text(
                language_text,
                reply_markup=language_keyboard()
            )
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —è–∑—ã–∫–∞: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@router.callback_query(F.data.startswith("lang:"))
async def change_language(callback: CallbackQuery, session: AsyncSession):
    """–ò–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        if not callback.data:
            await callback.answer("–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
            return
            
        language = callback.data.split(":")[1]
        user_service = UserService(session)
        
        success = await user_service.update_user_language(callback.from_user.id, language)
        
        if success:
            # await user_service.log_user_activity(
            #     callback.from_user.id, 
            #     "language_changed", 
            #     extra_data=language
            # )  # ‚ùå –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è MVP - UserActivity –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
            
            lang_name = "üá∑üá∫ –†—É—Å—Å–∫–∏–π" if language == "ru" else "üá∫üá∏ English"
            success_text = f"‚úÖ –Ø–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {lang_name}"
            
            await callback.answer(success_text)
            
            # –ü–æ–∫–∞–∑–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            await show_settings(callback, session)
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —è–∑—ã–∫–∞")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —è–∑—ã–∫–∞: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")



@router.message()
async def handle_unknown_message(message: Message, session: AsyncSession, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    print(f"\n\n==== UNKNOWN MESSAGE HANDLER ====")
    print(f"message.content_type: {message.content_type}")
    print(f"message.from_user.id: {message.from_user.id if message.from_user else 'None'}")
    
    try:
        if not message.from_user:
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
        current_state = await state.get_state()
        print(f"Current FSM state: {current_state}")
        print(f"==================================\n")
        
        if current_state:
            # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            logger.info(f"UNKNOWN MESSAGE HANDLER: –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ {current_state}")
            print(f"SKIPPING message due to FSM state: {current_state}")
            return
            
        user_service = UserService(session)
        await user_service.update_user_activity(message.from_user.id)
        
        unknown_text = """
ü§î –ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –±–æ—Ç—É, –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞.
"""
        
        await message.answer(
            unknown_text,
            reply_markup=main_menu_keyboard()
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start")