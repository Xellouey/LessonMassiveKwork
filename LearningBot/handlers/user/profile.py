"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
"""
import logging
from datetime import datetime
from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession

from services.user import UserService
from services.lesson import LessonService
from keyboards.user import (
    profile_menu_keyboard, 
    lesson_controls_keyboard,
    main_menu_keyboard,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    InlineKeyboardBuilder
)
from states.user import UserStates

logger = logging.getLogger(__name__)

router = Router()


@router.callback_query(F.data == "profile")
async def show_profile_menu(callback: CallbackQuery, session: AsyncSession):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è"""
    try:
        user_service = UserService(session)
        user = await user_service.get_user_by_telegram_id(callback.from_user.id)
        
        if not user:
            await callback.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        lesson_service = LessonService(session)
        _, total_purchases = await lesson_service.get_user_purchases(
            callback.from_user.id, page=0, per_page=1
        )
        
        profile_text = f"""
üë§ <b>–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç</b>

üìã <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ñ–∏–ª–µ:</b>
‚Ä¢ –ò–º—è: {user.full_name}
‚Ä¢ Username: @{user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}
‚Ä¢ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user.registration_date.strftime('%d.%m.%Y')}
‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {user.last_activity.strftime('%d.%m.%Y %H:%M')}

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –í—Å–µ–≥–æ –ø–æ–∫—É–ø–æ–∫: {total_purchases}
‚Ä¢ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: ‚≠ê {user.total_spent} –∑–≤–µ–∑–¥
‚Ä¢ –Ø–∑—ã–∫: {'üá∑üá∫ –†—É—Å—Å–∫–∏–π' if user.language == 'ru' else 'üá∫üá∏ English'}

–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:
"""
        
        await callback.message.edit_text(
            profile_text,
            reply_markup=profile_menu_keyboard()
        )
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø—Ä–æ—Ñ–∏–ª—è: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è")


@router.callback_query(F.data == "my_purchases")
async def show_my_purchases(callback: CallbackQuery, session: AsyncSession, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ –ø–æ–∫—É–ø–∫–∏ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    try:
        await state.set_state(UserStates.viewing_purchases)
        await _show_purchases_page(callback, session, page=0)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø–æ–∫—É–ø–æ–∫: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–∫—É–ø–æ–∫")


@router.callback_query(F.data.startswith("my_purchases:"))
async def navigate_my_purchases(callback: CallbackQuery, session: AsyncSession):
    """–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º –ø–æ–∫—É–ø–æ–∫"""
    try:
        # –ü–∞—Ä—Å–∏–Ω–≥ callback_data: my_purchases:page:number
        data_parts = callback.data.split(":")
        if len(data_parts) != 3 or data_parts[1] != "page":
            await callback.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏")
            return
        
        page = int(data_parts[2])
        await _show_purchases_page(callback, session, page)
        
    except ValueError:
        await callback.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –ø–æ–∫—É–ø–∫–∞–º: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã")


async def _show_purchases_page(callback: CallbackQuery, session: AsyncSession, page: int):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–∫—É–ø–æ–∫"""
    per_page = 5
    
    lesson_service = LessonService(session)
    purchases, total_purchases = await lesson_service.get_user_purchases(
        callback.from_user.id, 
        page=page, 
        per_page=per_page
    )
    
    if not purchases and page > 0:
        # –ï—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—É—Å—Ç–∞—è, –ø–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–≤—É—é
        purchases, total_purchases = await lesson_service.get_user_purchases(
            callback.from_user.id, 
            page=0, 
            per_page=per_page
        )
        page = 0
    
    # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –æ–±—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    total_pages = (total_purchases + per_page - 1) // per_page if total_purchases > 0 else 1
    
    if not purchases:
        purchases_text = """
üë§ <b>–ú–æ–∏ –ø–æ–∫—É–ø–∫–∏</b>

üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–∫—É–ø–æ–∫.

üí° <b>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º:</b>
‚Ä¢ –ò–∑—É—á–∏—Ç–µ –Ω–∞—à –∫–∞—Ç–∞–ª–æ–≥ —É—Ä–æ–∫–æ–≤
‚Ä¢ –ù–∞—á–Ω–∏—Ç–µ —Å –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ —É—Ä–æ–∫–∞
‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å –ø–æ –≤–∞—à–∏–º –∏–Ω—Ç–µ—Ä–µ—Å–∞–º
"""
        
        empty_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìö –ö–∞—Ç–∞–ª–æ–≥ —É—Ä–æ–∫–æ–≤", callback_data="catalog")],
            [InlineKeyboardButton(text="üéÅ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π —É—Ä–æ–∫", callback_data="get_free_lesson")],
            [InlineKeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        
        await callback.message.edit_text(
            purchases_text,
            reply_markup=empty_keyboard
        )
        return
    
    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–æ–∫—É–ø–æ–∫
    purchases_text = f"""
üë§ <b>–ú–æ–∏ –ø–æ–∫—É–ø–∫–∏</b>

üìä <b>–í—Å–µ–≥–æ –ø–æ–∫—É–ø–æ–∫:</b> {total_purchases}
üìÑ <b>–°—Ç—Ä–∞–Ω–∏—Ü–∞:</b> {page + 1} –∏–∑ {total_pages}

üìö <b>–í–∞—à–∏ —É—Ä–æ–∫–∏:</b>
"""
    
    for i, purchase_data in enumerate(purchases, 1 + page * per_page):
        purchase = purchase_data['purchase']
        lesson = purchase_data['lesson']
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –ø–æ —Ç–∏–ø—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        content_icons = {
            "video": "üé•",
            "photo": "üì∑", 
            "document": "üìÑ",
            "audio": "üéµ",
            "text": "üìù"
        }
        content_icon = content_icons.get(lesson.content_type, "üìö")
        
        # –°—Ç–∞—Ç—É—Å –≤–æ–∑–≤—Ä–∞—Ç–∞
        refund_status = ""
        if purchase.status == "refunded":
            refund_status = " ‚ùå <i>–í–æ–∑–≤—Ä–∞—â–µ–Ω</i>"
        
        purchases_text += f"""
{i}. {content_icon} <b>{lesson.title}</b>
   üí∞ {purchase.amount_stars} ‚≠ê ‚Ä¢ {purchase.purchase_date.strftime('%d.%m.%Y')}{refund_status}
   üìù {lesson.description[:50]}{'...' if len(lesson.description) > 50 else ''}
   
"""
    
    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –ø–æ–∫—É–ø–∫–∞–º–∏ –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
    keyboard_builder = InlineKeyboardBuilder()
            
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–∫–∞
    for purchase_data in purchases:
        lesson = purchase_data['lesson']
        keyboard_builder.row(InlineKeyboardButton(
            text=f"‚ñ∂Ô∏è {lesson.title[:30]}{'...' if len(lesson.title) > 30 else ''}",
            callback_data=f"open_lesson:{lesson.id}"
        ))
            
    # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
    if total_pages > 1:
        nav_buttons = []
                
        if page > 0:
            nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"my_purchases:page:{page-1}"))
                
        nav_buttons.append(InlineKeyboardButton(text=f"{page + 1}/{total_pages}", callback_data="current_page"))
                
        if page < total_pages - 1:
            nav_buttons.append(InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"my_purchases:page:{page+1}"))
                
        keyboard_builder.row(*nav_buttons)
            
    keyboard_builder.row(
        InlineKeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile"),
        InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    )
            
    keyboard = keyboard_builder.as_markup()
    
    await callback.message.edit_text(
        purchases_text,
        reply_markup=keyboard
    )
    await callback.answer()


@router.callback_query(F.data.startswith("open_lesson:"))
async def open_lesson_from_purchases(callback: CallbackQuery, session: AsyncSession):
    """–û—Ç–∫—Ä—ã—Ç—å —É—Ä–æ–∫ –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ–∫—É–ø–æ–∫"""
    try:
        # –ü–∞—Ä—Å–∏–Ω–≥ callback_data: open_lesson:lesson_id
        lesson_id = int(callback.data.split(":")[1])
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —É—Ä–æ–∫—É
        lesson_service = LessonService(session)
        has_access = await lesson_service.check_user_has_lesson(callback.from_user.id, lesson_id)
        
        if not has_access:
            await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —É—Ä–æ–∫—É")
            return
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Ä–æ–∫–µ
        lesson = await lesson_service.get_lesson_by_id(lesson_id)
        if not lesson:
            await callback.answer("‚ùå –£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ —É—Ä–æ–∫–∞ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        lesson_text = f"""
üìö <b>{lesson.title}</b>

üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>
{lesson.description}

üìä <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>
‚Ä¢ –¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {lesson.content_type.upper()}
‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {lesson.category or '–û–±—â–∏–µ'}
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: {lesson.views_count}
"""
        
        if lesson.duration:
            minutes = lesson.duration // 60
            seconds = lesson.duration % 60
            lesson_text += f"‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {minutes:02d}:{seconds:02d}\n"
        
        lesson_text += f"\n‚úÖ <b>–£ –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ —ç—Ç–æ–º—É —É—Ä–æ–∫—É!</b>"
        
        keyboard = lesson_controls_keyboard(lesson_id, has_access=True)
        
        await callback.message.edit_text(
            lesson_text,
            reply_markup=keyboard
        )
        await callback.answer("üìö –£—Ä–æ–∫ –∑–∞–≥—Ä—É–∂–µ–Ω")
        
    except (ValueError, IndexError):
        await callback.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —É—Ä–æ–∫–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —É—Ä–æ–∫–∞: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —É—Ä–æ–∫–∞")


@router.callback_query(F.data.startswith("watch_lesson:"))
async def watch_lesson(callback: CallbackQuery, session: AsyncSession):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä —É—Ä–æ–∫–∞ (–æ—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–¥–∏–∞-–∫–æ–Ω—Ç–µ–Ω—Ç–∞)"""
    try:
        # –ü–∞—Ä—Å–∏–Ω–≥ callback_data: watch_lesson:lesson_id
        lesson_id = int(callback.data.split(":")[1])
        
        lesson_service = LessonService(session)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞
        has_access = await lesson_service.check_user_has_lesson(callback.from_user.id, lesson_id)
        if not has_access:
            await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —É—Ä–æ–∫—É")
            return
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —É—Ä–æ–∫–∞
        lesson = await lesson_service.get_lesson_by_id(lesson_id)
        if not lesson or not lesson.file_id:
            await callback.answer("‚ùå –ö–æ–Ω—Ç–µ–Ω—Ç —É—Ä–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
        
        # –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        await lesson_service.increment_lesson_views(lesson_id)
        
        user_service = UserService(session)
        await user_service.log_user_activity(
            callback.from_user.id,
            "lesson_viewed",
            lesson_id=lesson_id
        )
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —É—Ä–æ–∫–∞
        lesson_caption = f"""
üìö <b>{lesson.title}</b>

{lesson.description}

<i>–ò–∑—É—á–∞–π—Ç–µ –≤ —Å–≤–æ–µ–º —Ç–µ–º–ø–µ! –£—Ä–æ–∫ –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Ä–∞–∑–¥–µ–ª–µ "–ú–æ–∏ –ø–æ–∫—É–ø–∫–∏".</i>
"""
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–¥–∏–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
        if lesson.content_type == "video":
            await callback.message.answer_video(
                video=lesson.file_id,
                caption=lesson_caption
            )
        elif lesson.content_type == "photo":
            await callback.message.answer_photo(
                photo=lesson.file_id,
                caption=lesson_caption
            )
        elif lesson.content_type == "document":
            await callback.message.answer_document(
                document=lesson.file_id,
                caption=lesson_caption
            )
        elif lesson.content_type == "audio":
            await callback.message.answer_audio(
                audio=lesson.file_id,
                caption=lesson_caption
            )
        else:
            # –î–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —É—Ä–æ–∫–æ–≤ –∏–ª–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ç–∏–ø–æ–≤
            await callback.message.answer(lesson_caption)
        
        await callback.answer("‚ñ∂Ô∏è –£—Ä–æ–∫ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è")
        
    except (ValueError, IndexError):
        await callback.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —É—Ä–æ–∫–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ —É—Ä–æ–∫–∞: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏ —É—Ä–æ–∫–∞")


@router.callback_query(F.data == "profile_settings")
async def show_profile_settings(callback: CallbackQuery, session: AsyncSession):
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è"""
    try:
        user_service = UserService(session)
        user = await user_service.get_user_by_telegram_id(callback.from_user.id)
        
        if not user:
            await callback.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        settings_text = f"""
‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è</b>

üë§ <b>–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>
‚Ä¢ –ò–º—è: {user.full_name}
‚Ä¢ Username: @{user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}
‚Ä¢ –Ø–∑—ã–∫: {'üá∑üá∫ –†—É—Å—Å–∫–∏–π' if user.language == 'ru' else 'üá∫üá∏ English'}
‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {'‚úÖ –í–∫–ª—é—á–µ–Ω—ã' if user.is_active else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω—ã'}

<i>–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:</i>
"""
        
        settings_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üåç –ò–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫", callback_data="change_language")],
            [InlineKeyboardButton(text="üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="toggle_notifications")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ—Ñ–∏–ª—é", callback_data="profile")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        
        await callback.message.edit_text(
            settings_text,
            reply_markup=settings_keyboard
        )
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ—Ñ–∏–ª—è: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫")


@router.callback_query(F.data == "change_language")
async def change_language(callback: CallbackQuery, session: AsyncSession):
    """–ò–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
    try:
        user_service = UserService(session)
        user = await user_service.get_user_by_telegram_id(callback.from_user.id)
        
        if not user:
            await callback.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        current_lang = user.language
        new_lang = 'en' if current_lang == 'ru' else 'ru'
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞
        await user_service.update_user_language(callback.from_user.id, new_lang)
        
        # –¢–µ–∫—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞ –Ω–æ–≤–æ–º —è–∑—ã–∫–µ
        if new_lang == 'ru':
            success_text = "‚úÖ –Ø–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ —Ä—É—Å—Å–∫–∏–π"
        else:
            success_text = "‚úÖ Language changed to English"
        
        await callback.answer(success_text)
        
        # –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å (—Ç–∞–∫ –∫–∞–∫ —Ç–µ–ø–µ—Ä—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –ø—Ä–æ—Ñ–∏–ª–µ)
        await show_profile_menu(callback, session)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —è–∑—ã–∫–∞: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —è–∑—ã–∫–∞")


@router.callback_query(F.data == "toggle_notifications")
async def toggle_notifications(callback: CallbackQuery, session: AsyncSession):
    """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    try:
        user_service = UserService(session)
        user = await user_service.get_user_by_telegram_id(callback.from_user.id)
        
        if not user:
            await callback.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        new_status = not user.is_active
        await user_service.update_user_status(callback.from_user.id, new_status)
        
        status_text = "‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã" if new_status else "‚ùå –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã"
        await callback.answer(status_text)
        
        # –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å (—Ç–∞–∫ –∫–∞–∫ —Ç–µ–ø–µ—Ä—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –ø—Ä–æ—Ñ–∏–ª–µ)
        await show_profile_menu(callback, session)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫")


@router.callback_query(F.data == "notifications_settings")
async def notifications_settings(callback: CallbackQuery, session: AsyncSession):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π - –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ"""
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –ª–æ–≥–∏–∫—É —á—Ç–æ –∏ toggle_notifications
    await toggle_notifications(callback, session)