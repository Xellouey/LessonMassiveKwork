"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏ —É—Ä–æ–∫–∞
"""
import logging
from aiogram import Router, F
from aiogram.types import CallbackQuery
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession

from services.lesson import LessonService
from services.user import UserService
from keyboards.user import lesson_detail_keyboard, payment_keyboard, main_menu_keyboard, InlineKeyboardButton, InlineKeyboardBuilder
from states.user import UserStates

logger = logging.getLogger(__name__)

router = Router()


@router.callback_query(F.data.startswith("lesson:"))
async def show_lesson_detail(callback: CallbackQuery, session: AsyncSession):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Ä–æ–∫–µ"""
    try:
        lesson_id = int(callback.data.split(":")[1])
        
        lesson_service = LessonService(session)
        user_service = UserService(session)
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —É—Ä–æ–∫–∞
        lesson = await lesson_service.get_lesson_by_id(lesson_id)
        
        if not lesson:
            await callback.answer("‚ùå –£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ—Å—Ç—É–ø –∫ —É—Ä–æ–∫—É
        has_access = await lesson_service.check_user_has_lesson(
            callback.from_user.id, 
            lesson_id
        )
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        await user_service.log_user_activity(
            callback.from_user.id, 
            "view_lesson_detail", 
            lesson_id=lesson_id
        )
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Ä–æ–∫–µ
        content_icon = {
            'video': 'üé• –í–∏–¥–µ–æ—É—Ä–æ–∫',
            'audio': 'üéµ –ê—É–¥–∏–æ—É—Ä–æ–∫', 
            'document': 'üìÑ –¢–µ–∫—Å—Ç–æ–≤—ã–π —É—Ä–æ–∫',
            'photo': 'üì∏ –£—Ä–æ–∫ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏'
        }.get(lesson.content_type, 'üìö –£—Ä–æ–∫')
        
        # –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        duration_text = ""
        if lesson.duration:
            minutes = lesson.duration // 60
            seconds = lesson.duration % 60
            if minutes > 0:
                duration_text = f"\n‚è±Ô∏è <b>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b> {minutes} –º–∏–Ω"
                if seconds > 0:
                    duration_text += f" {seconds} —Å–µ–∫"
            else:
                duration_text = f"\n‚è±Ô∏è <b>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b> {seconds} —Å–µ–∫"
        
        # –¶–µ–Ω–∞
        if lesson.is_free:
            price_text = "\nüí∞ <b>–¶–µ–Ω–∞:</b> üéÅ –ë–µ—Å–ø–ª–∞—Ç–Ω–æ"
        else:
            from services.currency import CurrencyService
            usd_price = CurrencyService.format_usd_price(lesson.price_usd)
            price_text = f"\nüí∞ <b>–¶–µ–Ω–∞:</b> {usd_price}"
        
        # –°—Ç–∞—Ç—É—Å –¥–æ—Å—Ç—É–ø–∞
        if has_access:
            access_text = "\n‚úÖ <b>–°—Ç–∞—Ç—É—Å:</b> –£ –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ —ç—Ç–æ–º—É —É—Ä–æ–∫—É"
        else:
            access_text = "\nüîí <b>–°—Ç–∞—Ç—É—Å:</b> –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–∫—É–ø–∫–∞"
        
        lesson_detail_text = f"""
üìö <b>{lesson.title}</b>

{content_icon}

üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>
{lesson.description}
{duration_text}
{price_text}
{access_text}

üè∑Ô∏è <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {lesson.category or '–û–±—â–∞—è'}
üëÅÔ∏è <b>–ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤:</b> {lesson.views_count}
üìÖ <b>–î–æ–±–∞–≤–ª–µ–Ω:</b> {lesson.created_at.strftime('%d.%m.%Y')}
"""
        
        await callback.message.edit_text(
            lesson_detail_text,
            reply_markup=lesson_detail_keyboard(
                lesson_id=lesson_id, 
                is_purchased=has_access, 
                is_free=lesson.is_free
            )
        )
        await callback.answer()
        
    except (ValueError, IndexError):
        await callback.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —É—Ä–æ–∫–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –¥–µ—Ç–∞–ª–µ–π —É—Ä–æ–∫–∞: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —É—Ä–æ–∫–∞")


@router.callback_query(F.data.startswith("preview:"))
async def show_lesson_preview(callback: CallbackQuery, session: AsyncSession):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–≤—å—é —É—Ä–æ–∫–∞"""
    try:
        lesson_id = int(callback.data.split(":")[1])
        
        lesson_service = LessonService(session)
        user_service = UserService(session)
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —É—Ä–æ–∫–∞
        lesson = await lesson_service.get_lesson_by_id(lesson_id)
        
        if not lesson:
            await callback.answer("‚ùå –£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–µ–≤—å—é
        await user_service.log_user_activity(
            callback.from_user.id, 
            "view_lesson_preview", 
            lesson_id=lesson_id
        )
        
        # –ü—Ä–µ–≤—å—é –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (–ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤ –æ–ø–∏—Å–∞–Ω–∏—è)
        preview_description = lesson.description[:200] + "..." if len(lesson.description) > 200 else lesson.description
        
        preview_text = f"""
üëÄ <b>–ü—Ä–µ–≤—å—é: {lesson.title}</b>

üìù <b>–ö—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:</b>
{preview_description}

<i>üîí –ü–æ–ª–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏ —É—Ä–æ–∫–∞</i>

üí° <b>–ß—Ç–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:</b>
‚Ä¢ –ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º —É—Ä–æ–∫–∞
‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–∞ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –æ–±—É—á–µ–Ω–∏—è
"""
        
        from keyboards.user import InlineKeyboardBuilder
        builder = InlineKeyboardBuilder()
        
        if lesson.is_free:
            builder.row(InlineKeyboardButton(
                text="üéÅ –ü–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ", 
                callback_data=f"get_free:{lesson_id}"
            ))
        else:
            from services.currency import CurrencyService
            usd_price = CurrencyService.format_usd_price(lesson.price_usd)
            builder.row(InlineKeyboardButton(
                text=f"üí≥ –ö—É–ø–∏—Ç—å –∑–∞ {usd_price}", 
                callback_data=f"buy_lesson:{lesson_id}"
            ))
        
        builder.row(
            InlineKeyboardButton(text="üîô –ö —É—Ä–æ–∫—É", callback_data=f"lesson:{lesson_id}"),
            InlineKeyboardButton(text="üìö –ö –∫–∞—Ç–∞–ª–æ–≥—É", callback_data="catalog")
        )
        
        await callback.message.edit_text(
            preview_text,
            reply_markup=builder.as_markup()
        )
        await callback.answer("üëÄ –ü–æ–∫–∞–∑–∞–Ω–æ –ø—Ä–µ–≤—å—é —É—Ä–æ–∫–∞")
        
    except (ValueError, IndexError):
        await callback.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —É—Ä–æ–∫–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø—Ä–µ–≤—å—é —É—Ä–æ–∫–∞: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@router.callback_query(F.data.startswith("info:"))
async def show_lesson_info(callback: CallbackQuery, session: AsyncSession):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Ä–æ–∫–µ"""
    try:
        lesson_id = int(callback.data.split(":")[1])
        
        lesson_service = LessonService(session)
        user_service = UserService(session)
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —É—Ä–æ–∫–∞
        lesson = await lesson_service.get_lesson_by_id(lesson_id)
        
        if not lesson:
            await callback.answer("‚ùå –£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        await user_service.log_user_activity(
            callback.from_user.id, 
            "view_lesson_info", 
            lesson_id=lesson_id
        )
        
        # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        content_types = {
            'video': '–í–∏–¥–µ–æ–º–∞—Ç–µ—Ä–∏–∞–ª',
            'audio': '–ê—É–¥–∏–æ–∑–∞–ø–∏—Å—å',
            'document': '–¢–µ–∫—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç',
            'photo': '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –≥—Ä–∞—Ñ–∏–∫–∞'
        }
        
        info_text = f"""
‚ÑπÔ∏è <b>–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b>

üìö <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {lesson.title}

üìã <b>–ü–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:</b>
{lesson.description}

üîß <b>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏:</b>
‚Ä¢ –¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {content_types.get(lesson.content_type, '–°–º–µ—à–∞–Ω–Ω—ã–π')}
‚Ä¢ ID —É—Ä–æ–∫–∞: #{lesson_id}
‚Ä¢ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {lesson.created_at.strftime('%d.%m.%Y %H:%M')}
‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {lesson.updated_at.strftime('%d.%m.%Y %H:%M')}

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: {lesson.views_count}
‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {lesson.category or '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'}
‚Ä¢ –°—Ç–∞—Ç—É—Å: {'üü¢ –ê–∫—Ç–∏–≤–Ω—ã–π' if lesson.is_active else 'üî¥ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–π'}

üí° <b>–ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è:</b>
‚Ä¢ –ù–∞—á–∏–Ω–∞—é—â–∏—Ö –∏ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚Ä¢ –°–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ–≥–æ –∏–∑—É—á–µ–Ω–∏—è
‚Ä¢ –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∑–Ω–∞–Ω–∏–π
"""
        
        from keyboards.user import InlineKeyboardBuilder
        builder = InlineKeyboardBuilder()
        
        builder.row(InlineKeyboardButton(
            text="üîô –ö —É—Ä–æ–∫—É", 
            callback_data=f"lesson:{lesson_id}"
        ))
        
        builder.row(
            InlineKeyboardButton(text="üìö –ö –∫–∞—Ç–∞–ª–æ–≥—É", callback_data="catalog"),
            InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        )
        
        await callback.message.edit_text(
            info_text,
            reply_markup=builder.as_markup()
        )
        await callback.answer()
        
    except (ValueError, IndexError):
        await callback.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —É—Ä–æ–∫–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Ä–æ–∫–µ: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@router.callback_query(F.data.startswith("buy_lesson:"))
async def initiate_lesson_purchase(callback: CallbackQuery, session: AsyncSession):
    """–ò–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∫—É–ø–∫—É —É—Ä–æ–∫–∞"""
    try:
        lesson_id = int(callback.data.split(":")[1])
        
        lesson_service = LessonService(session)
        user_service = UserService(session)
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —É—Ä–æ–∫–∞
        lesson = await lesson_service.get_lesson_by_id(lesson_id)
        
        if not lesson:
            await callback.answer("‚ùå –£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        if lesson.is_free:
            await callback.answer("‚ùå –≠—Ç–æ—Ç —É—Ä–æ–∫ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É")
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ –∫—É–ø–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —ç—Ç–æ—Ç —É—Ä–æ–∫
        has_access = await lesson_service.check_user_has_lesson(
            callback.from_user.id, 
            lesson_id
        )
        
        if has_access:
            await callback.answer("‚úÖ –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ —ç—Ç–æ–º—É —É—Ä–æ–∫—É")
            return
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–º–µ—Ä–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏
        await user_service.log_user_activity(
            callback.from_user.id, 
            "initiate_purchase", 
            lesson_id=lesson_id
        )
        
        # –ü–æ–∫–∞–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–∫—É–ø–∫–µ
        purchase_text = f"""
üí≥ <b>–ü–æ–∫—É–ø–∫–∞ —É—Ä–æ–∫–∞</b>

üìö <b>–£—Ä–æ–∫:</b> {lesson.title}
üí∞ <b>–¶–µ–Ω–∞:</b> ‚≠ê {lesson.price_stars} –∑–≤–µ–∑–¥

üìù <b>–ß—Ç–æ –≤—Ö–æ–¥–∏—Ç –≤ –ø–æ–∫—É–ø–∫—É:</b>
‚Ä¢ –ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º —É—Ä–æ–∫–∞
‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è
‚Ä¢ –ü–æ–∂–∏–∑–Ω–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –∫–æ–Ω—Ç–µ–Ω—Ç—É
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö

üí° <b>–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ Telegram Stars:</b>
‚Ä¢ –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ–ø–ª–∞—Ç—ã
‚Ä¢ –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤

<b>–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∫—É–ø–∫—É?</b>
"""
        
        await callback.message.edit_text(
            purchase_text,
            reply_markup=payment_keyboard(lesson_id, lesson.price_stars)
        )
        await callback.answer()
        
    except (ValueError, IndexError):
        await callback.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —É—Ä–æ–∫–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞—Ü–∏–∏ –ø–æ–∫—É–ø–∫–∏: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∫ –ø–æ–∫—É–ø–∫–µ")


@router.callback_query(F.data.startswith("open_lesson:"))
async def open_purchased_lesson(callback: CallbackQuery, session: AsyncSession):
    """–û—Ç–∫—Ä—ã—Ç—å –∫—É–ø–ª–µ–Ω–Ω—ã–π —É—Ä–æ–∫"""
    try:
        lesson_id = int(callback.data.split(":")[1])
        
        lesson_service = LessonService(session)
        user_service = UserService(session)
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —É—Ä–æ–∫–∞
        lesson = await lesson_service.get_lesson_by_id(lesson_id)
        
        if not lesson:
            await callback.answer("‚ùå –£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞
        has_access = await lesson_service.check_user_has_lesson(
            callback.from_user.id, 
            lesson_id
        )
        
        if not has_access and not lesson.is_free:
            await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —É—Ä–æ–∫—É")
            return
        
        # –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
        await lesson_service.increment_lesson_views(lesson_id)
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–∏—è —É—Ä–æ–∫–∞
        await user_service.log_user_activity(
            callback.from_user.id, 
            "open_lesson", 
            lesson_id=lesson_id
        )
        
        # –ü–æ–∫–∞–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —É—Ä–æ–∫–∞
        await show_lesson_content(callback, lesson, session)
        
    except (ValueError, IndexError):
        await callback.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —É—Ä–æ–∫–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —É—Ä–æ–∫–∞: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —É—Ä–æ–∫–∞")


async def show_lesson_content(callback: CallbackQuery, lesson, session: AsyncSession):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç —É—Ä–æ–∫–∞"""
    try:
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —É—Ä–æ–∫–∞
        content_header = f"""
‚ñ∂Ô∏è <b>{lesson.title}</b>

üìö <b>–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —É—Ä–æ–∫–∞:</b>
"""
        
        # –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        if lesson.content_type == "video" and lesson.file_id:
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ
            await callback.message.answer_video(
                video=lesson.file_id,
                caption=f"{content_header}\nüé• –í–∏–¥–µ–æ—É—Ä–æ–∫ –≥–æ—Ç–æ–≤ –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É!"
            )
        elif lesson.content_type == "photo" and lesson.file_id:
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ
            await callback.message.answer_photo(
                photo=lesson.file_id,
                caption=f"{content_header}\nüì∏ –ò–∑—É—á–∞–π—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ!"
            )
        elif lesson.content_type == "document" and lesson.file_id:
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
            await callback.message.answer_document(
                document=lesson.file_id,
                caption=f"{content_header}\nüìÑ –î–æ–∫—É–º–µ–Ω—Ç –≥–æ—Ç–æ–≤ –∫ –∏–∑—É—á–µ–Ω–∏—é!"
            )
        elif lesson.content_type == "audio" and lesson.file_id:
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –∞—É–¥–∏–æ
            await callback.message.answer_audio(
                audio=lesson.file_id,
                caption=f"{content_header}\nüéµ –ê—É–¥–∏–æ—É—Ä–æ–∫ –≥–æ—Ç–æ–≤ –∫ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—é!"
            )
        else:
            # –¢–µ–∫—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
            text_content = f"""
{content_header}

üìñ <b>–ú–∞—Ç–µ—Ä–∏–∞–ª —É—Ä–æ–∫–∞:</b>

{lesson.description}

<i>‚úÖ –£—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç! –ò–∑—É—á–∞–π—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª –≤ —É–¥–æ–±–Ω–æ–º —Ç–µ–º–ø–µ.</i>
"""
            
            await callback.message.edit_text(text_content)
        
        # –ö–Ω–æ–ø–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —É—Ä–æ–∫–∞
        from keyboards.user import InlineKeyboardBuilder
        builder = InlineKeyboardBuilder()
        
        builder.row(InlineKeyboardButton(
            text="‚úÖ –£—Ä–æ–∫ –∏–∑—É—á–µ–Ω", 
            callback_data="lesson_completed"
        ))
        
        builder.row(
            InlineKeyboardButton(text="üë§ –ú–æ–∏ —É—Ä–æ–∫–∏", callback_data="my_purchases"),
            InlineKeyboardButton(text="üìö –ö –∫–∞—Ç–∞–ª–æ–≥—É", callback_data="catalog")
        )
        
        builder.row(InlineKeyboardButton(
            text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", 
            callback_data="main_menu"
        ))
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–µ—Å–ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π)
        if lesson.file_id:
            await callback.message.answer(
                "üéØ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Ä–æ–∫–æ–º:</b>",
                reply_markup=builder.as_markup()
            )
        
        await callback.answer("‚úÖ –£—Ä–æ–∫ –æ—Ç–∫—Ä—ã—Ç!")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —É—Ä–æ–∫–∞: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞")