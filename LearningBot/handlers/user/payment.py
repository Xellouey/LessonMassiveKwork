"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ Telegram Stars
"""
import logging
from aiogram import Router, F, Bot
from aiogram.types import CallbackQuery, PreCheckoutQuery, Message
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession

from services.payment import PaymentService
from services.lesson import LessonService
from services.user import UserService
from keyboards.user import lesson_detail_keyboard, main_menu_keyboard, InlineKeyboardMarkup, InlineKeyboardButton
from states.user import PaymentStates

logger = logging.getLogger(__name__)

router = Router()


@router.callback_query(F.data.startswith("pay:"))
async def process_payment(callback: CallbackQuery, session: AsyncSession, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–∏—Ü–∏–∞—Ü–∏–∏ –ø–ª–∞—Ç–µ–∂–∞"""
    try:
        # –ü–∞—Ä—Å–∏–Ω–≥ callback_data: pay:lesson_id:price_stars
        data_parts = callback.data.split(":")
        if len(data_parts) != 3:
            await callback.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞")
            return
        
        lesson_id = int(data_parts[1])
        expected_price = int(data_parts[2])
        
        payment_service = PaymentService(session, callback.bot)
        user_service = UserService(session)
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        is_valid, error_msg, lesson_data = await payment_service.validate_payment_data(
            callback.from_user.id, 
            lesson_id
        )
        
        if not is_valid:
            await callback.answer(f"‚ùå {error_msg}")
            return
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω—ã
        if lesson_data["price_stars"] != expected_price:
            await callback.answer("‚ùå –¶–µ–Ω–∞ —É—Ä–æ–∫–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å, –æ–±–Ω–æ–≤–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é")
            return
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ø—ã—Ç–∫–∏ –æ–ø–ª–∞—Ç—ã
        await user_service.log_user_activity(
            callback.from_user.id, 
            "payment_initiated", 
            lesson_id=lesson_id,
            extra_data=f"price:{expected_price}"
        )
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–≤–æ–π—Å–∞
        invoice_created = await payment_service.create_invoice(
            user_id=callback.from_user.id,
            lesson_id=lesson_id,
            lesson_title=lesson_data["title"],
            lesson_description=f"–î–æ—Å—Ç—É–ø –∫ —É—Ä–æ–∫—É: {lesson_data['description'][:100]}...",
            price_stars=lesson_data["price_stars"]
        )
        
        if invoice_created:
            await callback.answer("üí≥ –ò–Ω–≤–æ–π—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á–∞—Ç —Å –±–æ—Ç–æ–º.")
            
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–ø–ª–∞—Ç—ã
            payment_info_text = f"""
üí≥ <b>–û–ø–ª–∞—Ç–∞ —É—Ä–æ–∫–∞</b>

üìö <b>–£—Ä–æ–∫:</b> {lesson_data['title']}
üí∞ <b>–°—É–º–º–∞:</b> ‚≠ê {lesson_data['price_stars']} –∑–≤–µ–∑–¥

üîÑ <b>–°—Ç–∞—Ç—É—Å:</b> –û–∂–∏–¥–∞–Ω–∏–µ –æ–ø–ª–∞—Ç—ã...

<i>–ò–Ω–≤–æ–π—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç. –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã.</i>

üí° <b>–ß—Ç–æ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã:</b>
‚Ä¢ –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ —É—Ä–æ–∫—É
‚Ä¢ –£—Ä–æ–∫ –ø–æ—è–≤–∏—Ç—Å—è –≤ —Ä–∞–∑–¥–µ–ª–µ "–ú–æ–∏ –ø–æ–∫—É–ø–∫–∏"
‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è
"""
            
            payment_keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üë§ –ú–æ–∏ –ø–æ–∫—É–ø–∫–∏", callback_data="my_purchases")],
                [InlineKeyboardButton(text="üìö –ö –∫–∞—Ç–∞–ª–æ–≥—É", callback_data="catalog")],
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
            
            await callback.message.edit_text(
                payment_info_text,
                reply_markup=payment_keyboard
            )
            
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–≤–æ–π—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            
    except (ValueError, IndexError):
        await callback.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞—Ü–∏–∏ –ø–ª–∞—Ç–µ–∂–∞")


@router.pre_checkout_query()
async def process_pre_checkout_query(pre_checkout_query: PreCheckoutQuery, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ pre-checkout query (–≤–∞–ª–∏–¥–∞—Ü–∏—è –ø–µ—Ä–µ–¥ –ø–ª–∞—Ç–µ–∂–æ–º)"""
    try:
        payment_service = PaymentService(session, pre_checkout_query.bot)
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–ª–∞—Ç–µ–∂–∞
        is_valid, error_message = await payment_service.process_pre_checkout(
            pre_checkout_query_id=pre_checkout_query.id,
            user_id=pre_checkout_query.from_user.id,
            total_amount=pre_checkout_query.total_amount,
            invoice_payload=pre_checkout_query.invoice_payload
        )
        
        if is_valid:
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
            await pre_checkout_query.answer(ok=True)
            logger.info(f"Pre-checkout –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {pre_checkout_query.from_user.id}")
        else:
            # –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
            await pre_checkout_query.answer(
                ok=False, 
                error_message=error_message or "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞"
            )
            logger.warning(f"Pre-checkout –æ—Ç–∫–ª–æ–Ω–µ–Ω: {error_message}")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ pre-checkout query: {e}")
        await pre_checkout_query.answer(
            ok=False, 
            error_message="–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"
        )


@router.message(F.successful_payment)
async def process_successful_payment(message: Message, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞"""
    try:
        payment = message.successful_payment
        payment_service = PaymentService(session, message.bot)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
        purchase = await payment_service.process_successful_payment(
            user_id=message.from_user.id,
            payment_charge_id=payment.telegram_payment_charge_id,
            total_amount=payment.total_amount,
            invoice_payload=payment.invoice_payload
        )
        
        if purchase:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Ä–æ–∫–µ
            lesson_service = LessonService(session)
            lesson = await lesson_service.get_lesson_by_id(purchase.lesson_id)
            
            if lesson:
                # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –ø–æ–∫—É–ø–∫–µ
                success_text = f"""
üéâ <b>–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!</b>

‚úÖ <b>–£—Ä–æ–∫ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω:</b> {lesson.title}
üí∞ <b>–û–ø–ª–∞—á–µ–Ω–æ:</b> ‚≠ê {purchase.amount_stars} –∑–≤–µ–∑–¥
üìÖ <b>–î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏:</b> {purchase.purchase_date.strftime('%d.%m.%Y %H:%M')}

üöÄ <b>–£—Ä–æ–∫ —É–∂–µ –¥–æ—Å—Ç—É–ø–µ–Ω!</b>
–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∏–∑—É—á–µ–Ω–∏–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å –∏–ª–∏ –Ω–∞–π—Ç–∏ —É—Ä–æ–∫ –≤ —Ä–∞–∑–¥–µ–ª–µ "–ú–æ–∏ –ø–æ–∫—É–ø–∫–∏".

<i>–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! –ñ–µ–ª–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è! üéì</i>
"""
                
                success_keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚ñ∂Ô∏è –û—Ç–∫—Ä—ã—Ç—å —É—Ä–æ–∫", callback_data=f"open_lesson:{lesson.id}")],
                    [InlineKeyboardButton(text="üë§ –ú–æ–∏ –ø–æ–∫—É–ø–∫–∏", callback_data="my_purchases")],
                    [InlineKeyboardButton(text="üìö –ë–æ–ª—å—à–µ —É—Ä–æ–∫–æ–≤", callback_data="catalog")],
                    [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                ])
                
                await message.answer(
                    success_text,
                    reply_markup=success_keyboard
                )
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∞–º –∫–æ–Ω—Ç–µ–Ω—Ç —É—Ä–æ–∫–∞
                if lesson.content_type and lesson.file_id:
                    content_text = f"üìö <b>–í–∞—à —É—Ä–æ–∫ –≥–æ—Ç–æ–≤ –∫ –∏–∑—É—á–µ–Ω–∏—é:</b>\n\n{lesson.title}"
                    
                    if lesson.content_type == "video":
                        await message.answer_video(
                            video=lesson.file_id,
                            caption=content_text
                        )
                    elif lesson.content_type == "photo":
                        await message.answer_photo(
                            photo=lesson.file_id,
                            caption=content_text
                        )
                    elif lesson.content_type == "document":
                        await message.answer_document(
                            document=lesson.file_id,
                            caption=content_text
                        )
                    elif lesson.content_type == "audio":
                        await message.answer_audio(
                            audio=lesson.file_id,
                            caption=content_text
                        )
                
                logger.info(f"–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id}, —É—Ä–æ–∫ {lesson.id}")
                
            else:
                await message.answer(
                    "‚úÖ –ü–ª–∞—Ç–µ–∂ –∑–∞–≤–µ—Ä—à–µ–Ω, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—Ä–æ–∫–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                    reply_markup=main_menu_keyboard()
                )
        else:
            await message.answer(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞. –ï—Å–ª–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ –±—ã–ª–∏ —Å–ø–∏—Å–∞–Ω—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                reply_markup=main_menu_keyboard()
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É, –µ—Å–ª–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ –±—ã–ª–∏ —Å–ø–∏—Å–∞–Ω—ã.",
            reply_markup=main_menu_keyboard()
        )


@router.callback_query(F.data == "payment_help")
async def show_payment_help(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –æ–ø–ª–∞—Ç–µ"""
    try:
        help_text = """
üí° <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –æ–ø–ª–∞—Ç–µ</b>

üåü <b>Telegram Stars - —á—Ç–æ —ç—Ç–æ?</b>
Telegram Stars - —ç—Ç–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –≤–∞–ª—é—Ç–∞ Telegram –¥–ª—è –ø–æ–∫—É–ø–æ–∫ –≤ –±–æ—Ç–∞—Ö –∏ –∫–∞–Ω–∞–ª–∞—Ö.

üí≥ <b>–ö–∞–∫ –∫—É–ø–∏—Ç—å Stars:</b>
1. –û—Ç–∫—Ä–æ–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram
2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ "Telegram Stars" 
3. –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ø–æ–∫—É–ø–∫–∏
4. –û–ø–ª–∞—Ç–∏—Ç–µ —É–¥–æ–±–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º

üí∞ <b>–ö–∞–∫ –æ–ø–ª–∞—Ç–∏—Ç—å —É—Ä–æ–∫:</b>
1. –í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–∫ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ
2. –ù–∞–∂–º–∏—Ç–µ "–ö—É–ø–∏—Ç—å —É—Ä–æ–∫"
3. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–ª–∞—Ç–µ–∂ –≤ –ø–æ—è–≤–∏–≤—à–µ–º—Å—è –æ–∫–Ω–µ
4. –ü–æ–ª—É—á–∏—Ç–µ –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ —É—Ä–æ–∫—É

üîí <b>–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:</b>
‚Ä¢ –í—Å–µ –ø–ª–∞—Ç–µ–∂–∏ –∑–∞—â–∏—â–µ–Ω—ã Telegram
‚Ä¢ –°—Ä–µ–¥—Å—Ç–≤–∞ —Å–ø–∏—Å—ã–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
‚Ä¢ –í–æ–∑–º–æ–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 48 —á–∞—Å–æ–≤

‚ùì <b>–ü—Ä–æ–±–ª–µ–º—ã —Å –æ–ø–ª–∞—Ç–æ–π?</b>
‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –±–∞–ª–∞–Ω—Å Stars –≤ Telegram
‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å –≤ —Å—Ç–∞–±–∏–ª—å–Ω–æ–º –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ
‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @support_bot
"""
        
        help_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üí∞ –ö—É–ø–∏—Ç—å Stars", url="https://t.me/BotFather")],  # –°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É Stars
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ])
        
        await callback.message.edit_text(
            help_text,
            reply_markup=help_keyboard
        )
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å–ø—Ä–∞–≤–∫–∏ –ø–æ –æ–ø–ª–∞—Ç–µ: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø—Ä–∞–≤–∫–∏")


@router.callback_query(F.data == "payment_status")
async def check_payment_status(callback: CallbackQuery, session: AsyncSession):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user_service = UserService(session)
        user = await user_service.get_user_by_telegram_id(callback.from_user.id)
        
        if not user:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–∫—É–ø–æ–∫
        lesson_service = LessonService(session)
        purchases, total_purchases = await lesson_service.get_user_purchases(
            callback.from_user.id, 
            page=0, 
            per_page=5
        )
        
        status_text = f"""
üí≥ <b>–°—Ç–∞—Ç—É—Å –≤–∞—à–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π</b>

üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user.full_name}
üí∞ <b>–í—Å–µ–≥–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ:</b> ‚≠ê {user.total_spent} –∑–≤–µ–∑–¥
üìä <b>–í—Å–µ–≥–æ –ø–æ–∫—É–ø–æ–∫:</b> {total_purchases}

üìÖ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏:</b>
"""
        
        if purchases:
            for i, purchase_data in enumerate(purchases[:3], 1):
                purchase = purchase_data['purchase']
                lesson = purchase_data['lesson']
                
                status_text += f"""
{i}. üìö <b>{lesson.title}</b>
   üí∞ {purchase.amount_stars} ‚≠ê ‚Ä¢ {purchase.purchase_date.strftime('%d.%m.%Y')}
"""
        else:
            status_text += "\n<i>–ü–æ–∫–∞ –Ω–µ—Ç –ø–æ–∫—É–ø–æ–∫</i>"
        
        status_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üë§ –í—Å–µ –ø–æ–∫—É–ø–∫–∏", callback_data="my_purchases")],
            [InlineKeyboardButton(text="üìö –ö—É–ø–∏—Ç—å —É—Ä–æ–∫", callback_data="catalog")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        
        await callback.message.edit_text(
            status_text,
            reply_markup=status_keyboard
        )
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–µ–π: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞")