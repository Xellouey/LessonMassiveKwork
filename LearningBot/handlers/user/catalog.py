"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–∞—Ç–∞–ª–æ–≥–∞ —É—Ä–æ–∫–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
"""
import logging
from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from sqlalchemy.ext.asyncio import AsyncSession

from services.lesson import LessonService
from services.user import UserService
from keyboards.user import (
    catalog_keyboard, lesson_list_keyboard, lesson_detail_keyboard, 
    search_keyboard, main_menu_keyboard, categories_list_keyboard
)
from states.user import UserStates

logger = logging.getLogger(__name__)

router = Router()


@router.callback_query(F.data == "catalog")
async def show_catalog(callback: CallbackQuery, session: AsyncSession, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ç–∞–ª–æ–≥ —É—Ä–æ–∫–æ–≤ - —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏"""
    try:
        await state.clear()
        
        lesson_service = LessonService(session)
        user_service = UserService(session)
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        await user_service.log_user_activity(callback.from_user.id, "view_catalog")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        from services.category import CategoryService
        category_service = CategoryService(session)
        categories_data = await category_service.get_categories_with_lesson_count()
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Ä–æ–∫–æ–≤
        lessons, total_count = await lesson_service.get_lessons_paginated(page=0, per_page=1)
        
        catalog_text = f"""
üìö <b>–ö–∞—Ç–∞–ª–æ–≥ —É—Ä–æ–∫–æ–≤</b>

üìä <b>–í—Å–µ–≥–æ —É—Ä–æ–∫–æ–≤:</b> {total_count}
üìã <b>–ö–∞—Ç–µ–≥–æ—Ä–∏–π:</b> {len(categories_data)}

üìã –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –≤—Å–µ —É—Ä–æ–∫–∏:
"""
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        from keyboards.user import dynamic_catalog_keyboard
        
        await callback.message.edit_text(
            catalog_text,
            reply_markup=dynamic_catalog_keyboard(categories_data)
        )
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∫–∞—Ç–∞–ª–æ–≥–∞: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–∞–ª–æ–≥–∞")


@router.callback_query(F.data.startswith("catalog:"))
async def show_lessons_by_category(callback: CallbackQuery, session: AsyncSession):
    """–ü–æ–∫–∞–∑–∞—Ç—å —É—Ä–æ–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    try:
        callback_parts = callback.data.split(":")
        
        lesson_service = LessonService(session)
        user_service = UserService(session)
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        await user_service.log_user_activity(
            callback.from_user.id, 
            "view_category", 
            extra_data=callback.data
        )
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏"
        if len(callback_parts) == 2 and callback_parts[1] == "categories":
            # –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            from services.category import CategoryService
            category_service = CategoryService(session)
            categories_data = await category_service.get_categories_with_lesson_count()
            
            categories_text = f"""
üìã <b>–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—Ä–æ–∫–æ–≤</b>

üìà <b>–í—Å–µ–≥–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:</b> {len(categories_data)}

üìã –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:
"""
            
            from keyboards.user import categories_list_keyboard
            await callback.message.edit_text(
                categories_text,
                reply_markup=categories_list_keyboard(categories_data)
            )
            await callback.answer()
            return
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if len(callback_parts) == 3 and callback_parts[1] == "category":
            # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: catalog:category:id
            category_id = int(callback_parts[2])
            
            from services.category import CategoryService
            category_service = CategoryService(session)
            category = await category_service.get_category_by_id(category_id)
            
            if not category:
                await callback.answer("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            lessons, total_count = await lesson_service.get_lessons_by_category(
                category_id, 
                page=0, 
                per_page=10
            )
            category_name = category.name
            
        else:
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            category = callback_parts[1]
            
            if category == "all":
                lessons, total_count = await lesson_service.get_lessons_paginated(page=0, per_page=10)
                category_name = "–í—Å–µ —É—Ä–æ–∫–∏"
            else:
                # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
                await callback.answer("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è")
                return
        
        if not lessons:
            no_lessons_text = f"""
üìö <b>{category_name}</b>

üòî –í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —É—Ä–æ–∫–æ–≤.

<i>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –ø–æ–∑–∂–µ.</i>
"""
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –∫–∞—Ç–∞–ª–æ–≥—É
            from keyboards.user import dynamic_catalog_keyboard
            from services.category import CategoryService
            
            category_service = CategoryService(session)
            categories_data = await category_service.get_categories_with_lesson_count()
            
            await callback.message.edit_text(
                no_lessons_text,
                reply_markup=dynamic_catalog_keyboard(categories_data)
            )
            await callback.answer()
            return
        
        # –ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ —É—Ä–æ–∫–æ–≤
        await show_lessons_list(callback, lessons, category_name, session)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")


async def show_lessons_list(callback: CallbackQuery, lessons: list, category_name: str, session: AsyncSession):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —É—Ä–æ–∫–æ–≤"""
    try:
        lessons_text = f"üìö <b>{category_name}</b>\n\n"
        
        builder = InlineKeyboardBuilder()
        
        for i, lesson in enumerate(lessons[:10], 1):
            # –ò–∫–æ–Ω–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            content_icon = {
                'video': 'üé•',
                'audio': 'üéµ', 
                'document': 'üìÑ',
                'photo': 'üì∏'
            }.get(lesson.content_type, 'üìö')
            
            # –¶–µ–Ω–∞ —É—Ä–æ–∫–∞
            if lesson.is_free:
                price_text = "üéÅ –ë–µ—Å–ø–ª–∞—Ç–Ω–æ"
            else:
                from services.currency import CurrencyService
                price_text = f"üí∞ {CurrencyService.format_usd_price(lesson.price_usd)}"
            
            # –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            duration_text = ""
            if lesson.duration:
                minutes = lesson.duration // 60
                if minutes > 0:
                    duration_text = f" ‚Ä¢ {minutes} –º–∏–Ω"
            
            lesson_line = f"{i}. {content_icon} <b>{lesson.title}</b>\n"
            lesson_line += f"   üí∞ {price_text}{duration_text} ‚Ä¢ üëÅ {lesson.views_count}\n"
            lesson_line += f"   <i>{lesson.description[:80]}...</i>\n\n"
            
            lessons_text += lesson_line
            
            # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —É—Ä–æ–∫–∞
            builder.row(InlineKeyboardButton(
                text=f"{i}. {lesson.title} - {price_text}",
                callback_data=f"lesson:{lesson.id}"
            ))
        
        # –ù–∞–≤–∏–≥–∞—Ü–∏—è –∏ —Ñ–∏–ª—å—Ç—Ä—ã - ‚ùå –ü–æ–∏—Å–∫ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω –¥–ª—è MVP
        # builder.row(
        #     InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫", callback_data="search"),
        #     InlineKeyboardButton(text="üìä –§–∏–ª—å—Ç—Ä—ã", callback_data="filters")
        # )
        
        builder.row(
            InlineKeyboardButton(text="üîô –ö –∫–∞—Ç–∞–ª–æ–≥—É", callback_data="catalog"),
            InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        )
        
        await callback.message.edit_text(
            lessons_text,
            reply_markup=builder.as_markup()
        )
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å–ø–∏—Å–∫–∞ —É—Ä–æ–∫–æ–≤: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@router.callback_query(F.data.startswith("page:"))
async def show_page(callback: CallbackQuery, session: AsyncSession):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–∞—Ç–∞–ª–æ–≥–∞"""
    try:
        page = int(callback.data.split(":")[1])
        
        lesson_service = LessonService(session)
        user_service = UserService(session)
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        await user_service.log_user_activity(
            callback.from_user.id, 
            "catalog_page", 
            extra_data=str(page)
        )
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —É—Ä–æ–∫–æ–≤ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        lessons, total_count = await lesson_service.get_lessons_paginated(page=page, per_page=10)
        
        if not lessons:
            await callback.answer("–ù–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –Ω–µ—Ç —É—Ä–æ–∫–æ–≤")
            return
        
        await show_lessons_list(callback, lessons, f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}", session)
        
    except (ValueError, IndexError):
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


# ‚ùå –ü–æ–∏—Å–∫ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω –¥–ª—è MVP
# @router.callback_query(F.data == "search")
# async def show_search(callback: CallbackQuery, session: AsyncSession, state: FSMContext):
#     """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –ø–æ–∏—Å–∫–∞"""
#     try:
#         user_service = UserService(session)
#         await user_service.log_user_activity(callback.from_user.id, "search_menu")
#         
#         search_text = """
# üîç <b>–ü–æ–∏—Å–∫ —É—Ä–æ–∫–æ–≤</b>
# 
# –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–∏—Å–∫–∞:
# """
#         
#         await callback.message.edit_text(
#             search_text,
#             reply_markup=search_keyboard()
#         )
#         await callback.answer()
#         
#     except Exception as e:
#         logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø–æ–∏—Å–∫–∞: {e}")
#         await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


# ‚ùå –ü–æ–∏—Å–∫ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω –¥–ª—è MVP
# @router.callback_query(F.data.startswith("search:"))
# async def handle_search_type(callback: CallbackQuery, session: AsyncSession, state: FSMContext):
#     """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∏–ø–∞ –ø–æ–∏—Å–∫–∞"""
#     try:
#         search_type = callback.data.split(":")[1]
#         
#         user_service = UserService(session)
#         await user_service.log_user_activity(
#             callback.from_user.id, 
#             "search_type", 
#             extra_data=search_type
#         )
#         
#         if search_type == "title":
#             await state.set_state(UserStates.waiting_for_search)
#             
#             search_prompt_text = """
# üîç <b>–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é</b>
# 
# –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞ –∏–ª–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:
# 
# <i>–ù–∞–ø—Ä–∏–º–µ—Ä: "Python", "–º–∞—Ä–∫–µ—Ç–∏–Ω–≥", "–¥–∏–∑–∞–π–Ω"</i>
# """
#             
#             cancel_keyboard = InlineKeyboardMarkup(inline_keyboard=[
#                 [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="catalog")]
#             ])
#             
#             await callback.message.edit_text(
#                 search_prompt_text,
#                 reply_markup=cancel_keyboard
#             )
#             
#         elif search_type == "category":
#             await show_categories_list(callback, session)
#             
#         elif search_type == "price":
#             await show_price_filters(callback, session)
#             
#         elif search_type == "rating":
#             await show_rating_filters(callback, session)
#         
#         await callback.answer()
#         
#     except Exception as e:
#         logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–∏–ø–∞ –ø–æ–∏—Å–∫–∞: {e}")
#         await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


# ‚ùå –ü–æ–∏—Å–∫ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω –¥–ª—è MVP
# @router.message(UserStates.waiting_for_search)
# async def process_search_query(message: Message, session: AsyncSession, state: FSMContext):
#     """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
#     try:
#         query = message.text.strip()
#         
#         if len(query) < 2:
#             await message.answer(
#                 "‚ùå –ó–∞–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
#             )
#             return
#         
#         await state.clear()
#         
#         lesson_service = LessonService(session)
#         user_service = UserService(session)
#         
#         # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞
#         await user_service.log_user_activity(
#             message.from_user.id, 
#             "search_query", 
#             extra_data=query
#         )
#         
#         # –ü–æ–∏—Å–∫ —É—Ä–æ–∫–æ–≤
#         lessons, total_count = await lesson_service.search_lessons(query, page=0, per_page=10)
#         
#         if not lessons:
#             no_results_text = f"""
# üîç <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞: "{query}"</b>
# 
# üòî –ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.
# 
# <i>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:</i>
# ‚Ä¢ –ò–∑–º–µ–Ω–∏—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
# ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–æ–ø–∏—Å–∞–Ω–∏–µ  
# ‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–ª–µ–µ –æ–±—â–∏–µ —Ç–µ—Ä–º–∏–Ω—ã
# """
#             
#             no_results_keyboard = InlineKeyboardMarkup(inline_keyboard=[
#                 [InlineKeyboardButton(text="üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="search")],
#                 [InlineKeyboardButton(text="üìö –ö –∫–∞—Ç–∞–ª–æ–≥—É", callback_data="catalog")],
#                 [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
#             ])
#             
#             await message.answer(
#                 no_results_text,
#                 reply_markup=no_results_keyboard
#             )
#             return
#         
#         # –ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
#         results_text = f"""
# üîç <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞: "{query}"</b>
# 
# üìä –ù–∞–π–¥–µ–Ω–æ —É—Ä–æ–∫–æ–≤: {total_count}
# """
#         
#         await message.answer(results_text)
#         
#         # –°–æ–∑–¥–∞–Ω–∏–µ callback query –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å–ø–∏—Å–∫–∞
#         fake_callback = type('CallbackQuery', (), {
#             'message': message,
#             'answer': lambda text="": None,
#             'from_user': message.from_user
#         })()
#         
#         await show_lessons_list(fake_callback, lessons, f"–ü–æ–∏—Å–∫: {query}", session)
#         
#     except Exception as e:
#         logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {e}")
#         await message.answer(
#             "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
#             reply_markup=search_keyboard()
#         )


# ‚ùå –§—É–Ω–∫—Ü–∏–∏ –ø–æ–∏—Å–∫–∞ –∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è MVP
