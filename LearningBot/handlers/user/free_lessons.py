"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —É—Ä–æ–∫–æ–≤ (–ª–∏–¥-–º–∞–≥–Ω–∏—Ç—ã)
"""
import logging
from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession

from services.lesson import LessonService
from services.user import UserService
from keyboards.user import lesson_detail_keyboard, main_menu_keyboard
from states.user import UserStates

logger = logging.getLogger(__name__)

router = Router()


@router.callback_query(F.data == "free_lesson")
async def show_free_lessons(callback: CallbackQuery, session: AsyncSession):
    """–ü–æ–∫–∞–∑–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —É—Ä–æ–∫–∏"""
    try:
        lesson_service = LessonService(session)
        user_service = UserService(session)
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        await user_service.log_user_activity(callback.from_user.id, "view_free_lessons")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —É—Ä–æ–∫–æ–≤
        free_lessons = await lesson_service.get_free_lessons()
        
        if not free_lessons:
            # –ï—Å–ª–∏ –Ω–µ—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —É—Ä–æ–∫–æ–≤, —Å–æ–∑–¥–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
            await show_default_free_lesson(callback, session)
            return
        
        if len(free_lessons) == 1:
            # –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —É—Ä–æ–∫, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ —Å—Ä–∞–∑—É
            lesson = free_lessons[0]
            await show_lesson_detail(callback, lesson, session, is_free=True)
        else:
            # –ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —É—Ä–æ–∫–æ–≤, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫
            await show_free_lessons_list(callback, free_lessons, session)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —É—Ä–æ–∫–æ–≤: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —É—Ä–æ–∫–æ–≤")


async def show_default_free_lesson(callback: CallbackQuery, session: AsyncSession):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —É—Ä–æ–∫-–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ"""
    free_lesson_text = """
üéÅ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–∞—à –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π AI-—É—Ä–æ–∫</b>

üìö <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> –í–≤–µ–¥–µ–Ω–∏–µ –≤ –º–∏—Ä –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞
‚è±Ô∏è <b>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b> 5 –º–∏–Ω—É—Ç
üéØ <b>–£—Ä–æ–≤–µ–Ω—å:</b> –î–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö

üìù <b>–í —ç—Ç–æ–º —É—Ä–æ–∫–µ –≤—ã —É–∑–Ω–∞–µ—Ç–µ:</b>
‚úÖ –ß—Ç–æ —Ç–∞–∫–æ–µ –ò–ò –∏ –∫–∞–∫ –æ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç
‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–∏–ø—ã –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è
‚úÖ –ö–∞–∫ –≤—ã–±—Ä–∞—Ç—å –ø–µ—Ä–≤—ã–π AI-–ø—Ä–æ–µ–∫—Ç –¥–ª—è —Å—Ç–∞—Ä—Ç–∞
‚úÖ –ü–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã –∫–∞—Ä—å–µ—Ä—ã –≤ —Å—Ñ–µ—Ä–µ –ò–ò

<i>–≠—Ç–æ—Ç —É—Ä–æ–∫ –∞–±—Å–æ–ª—é—Ç–Ω–æ –±–µ—Å–ø–ª–∞—Ç–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!</i>
"""
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ —É—Ä–æ–∫–∞
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å —É—Ä–æ–∫", callback_data="start_free_lesson:0")],
        [InlineKeyboardButton(text="üìö –ö –∫–∞—Ç–∞–ª–æ–≥—É", callback_data="catalog")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    
    await callback.message.edit_text(
        free_lesson_text,
        reply_markup=keyboard
    )
    await callback.answer()


async def show_free_lessons_list(callback: CallbackQuery, lessons: list, session: AsyncSession):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —É—Ä–æ–∫–æ–≤"""
    lessons_text = "üéÅ <b>–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —É—Ä–æ–∫–∏</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–∫ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:\n\n"
    
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    builder = InlineKeyboardBuilder()
    
    for lesson in lessons:
        duration_text = f" ({lesson.duration // 60} –º–∏–Ω)" if lesson.duration else ""
        lessons_text += f"üìö <b>{lesson.title}</b>{duration_text}\n"
        lessons_text += f"‚îî {lesson.description[:100]}...\n\n"
        
        builder.row(InlineKeyboardButton(
            text=f"‚ñ∂Ô∏è {lesson.title}",
            callback_data=f"free_lesson:{lesson.id}"
        ))
    
    builder.row(InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))
    
    await callback.message.edit_text(
        lessons_text,
        reply_markup=builder.as_markup()
    )
    await callback.answer()


async def show_lesson_detail(callback: CallbackQuery, lesson, session: AsyncSession, is_free: bool = False):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ —É—Ä–æ–∫–∞"""
    duration_text = ""
    if lesson.duration:
        minutes = lesson.duration // 60
        seconds = lesson.duration % 60
        if minutes > 0:
            duration_text = f"‚è±Ô∏è <b>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b> {minutes} –º–∏–Ω"
            if seconds > 0:
                duration_text += f" {seconds} —Å–µ–∫"
        else:
            duration_text = f"‚è±Ô∏è <b>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b> {seconds} —Å–µ–∫"
    
    lesson_text = f"""
üéÅ <b>{lesson.title}</b>

{lesson.description}

{duration_text}
üè∑Ô∏è <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {lesson.category or '–û–±—â–∞—è'}
üëÅÔ∏è <b>–ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤:</b> {lesson.views_count}

<i>{'üéÅ –≠—Ç–æ—Ç —É—Ä–æ–∫ –∞–±—Å–æ–ª—é—Ç–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π!' if is_free else f'üí∞ –¶–µ–Ω–∞: {lesson.price_stars} ‚≠ê'}</i>
"""
    
    await callback.message.edit_text(
        lesson_text,
        reply_markup=lesson_detail_keyboard(
            lesson_id=lesson.id, 
            is_free=is_free
        )
    )
    await callback.answer()


@router.callback_query(F.data.startswith("free_lesson:"))
async def show_specific_free_lesson(callback: CallbackQuery, session: AsyncSession):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —É—Ä–æ–∫"""
    try:
        lesson_id = int(callback.data.split(":")[1])
        
        lesson_service = LessonService(session)
        user_service = UserService(session)
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —É—Ä–æ–∫–∞
        lesson = await lesson_service.get_lesson_by_id(lesson_id)
        
        if not lesson:
            await callback.answer("–£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        if not lesson.is_free:
            await callback.answer("–≠—Ç–æ—Ç —É—Ä–æ–∫ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º")
            return
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        await user_service.log_user_activity(
            callback.from_user.id, 
            "view_free_lesson", 
            lesson_id=lesson_id
        )
        
        await show_lesson_detail(callback, lesson, session, is_free=True)
        
    except (ValueError, IndexError):
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —É—Ä–æ–∫–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ —É—Ä–æ–∫–∞: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@router.callback_query(F.data.startswith("get_free:"))
async def get_free_lesson(callback: CallbackQuery, session: AsyncSession):
    """–ü–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —É—Ä–æ–∫"""
    try:
        lesson_id = int(callback.data.split(":")[1])
        
        lesson_service = LessonService(session)
        user_service = UserService(session)
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —É—Ä–æ–∫–∞
        lesson = await lesson_service.get_lesson_by_id(lesson_id)
        
        if not lesson:
            await callback.answer("–£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        if not lesson.is_free:
            await callback.answer("–≠—Ç–æ—Ç —É—Ä–æ–∫ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º")
            return
        
        # –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
        await lesson_service.increment_lesson_views(lesson_id)
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        await user_service.log_user_activity(
            callback.from_user.id, 
            "get_free_lesson", 
            lesson_id=lesson_id
        )
        
        # –ü–æ–∫–∞–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —É—Ä–æ–∫–∞
        await show_lesson_content(callback, lesson, session)
        
    except (ValueError, IndexError):
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —É—Ä–æ–∫–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ —É—Ä–æ–∫–∞: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@router.callback_query(F.data.startswith("start_free_lesson:"))
async def start_default_free_lesson(callback: CallbackQuery, session: AsyncSession):
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —É—Ä–æ–∫"""
    try:
        user_service = UserService(session)
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        await user_service.log_user_activity(
            callback.from_user.id, 
            "start_default_free_lesson"
        )
        
        # –ö–æ–Ω—Ç–µ–Ω—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ —É—Ä–æ–∫–∞
        lesson_content = """
‚ñ∂Ô∏è <b>–£—Ä–æ–∫: –ö–∞–∫ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ —É—á–∏—Ç—å—Å—è —Å –Ω–∞—à–∏–º –±–æ—Ç–æ–º</b>

üéØ <b>–®–∞–≥ 1: –ù–∞–≤–∏–≥–∞—Ü–∏—è</b>
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
‚Ä¢ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–æ —á–µ—Ä–µ–∑ üè†
‚Ä¢ –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –ø–æ–º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —ç–∫—Ä–∞–Ω

üí∞ <b>–®–∞–≥ 2: –ü–æ–∫—É–ø–∫–∞ —É—Ä–æ–∫–æ–≤</b>
‚Ä¢ –í—Å–µ –ø–ª–∞—Ç–µ–∂–∏ –ø—Ä–æ—Ö–æ–¥—è—Ç —á–µ—Ä–µ–∑ –±–µ–∑–æ–ø–∞—Å–Ω—É—é —Å–∏—Å—Ç–µ–º—É Telegram Stars ‚≠ê
‚Ä¢ –û–ø–ª–∞—Ç–∞ –º–≥–Ω–æ–≤–µ–Ω–Ω–∞—è, –¥–æ—Å—Ç—É–ø –∫ —É—Ä–æ–∫—É –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è —Å—Ä–∞–∑—É
‚Ä¢ –°—Ä–µ–¥—Å—Ç–≤–∞ —Å–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏

üë§ <b>–®–∞–≥ 3: –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞</b>
‚Ä¢ –í —Ä–∞–∑–¥–µ–ª–µ "–ú–æ–∏ –ø–æ–∫—É–ø–∫–∏" –≤–∏–¥–Ω—ã –≤—Å–µ –≤–∞—à–∏ —É—Ä–æ–∫–∏
‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–∞—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø—Ä–æ—Ñ–∏–ª—è
‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏

üöÄ <b>–°–µ–∫—Ä–µ—Ç —É—Å–ø–µ—Ö–∞:</b>
–†–µ–≥—É–ª—è—Ä–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–º —É—Ä–æ–∫–∞–º –¥–ª—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è –∑–Ω–∞–Ω–∏–π!

‚úÖ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø—Ä–æ—à–ª–∏ –≤–∞—à –ø–µ—Ä–≤—ã–π —É—Ä–æ–∫!</b>
"""
        
        completion_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìö –û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ç–∞–ª–æ–≥", callback_data="catalog")],
            [InlineKeyboardButton(text="üèÜ –ú–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è", callback_data="achievements")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        
        await callback.message.edit_text(
            lesson_content,
            reply_markup=completion_keyboard
        )
        
        # –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ
        await callback.answer("üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º –ø–µ—Ä–≤–æ–≥–æ —É—Ä–æ–∫–∞!", show_alert=True)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ —É—Ä–æ–∫–∞: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


async def show_lesson_content(callback: CallbackQuery, lesson, session: AsyncSession):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç —É—Ä–æ–∫–∞"""
    try:
        content_text = f"""
‚ñ∂Ô∏è <b>{lesson.title}</b>

{lesson.description}

üìñ <b>–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —É—Ä–æ–∫–∞:</b>
"""
        
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–¥–∏–∞-—Ñ–∞–π–ª–∞
        if lesson.content_type == "video":
            if lesson.file_id:
                # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ
                await callback.message.answer_video(
                    video=lesson.file_id,
                    caption=content_text
                )
            else:
                content_text += "\nüé• –í–∏–¥–µ–æ—É—Ä–æ–∫ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è"
                
        elif lesson.content_type == "photo":
            if lesson.file_id:
                # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ
                await callback.message.answer_photo(
                    photo=lesson.file_id,
                    caption=content_text
                )
            else:
                content_text += "\nüì∏ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è"
                
        elif lesson.content_type == "document":
            if lesson.file_id:
                # –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
                await callback.message.answer_document(
                    document=lesson.file_id,
                    caption=content_text
                )
            else:
                content_text += "\nüìÑ –î–æ–∫—É–º–µ–Ω—Ç –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è"
        else:
            content_text += f"\nüìù –¢–µ–∫—Å—Ç–æ–≤—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª —É—Ä–æ–∫–∞\n\n{lesson.description}"
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞, –µ—Å–ª–∏ –Ω–µ –±—ã–ª–æ –º–µ–¥–∏–∞
        if not lesson.file_id:
            completion_keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –£—Ä–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω", callback_data="lesson_completed")],
                [InlineKeyboardButton(text="üìö –ö –∫–∞—Ç–∞–ª–æ–≥—É", callback_data="catalog")],
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
            
            await callback.message.edit_text(
                content_text,
                reply_markup=completion_keyboard
            )
        
        await callback.answer("üéâ –£—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω!")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —É—Ä–æ–∫–∞: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —É—Ä–æ–∫–∞")


@router.callback_query(F.data == "lesson_completed")
async def lesson_completed(callback: CallbackQuery, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —É—Ä–æ–∫–∞"""
    try:
        user_service = UserService(session)
        
        await user_service.log_user_activity(
            callback.from_user.id, 
            "lesson_completed"
        )
        
        completion_text = """
üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º —É—Ä–æ–∫–∞!</b>

‚úÖ –£—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω
üèÜ –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –æ–±—É—á–µ–Ω–∏–µ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

<i>–ß—Ç–æ –¥–∞–ª—å—à–µ?</i>
"""
        
        next_steps_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìö –ë–æ–ª—å—à–µ —É—Ä–æ–∫–æ–≤", callback_data="catalog")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        
        await callback.message.edit_text(
            completion_text,
            reply_markup=next_steps_keyboard
        )
        
        await callback.answer("‚úÖ –£—Ä–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω!")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —É—Ä–æ–∫–∞: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")