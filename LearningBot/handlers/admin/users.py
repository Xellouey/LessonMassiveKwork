"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏
"""
import logging
from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession

from services.user_management import UserManagementService
from keyboards.admin import (
    users_management_keyboard, user_details_keyboard, 
    confirm_action_keyboard, back_to_admin_keyboard
)
from middlewares.admin import AdminOnlyMiddleware
from states.admin import UserManagementStates

logger = logging.getLogger(__name__)
router = Router()
router.callback_query.middleware(AdminOnlyMiddleware())


@router.callback_query(F.data == "admin_users")
async def show_users_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    try:
        text = """
üë• <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏</b>

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:

üë• <b>–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</b> - –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
üîç <b>–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b> - –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∏–º–µ–Ω–∏ –∏–ª–∏ ID
üö´ <b>–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ</b> - —Å–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚≠ê <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª–∏</b> - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –ø–æ–∫—É–ø–∫–∞–º–∏
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b> - –æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
üëë <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã</b> - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏
"""

        if callback.message:
            await callback.message.edit_text(
                text,
                reply_markup=users_management_keyboard(),
                parse_mode="HTML"
            )
        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é")


@router.callback_query(F.data == "admin_users_list")
async def show_users_list(callback: CallbackQuery, session: AsyncSession):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        user_service = UserManagementService(session)
        users = await user_service.get_all_users(limit=10)
        
        if not users:
            text = "üì≠ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</b>"
        else:
            text = "üë• <b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>\n\n"
            
            for i, user in enumerate(users, 1):
                status_icon = "‚úÖ" if user.is_active else "üö´"
                activity_days = (user.last_activity - user.registration_date).days if user.last_activity else 0
                
                text += f"{i}. {status_icon} <b>{user.full_name}</b>\n"
                text += f"   üÜî ID: <code>{user.user_id}</code>\n"
                text += f"   üë§ @{user.username or '–ù–µ—Ç username'}\n"
                text += f"   üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user.registration_date.strftime('%d.%m.%Y')}\n"
                text += f"   üí∞ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: ‚≠ê {user.total_spent}\n\n"

        if callback.message:
            await callback.message.edit_text(
                text,
                reply_markup=back_to_admin_keyboard(),
                parse_mode="HTML"
            )
        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")


@router.callback_query(F.data == "admin_user_search")
async def start_user_search(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        await state.set_state(UserManagementStates.searching_user)
        
        text = """
üîç <b>–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>

–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–¥–∏–Ω –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞:
‚Ä¢ <b>Telegram ID</b> (—á–∏—Å–ª–æ–≤–æ–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
‚Ä¢ <b>Username</b> (–±–µ–∑ @)
‚Ä¢ <b>–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b> (–ø–æ–ª–Ω–æ–µ –∏–º—è)

–ü—Ä–∏–º–µ—Ä: <code>12345678</code> –∏–ª–∏ <code>ivan_petrov</code> –∏–ª–∏ <code>–ò–≤–∞–Ω</code>
"""

        if callback.message:
            await callback.message.edit_text(
                text,
                reply_markup=back_to_admin_keyboard(),
                parse_mode="HTML"
            )
        await callback.answer("üîç –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–∏—Å–∫–∞")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–æ–∏—Å–∫–∞")


@router.message(UserManagementStates.searching_user)
async def process_user_search(message: Message, session: AsyncSession, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
    try:
        if not message.text:
            await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞")
            return

        user_service = UserManagementService(session)
        users = await user_service.search_users(message.text.strip())
        
        if not users:
            await message.answer(
                f"üì≠ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É '<b>{message.text}</b>' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
                parse_mode="HTML"
            )
        elif len(users) == 1:
            # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω –æ–¥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            user = users[0]
            await show_user_details(message, session, user.user_id)
        else:
            # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫
            text = f"üîç <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{message.text}'</b>\n\n"
            
            for i, user in enumerate(users[:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 10
                status_icon = "‚úÖ" if user.is_active else "üö´"
                text += f"{i}. {status_icon} <b>{user.full_name}</b>\n"
                text += f"   üÜî ID: <code>{user.user_id}</code>\n"
                text += f"   üë§ @{user.username or '–ù–µ—Ç username'}\n\n"
            
            if len(users) > 10:
                text += f"... –∏ –µ—â–µ {len(users) - 10} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
            
            await message.answer(text, parse_mode="HTML")
        
        await state.clear()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ")
        await state.clear()


async def show_user_details(message: Message, session: AsyncSession, user_id: int):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    try:
        user_service = UserManagementService(session)
        stats = await user_service.get_user_statistics(user_id)
        
        if not stats:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        status_text = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if stats['is_active'] else "üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"
        last_activity = stats['last_activity'].strftime('%d.%m.%Y %H:%M') if stats['last_activity'] else "–ù–∏–∫–æ–≥–¥–∞"
        last_purchase = stats['last_purchase'].strftime('%d.%m.%Y %H:%M') if stats['last_purchase'] else "–ù–µ—Ç –ø–æ–∫—É–ø–æ–∫"
        
        text = f"""
üë§ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ</b>

<b>–û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:</b>
‚Ä¢ –ò–º—è: <b>{stats['full_name']}</b>
‚Ä¢ Username: @{stats['username'] or '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}
‚Ä¢ Telegram ID: <code>{stats['user_id']}</code>
‚Ä¢ –Ø–∑—ã–∫: {stats['language']}
‚Ä¢ –°—Ç–∞—Ç—É—Å: {status_text}

<b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b>
‚Ä¢ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {stats['registration_date'].strftime('%d.%m.%Y %H:%M')}
‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {last_activity}
‚Ä¢ –í—Å–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏–π: {stats['total_activities']}

<b>–ü–æ–∫—É–ø–∫–∏:</b>
‚Ä¢ –í—Å–µ–≥–æ –ø–æ–∫—É–ø–æ–∫: {stats['total_purchases']}
‚Ä¢ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: ‚≠ê {stats['total_spent']}
‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–∫—É–ø–∫–∞: {last_purchase}
"""

        await message.answer(
            text,
            reply_markup=user_details_keyboard(user_id),
            parse_mode="HTML"
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ {user_id}: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ")


@router.callback_query(F.data.startswith("admin_block_user:"))
async def block_user(callback: CallbackQuery, session: AsyncSession):
    """–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user_id = int(callback.data.split(":")[1])
        
        user_service = UserManagementService(session)
        success = await user_service.block_user(user_id)
        
        if success:
            await callback.answer("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            await show_user_details(callback.message, session, user_id)
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

    except (ValueError, IndexError):
        await callback.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ")


@router.callback_query(F.data.startswith("admin_unblock_user:"))
async def unblock_user(callback: CallbackQuery, session: AsyncSession):
    """–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user_id = int(callback.data.split(":")[1])
        
        user_service = UserManagementService(session)
        success = await user_service.unblock_user(user_id)
        
        if success:
            await callback.answer("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            await show_user_details(callback.message, session, user_id)
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

    except (ValueError, IndexError):
        await callback.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ")


@router.callback_query(F.data.startswith("admin_user_purchases:"))
async def show_user_purchases(callback: CallbackQuery, session: AsyncSession):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–∫—É–ø–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user_id = int(callback.data.split(":")[1])
        
        user_service = UserManagementService(session)
        purchases = await user_service.get_user_purchases(user_id, limit=10)
        
        if not purchases:
            text = "üì≠ <b>–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –ø–æ–∫—É–ø–æ–∫</b>"
        else:
            text = f"üõí <b>–ü–æ–∫—É–ø–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n"
            
            total_amount = 0
            for i, purchase in enumerate(purchases, 1):
                lesson_title = purchase.lesson.title if purchase.lesson else "–£—Ä–æ–∫ —É–¥–∞–ª–µ–Ω"
                status_icon = "‚úÖ" if purchase.status == "completed" else "‚ùå"
                
                text += f"{i}. {status_icon} <b>{lesson_title}</b>\n"
                text += f"   üí∞ –°—É–º–º–∞: ‚≠ê {purchase.amount_stars}\n"
                text += f"   üìÖ –î–∞—Ç–∞: {purchase.purchase_date.strftime('%d.%m.%Y %H:%M')}\n"
                text += f"   üìÑ –°—Ç–∞—Ç—É—Å: {purchase.status}\n\n"
                
                if purchase.status == "completed":
                    total_amount += purchase.amount_stars
            
            text += f"<b>–û–±—â–∞—è —Å—É–º–º–∞ –ø–æ–∫—É–ø–æ–∫: ‚≠ê {total_amount}</b>"

        if callback.message:
            await callback.message.edit_text(
                text,
                reply_markup=back_to_admin_keyboard(),
                parse_mode="HTML"
            )
        await callback.answer()

    except (ValueError, IndexError):
        await callback.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–∫—É–ø–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–∫—É–ø–æ–∫")


@router.callback_query(F.data == "admin_blocked_users")
async def show_blocked_users(callback: CallbackQuery, session: AsyncSession):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        user_service = UserManagementService(session)
        blocked_users = await user_service.get_blocked_users(limit=10)
        
        if not blocked_users:
            text = "‚úÖ <b>–ù–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>"
        else:
            text = "üö´ <b>–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</b>\n\n"
            
            for i, user in enumerate(blocked_users, 1):
                text += f"{i}. <b>{user.full_name}</b>\n"
                text += f"   üÜî ID: <code>{user.user_id}</code>\n"
                text += f"   üë§ @{user.username or '–ù–µ—Ç username'}\n"
                text += f"   üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user.registration_date.strftime('%d.%m.%Y')}\n\n"

        if callback.message:
            await callback.message.edit_text(
                text,
                reply_markup=back_to_admin_keyboard(),
                parse_mode="HTML"
            )
        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞")


@router.callback_query(F.data == "admin_active_buyers")
async def show_active_buyers(callback: CallbackQuery, session: AsyncSession):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π"""
    try:
        user_service = UserManagementService(session)
        top_buyers = await user_service.get_top_buyers(limit=10)
        
        if not top_buyers:
            text = "üì≠ <b>–ù–µ—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π</b>"
        else:
            text = "‚≠ê <b>–¢–æ–ø –ø–æ–∫—É–ø–∞—Ç–µ–ª–∏</b>\n\n"
            
            for i, buyer in enumerate(top_buyers, 1):
                text += f"{i}. <b>{buyer['full_name']}</b>\n"
                text += f"   üÜî ID: <code>{buyer['user_id']}</code>\n"
                text += f"   üë§ @{buyer['username'] or '–ù–µ—Ç username'}\n"
                text += f"   üõí –ü–æ–∫—É–ø–æ–∫: {buyer['purchases_count']}\n"
                text += f"   üí∞ –ü–æ—Ç—Ä–∞—Ç–∏–ª: ‚≠ê {buyer['total_spent']}\n\n"

        if callback.message:
            await callback.message.edit_text(
                text,
                reply_markup=back_to_admin_keyboard(),
                parse_mode="HTML"
            )
        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–ø –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π")


@router.callback_query(F.data == "admin_user_stats")
async def show_user_stats(callback: CallbackQuery, session: AsyncSession):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        user_service = UserManagementService(session)
        counts = await user_service.get_users_count()
        
        text = f"""
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>

üë• <b>–û–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:</b>
‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {counts['total']}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {counts['active']}
‚Ä¢ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {counts['blocked']}
‚Ä¢ –ù–æ–≤—ã—Ö (–∑–∞ –Ω–µ–¥–µ–ª—é): {counts['recent']}

üìà <b>–ü—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ:</b>
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {round(counts['active'] / counts['total'] * 100, 1) if counts['total'] > 0 else 0}%
‚Ä¢ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {round(counts['blocked'] / counts['total'] * 100, 1) if counts['total'] > 0 else 0}%
‚Ä¢ –ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {round(counts['recent'] / counts['total'] * 100, 1) if counts['total'] > 0 else 0}%
"""

        if callback.message:
            await callback.message.edit_text(
                text,
                reply_markup=back_to_admin_keyboard(),
                parse_mode="HTML"
            )
        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")