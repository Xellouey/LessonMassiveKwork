"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–µ–¥–∏–∞-–∫–æ–Ω—Ç–µ–Ω—Ç–æ–º –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏
"""
import logging
from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession

from services.media import MediaService
from services.lesson import LessonService
from keyboards.admin import (
    media_management_keyboard, media_types_keyboard, media_actions_keyboard,
    back_to_admin_keyboard, media_categories_keyboard
)
from states.admin import MediaManagementStates
from middlewares.admin import AdminOnlyMiddleware

logger = logging.getLogger(__name__)
router = Router()
router.callback_query.middleware(AdminOnlyMiddleware())
router.message.middleware(AdminOnlyMiddleware())


@router.callback_query(F.data == "admin_media")
async def show_media_management_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–µ–¥–∏–∞"""
    try:
        text = """
üé¨ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ–¥–∏–∞-–∫–æ–Ω—Ç–µ–Ω—Ç–æ–º</b>

–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –≤—Å–µ–º–∏ –º–µ–¥–∏–∞ —Ñ–∞–π–ª–∞–º–∏ —É—Ä–æ–∫–æ–≤: –≤–∏–¥–µ–æ, —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏ –∞—É–¥–∏–æ.

üìÅ <b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–∏–ø—ã:</b>
‚Ä¢ –í–∏–¥–µ–æ - –¥–æ 50MB
‚Ä¢ –§–æ—Ç–æ - –¥–æ 20MB  
‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç—ã - –¥–æ 20MB
‚Ä¢ –ê—É–¥–∏–æ - –¥–æ 50MB

‚ö° <b>–§—É–Ω–∫—Ü–∏–∏:</b>
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –º–µ–¥–∏–∞ –ø–æ —Ç–∏–ø–∞–º –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
‚Ä¢ –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –∑–∞–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤
‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
‚Ä¢ –ü–æ–∏—Å–∫ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
"""

        await callback.message.edit_text(
            text,
            reply_markup=media_management_keyboard(),
            parse_mode="HTML"
        )
        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–µ–¥–∏–∞: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é")


@router.callback_query(F.data.startswith("media_type:"))
async def show_media_by_type(callback: CallbackQuery, session: AsyncSession):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–¥–∏–∞ –ø–æ —Ç–∏–ø—É"""
    try:
        media_type = callback.data.split(":")[1]
        
        media_service = MediaService(session)
        media_list = await media_service.get_media_by_type(media_type)
        
        # –ù–∞–∑–≤–∞–Ω–∏—è —Ç–∏–ø–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        type_names = {
            "video": "–í–∏–¥–µ–æ",
            "photo": "–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏", 
            "document": "–î–æ–∫—É–º–µ–Ω—Ç—ã",
            "audio": "–ê—É–¥–∏–æ"
        }
        
        type_name = type_names.get(media_type, media_type.capitalize())
        
        if not media_list:
            text = f"""
üìÅ <b>{type_name}</b>

üì≠ –í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤.
–ó–∞–≥—Ä—É–∑–∏—Ç–µ –ø–µ—Ä–≤—ã–π —Ñ–∞–π–ª, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –µ–≥–æ –∑–¥–µ—Å—å.

üí° <b>–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:</b>
–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è {type_name.lower()}: {media_service.get_media_size_limits()[media_type] // (1024*1024)}MB
"""
            await callback.message.edit_text(
                text,
                reply_markup=back_to_admin_keyboard(),
                parse_mode="HTML"
            )
        else:
            text = f"""
üìÅ <b>{type_name}</b>

–í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {len(media_list)}

<b>–°–ø–∏—Å–æ–∫ –º–µ–¥–∏–∞:</b>
"""
            
            for i, media in enumerate(media_list[:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                duration_text = f" ({media.duration}—Å)" if media.duration else ""
                text += f"{i}. {media.title}{duration_text}\n"
            
            if len(media_list) > 10:
                text += f"\n... –∏ –µ—â–µ {len(media_list) - 10} —Ñ–∞–π–ª–æ–≤"
            
            await callback.message.edit_text(
                text,
                reply_markup=media_types_keyboard(media_type),
                parse_mode="HTML"
            )
        
        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–µ–¥–∏–∞ —Ç–∏–ø–∞ {media_type}: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–¥–∏–∞")


@router.callback_query(F.data == "media_upload")
async def start_media_upload(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É –º–µ–¥–∏–∞"""
    try:
        text = """
üì§ <b>–ó–∞–≥—Ä—É–∑–∫–∞ –º–µ–¥–∏–∞</b>

–î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–¥–∏–∞ —Ñ–∞–π–ª–∞:

1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ñ–∞–π–ª–∞
2Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —á–∞—Ç
3Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ –∫ –∫–∞–∫–æ–º—É —É—Ä–æ–∫—É –æ–Ω –æ—Ç–Ω–æ—Å–∏—Ç—Å—è

<b>‚ö†Ô∏è –í–∞–∂–Ω–æ:</b>
‚Ä¢ –í–∏–¥–µ–æ –∏ –∞—É–¥–∏–æ: –¥–æ 50MB
‚Ä¢ –§–æ—Ç–æ –∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã: –¥–æ 20MB
‚Ä¢ –§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–º
‚Ä¢ –ò–∑–±–µ–≥–∞–π—Ç–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –º–µ–¥–∏–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏:
"""

        await callback.message.edit_text(
            text,
            reply_markup=media_types_keyboard(),
            parse_mode="HTML"
        )
        
        await state.set_state(MediaManagementStates.selecting_media_type)
        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–¥–∏–∞: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏")


@router.callback_query(F.data.startswith("upload_type:"))
async def select_upload_type(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±—Ä–∞—Ç—å —Ç–∏–ø –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏"""
    try:
        media_type = callback.data.split(":")[1]
        
        await state.update_data(media_type=media_type)
        
        type_names = {
            "video": "–≤–∏–¥–µ–æ —Ñ–∞–π–ª",
            "photo": "—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é",
            "document": "–¥–æ–∫—É–º–µ–Ω—Ç", 
            "audio": "–∞—É–¥–∏–æ —Ñ–∞–π–ª"
        }
        
        file_type = type_names.get(media_type, "—Ñ–∞–π–ª")
        
        text = f"""
üì§ <b>–ó–∞–≥—Ä—É–∑–∫–∞: {file_type}</b>

–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ {file_type} –≤ —ç—Ç–æ—Ç —á–∞—Ç.

üí° <b>–ü–æ–¥—Å–∫–∞–∑–∫–∏:</b>
‚Ä¢ –§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ö–æ—Ä–æ—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
‚Ä¢ –†–∞–∑–º–µ—Ä –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å –ª–∏–º–∏—Ç—ã
‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª –Ω–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω

<i>–û–∂–∏–¥–∞—é –≤–∞—à —Ñ–∞–π–ª...</i>
"""

        await callback.message.edit_text(
            text,
            parse_mode="HTML"
        )
        
        await state.set_state(MediaManagementStates.uploading_file)
        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ç–∏–ø–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ç–∏–ø–∞")


@router.message(MediaManagementStates.uploading_file)
async def handle_media_upload(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É –º–µ–¥–∏–∞ —Ñ–∞–π–ª–∞"""
    try:
        data = await state.get_data()
        expected_type = data.get('media_type')
        
        media_service = MediaService(session)
        lesson_service = LessonService(session)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –∏ –ø–æ–ª—É—á–∞–µ–º file_id
        file_id = None
        file_size = 0
        actual_type = None
        
        if message.video:
            file_id = message.video.file_id
            file_size = message.video.file_size or 0
            actual_type = "video"
        elif message.photo:
            # –ë–µ—Ä–µ–º —Ñ–æ—Ç–æ –Ω–∞–∏–±–æ–ª—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
            photo = message.photo[-1]
            file_id = photo.file_id
            file_size = photo.file_size or 0
            actual_type = "photo"
        elif message.document:
            file_id = message.document.file_id
            file_size = message.document.file_size or 0
            actual_type = "document"
        elif message.audio:
            file_id = message.audio.file_id
            file_size = message.audio.file_size or 0
            actual_type = "audio"
        else:
            await message.answer("‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ, —Ñ–æ—Ç–æ, –¥–æ–∫—É–º–µ–Ω—Ç –∏–ª–∏ –∞—É–¥–∏–æ.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –æ–∂–∏–¥–∞–µ–º–æ–º—É —Ç–∏–ø—É
        if actual_type != expected_type:
            await message.answer(f"‚ùå –û–∂–∏–¥–∞–ª—Å—è {expected_type}, –∞ –ø–æ–ª—É—á–µ–Ω {actual_type}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ñ–∞–π–ª
        if not media_service.validate_media_file(actual_type, file_size):
            max_size = media_service.get_media_size_limits()[actual_type] // (1024*1024)
            await message.answer(f"‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è {actual_type}: {max_size}MB")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥—É–±–ª–∏—Ä—É–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª
        if await media_service.check_media_file_exists(file_id):
            await message.answer("‚ö†Ô∏è –≠—Ç–æ—Ç —Ñ–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Å–∏—Å—Ç–µ–º–µ. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª.")
            return
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —É—Ä–æ–∫ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ —Å–≤—è–∑–∞—Ç—å —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º)
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤—ã–±–æ—Ä —É—Ä–æ–∫–∞
        
        await message.answer(f"""
‚úÖ <b>–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!</b>

üìÅ <b>–¢–∏–ø:</b> {actual_type}
üìè <b>–†–∞–∑–º–µ—Ä:</b> {file_size // 1024}KB
üÜî <b>ID:</b> <code>{file_id}</code>

üí° –¢–µ–ø–µ—Ä—å —ç—Ç–æ—Ç —Ñ–∞–π–ª –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ —É—Ä–æ–∫–∞—Ö.
""", parse_mode="HTML")
        
        await state.clear()
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã
        try:
            await message.delete()
        except:
            pass

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–¥–∏–∞: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞")
        await state.clear()


@router.callback_query(F.data == "media_statistics")
async def show_media_statistics(callback: CallbackQuery, session: AsyncSession):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–µ–¥–∏–∞"""
    try:
        media_service = MediaService(session)
        stats = await media_service.get_media_statistics()
        
        if not stats:
            text = """
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–µ–¥–∏–∞</b>

‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
"""
        else:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
            total_hours = stats.get('total_duration', 0) // 3600
            total_minutes = (stats.get('total_duration', 0) % 3600) // 60
            
            text = f"""
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–µ–¥–∏–∞-–∫–æ–Ω—Ç–µ–Ω—Ç–∞</b>

üìà <b>–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>
‚Ä¢ –í—Å–µ–≥–æ –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤: {stats.get('total_media', 0)}
‚Ä¢ –í–∏–¥–µ–æ: {stats.get('video_count', 0)}
‚Ä¢ –§–æ—Ç–æ: {stats.get('photo_count', 0)}
‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç—ã: {stats.get('document_count', 0)}
‚Ä¢ –ê—É–¥–∏–æ: {stats.get('audio_count', 0)}

‚è±Ô∏è <b>–û–±—â–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b>
{total_hours}—á {total_minutes}–º

üìÇ <b>–ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:</b>
"""
            
            for category, count in stats.get('categories', {}).items():
                text += f"‚Ä¢ {category}: {count}\n"
        
        await callback.message.edit_text(
            text,
            reply_markup=back_to_admin_keyboard(),
            parse_mode="HTML"
        )
        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–µ–¥–∏–∞: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")


@router.callback_query(F.data == "media_search")
async def start_media_search(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –º–µ–¥–∏–∞"""
    try:
        text = """
üîç <b>–ü–æ–∏—Å–∫ –º–µ–¥–∏–∞</b>

–í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ:
‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏—é —É—Ä–æ–∫–∞
‚Ä¢ –û–ø–∏—Å–∞–Ω–∏—é
‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
‚Ä¢ –¢–∏–ø—É —Ñ–∞–π–ª–∞

<i>–ù–∞—á–Ω–∏—Ç–µ –≤–≤–æ–¥–∏—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞:</i>
"""

        await callback.message.edit_text(
            text,
            reply_markup=back_to_admin_keyboard(),
            parse_mode="HTML"
        )
        
        await state.set_state(MediaManagementStates.searching_media)
        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –ø–æ–∏—Å–∫–∞ –º–µ–¥–∏–∞: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–∏—Å–∫–∞")


@router.message(MediaManagementStates.searching_media)
async def handle_media_search(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ–∏—Å–∫ –º–µ–¥–∏–∞"""
    try:
        query = message.text.strip()
        
        if not query or len(query) < 2:
            await message.answer("‚ùå –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞")
            return
        
        media_service = MediaService(session)
        results = await media_service.search_media(query)
        
        if not results:
            await message.answer(f"üì≠ –ü–æ –∑–∞–ø—Ä–æ—Å—É '{query}' –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        else:
            text = f"üîç <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞: '{query}'</b>\n\n–ù–∞–π–¥–µ–Ω–æ: {len(results)}\n\n"
            
            for i, media in enumerate(results[:10], 1):
                duration_text = f" ({media.duration}—Å)" if media.duration else ""
                text += f"{i}. {media.title} ({media.content_type}){duration_text}\n"
            
            if len(results) > 10:
                text += f"\n... –∏ –µ—â–µ {len(results) - 10} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"
            
            await message.answer(
                text,
                reply_markup=back_to_admin_keyboard(),
                parse_mode="HTML"
            )
        
        await state.clear()
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            await message.delete()
        except:
            pass

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –º–µ–¥–∏–∞: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ")
        await state.clear()


@router.callback_query(F.data == "media_optimize")
async def optimize_media_storage(callback: CallbackQuery, session: AsyncSession):
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –º–µ–¥–∏–∞ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ"""
    try:
        await callback.answer("üîÑ –ù–∞—á–∏–Ω–∞—é –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é...")
        
        media_service = MediaService(session)
        result = await media_service.optimize_media_storage()
        
        text = f"""
üõ†Ô∏è <b>–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞</b>

üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:</b>
‚Ä¢ –ù–∞–π–¥–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {result.get('duplicates_found', 0)}
‚Ä¢ –û—á–∏—â–µ–Ω–æ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö: {result.get('unused_cleaned', 0)}

‚úÖ –•—Ä–∞–Ω–∏–ª–∏—â–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ!
"""

        if result.get('duplicates_found', 0) > 0:
            text += "\nüí° –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è —Ñ–∞–π–ª—ã. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Ö –ø—Ä–æ–≤–µ—Ä–∏—Ç—å."

        await callback.message.edit_text(
            text,
            reply_markup=back_to_admin_keyboard(),
            parse_mode="HTML"
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –º–µ–¥–∏–∞: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")


@router.callback_query(F.data == "media_backup")
async def backup_media_metadata(callback: CallbackQuery, session: AsyncSession):
    """–°–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –º–µ–¥–∏–∞"""
    try:
        media_service = MediaService(session)
        backup_data = await media_service.backup_media_metadata()
        
        if not backup_data:
            text = "üì≠ –ù–µ—Ç –º–µ–¥–∏–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞"
        else:
            text = f"""
üíæ <b>–ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω</b>

üìä <b>–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ:</b>
‚Ä¢ –ú–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤: {len(backup_data)}
‚Ä¢ –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: –Ω–∞–∑–≤–∞–Ω–∏—è, —Ç–∏–ø—ã, —Ä–∞–∑–º–µ—Ä—ã
‚Ä¢ –°–≤—è–∑–∏ —Å —É—Ä–æ–∫–∞–º–∏

‚úÖ –ë—ç–∫–∞–ø –≥–æ—Ç–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
"""

        await callback.message.edit_text(
            text,
            reply_markup=back_to_admin_keyboard(),
            parse_mode="HTML"
        )
        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—ç–∫–∞–ø–∞ –º–µ–¥–∏–∞: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—ç–∫–∞–ø–∞")


@router.callback_query(F.data == "media_analytics")
async def show_media_analytics(callback: CallbackQuery, session: AsyncSession):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É –º–µ–¥–∏–∞"""
    try:
        media_service = MediaService(session)
        analytics = await media_service.get_media_usage_analytics()
        
        if not analytics:
            text = """
üìà <b>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –º–µ–¥–∏–∞</b>

‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
"""
        else:
            text = f"""
üìà <b>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º–µ–¥–∏–∞</b>

üìä <b>–ü—Ä–æ—Å–º–æ—Ç—Ä—ã:</b>
‚Ä¢ –í—Å–µ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: {analytics.get('total_views', 0)}
‚Ä¢ –°—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã: {analytics.get('average_views', 0)}

üèÜ <b>–¢–æ–ø –º–µ–¥–∏–∞:</b>
"""
            
            if analytics.get('most_viewed'):
                most_viewed = analytics['most_viewed']
                text += f"‚Ä¢ {most_viewed['title']}: {most_viewed['views']} –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤\n"
            
            if analytics.get('least_viewed'):
                least_viewed = analytics['least_viewed']
                text += f"‚Ä¢ –ú–∏–Ω–∏–º—É–º: {least_viewed['views']} –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤"

        await callback.message.edit_text(
            text,
            reply_markup=back_to_admin_keyboard(),
            parse_mode="HTML"
        )
        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –º–µ–¥–∏–∞: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏")