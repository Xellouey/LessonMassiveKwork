"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤
"""
import logging
import re
from typing import Optional
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession

from services.withdrawal import WithdrawalService
from services.admin import AdminService
from keyboards.admin import (
    withdrawal_main_keyboard,
    withdrawal_confirm_keyboard,
    withdrawal_requests_keyboard,
    withdrawal_details_keyboard,
    withdrawal_cancel_confirm_keyboard,
    admin_main_menu_keyboard
)
from states.admin import WithdrawalStates
from middlewares.admin import AdminOnlyMiddleware

logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
router = Router()
router.message.middleware(AdminOnlyMiddleware())
router.callback_query.middleware(AdminOnlyMiddleware())


@router.callback_query(F.data == "withdrawal_menu")
async def show_withdrawal_menu(callback: CallbackQuery, session: AsyncSession, admin, state: FSMContext):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å–∏—Å—Ç–µ–º—ã –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤"""
    try:
        withdrawal_service = WithdrawalService(session)
        
        # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        available_balance = await withdrawal_service.validate_admin_balance(admin.user_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤
        requests = await withdrawal_service.get_withdrawal_requests_by_admin(admin.user_id)
        pending_count = len([r for r in requests if r.status == 'pending'])
        processing_count = len([r for r in requests if r.status == 'processing'])
        
        withdrawal_text = f"""
üí∏ <b>–°–∏—Å—Ç–µ–º–∞ –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤</b>

üí∞ <b>–í–∞—à –±–∞–ª–∞–Ω—Å:</b> {available_balance:,} ‚≠ê
üìà <b>–°—Ç–∞—Ç—É—Å –∑–∞–ø—Ä–æ—Å–æ–≤:</b>
‚Ä¢ –û–∂–∏–¥–∞—é—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏: {pending_count}
‚Ä¢ –í –ø—Ä–æ—Ü–µ—Å—Å–µ: {processing_count}

‚ÑπÔ∏è <b>–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è Telegram:</b>
‚Ä¢ 21 –¥–µ–Ω—å —É–¥–µ—Ä–∂–∞–Ω–∏—è –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–≤–µ–∑–¥
‚Ä¢ –¢—Ä–µ–±—É–µ—Ç—Å—è 2FA –ø–∞—Ä–æ–ª—å –¥–ª—è –≤—ã–≤–æ–¥–∞
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–µ—Ä–∂–∞–Ω–∏–µ –ù–î–° –ø–æ —Ä–µ–≥–∏–æ–Ω—É

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
"""
        
        await callback.message.edit_text(
            withdrawal_text,
            reply_markup=withdrawal_main_keyboard()
        )
        await callback.answer()
        await state.set_state(WithdrawalStates.in_withdrawal_menu)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –º–µ–Ω—é –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é.")


@router.callback_query(F.data == "withdrawal_balance")
async def show_balance_details(callback: CallbackQuery, session: AsyncSession, admin):
    """–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–ª–∞–Ω—Å–µ"""
    try:
        withdrawal_service = WithdrawalService(session)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–ª–∞–Ω—Å–µ
        available_balance = await withdrawal_service.validate_admin_balance(admin.user_id)
        
        balance_text = f"""
üí∞ <b>–î–µ—Ç–∞–ª–∏ –±–∞–ª–∞–Ω—Å–∞</b>

üí∏ <b>–î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –≤—ã–≤–æ–¥–∞:</b> {available_balance:,} ‚≠ê

üí° <b>–£—Å–ª–æ–≤–∏—è –≤—ã–≤–æ–¥–∞:</b>
‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: {withdrawal_service.min_withdrawal_amount:,} ‚≠ê
‚Ä¢ –ö–æ–º–∏—Å—Å–∏—è: {withdrawal_service.commission_rate*100}%
‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∫–æ–º–∏—Å—Å–∏—è: {withdrawal_service.min_commission} ‚≠ê
‚Ä¢ –î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç: {withdrawal_service.daily_limit:,} ‚≠ê

‚ÑπÔ∏è –°—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è –Ω–∞ Telegram Wallet –≤ —Ñ–æ—Ä–º–∞—Ç–µ TON.
"""
        
        await callback.message.edit_text(
            balance_text,
            reply_markup=withdrawal_main_keyboard()
        )
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –¥–µ—Ç–∞–ª–µ–π –±–∞–ª–∞–Ω—Å–∞: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö.")


@router.callback_query(F.data == "withdrawal_create")
async def start_withdrawal_creation(callback: CallbackQuery, session: AsyncSession, admin, state: FSMContext):
    """–ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—ã–≤–æ–¥"""
    try:
        withdrawal_service = WithdrawalService(session)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å
        available_balance = await withdrawal_service.validate_admin_balance(admin.user_id)
        
        if available_balance < withdrawal_service.min_withdrawal_amount:
            await callback.message.edit_text(
                f"‚ùå <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞</b>\n\n"
                f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {available_balance:,} ‚≠ê\n"
                f"üí∏ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: {withdrawal_service.min_withdrawal_amount:,} ‚≠ê\n\n"
                f"–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å, –ø–æ–ª—É—á–∏–≤ –±–æ–ª—å—à–µ –ø—Ä–æ–¥–∞–∂.",
                reply_markup=withdrawal_main_keyboard()
            )
            await callback.answer()
            return
        
        create_text = f"""
üí∏ <b>–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—ã–≤–æ–¥</b>

üí∞ <b>–î–æ—Å—Ç—É–ø–Ω–æ:</b> {available_balance:,} ‚≠ê
üí° <b>–ú–∏–Ω–∏–º—É–º:</b> {withdrawal_service.min_withdrawal_amount:,} ‚≠ê
üí° <b>–ú–∞–∫—Å–∏–º—É–º:</b> {min(available_balance, withdrawal_service.daily_limit):,} ‚≠ê

üìù –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞ (–≤ –∑–≤–µ–∑–¥–∞—Ö):
"""
        
        await callback.message.edit_text(create_text)
        await callback.answer()
        await state.set_state(WithdrawalStates.entering_withdrawal_amount)
        await state.update_data(available_balance=available_balance)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—ã–≤–æ–¥: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞.")


@router.message(WithdrawalStates.entering_withdrawal_amount)
async def process_withdrawal_amount(message: Message, session: AsyncSession, admin, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–π —Å—É–º–º—ã –¥–ª—è –≤—ã–≤–æ–¥–∞"""
    try:
        withdrawal_service = WithdrawalService(session)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ —á–∏—Å–ª–æ
        try:
            amount = int(message.text.strip().replace(',', '').replace(' ', ''))
        except ValueError:
            await message.answer(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É —á–∏—Å–ª–æ–º.\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: 1000"
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        available_balance = data.get('available_balance', 0)
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—É–º–º—ã
        if amount < withdrawal_service.min_withdrawal_amount:
            await message.answer(
                f"‚ùå –°—É–º–º–∞ —Å–ª–∏—à–∫–æ–º –º–∞–ª–∞.\n"
                f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: {withdrawal_service.min_withdrawal_amount:,} ‚≠ê"
            )
            return
        
        if amount > available_balance:
            await message.answer(
                f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.\n"
                f"–î–æ—Å—Ç—É–ø–Ω–æ: {available_balance:,} ‚≠ê"
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç
        if not await withdrawal_service.check_daily_limit(admin.user_id, amount):
            await message.answer(
                f"‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç.\n"
                f"–ú–∞–∫—Å–∏–º—É–º –≤ –¥–µ–Ω—å: {withdrawal_service.daily_limit:,} ‚≠ê"
            )
            return
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–º–∏—Å—Å–∏—é
        commission = withdrawal_service.calculate_commission(amount)
        net_amount = amount - commission
        
        amount_text = f"""
üí∏ <b>–°—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞</b>

üí∞ <b>–°—É–º–º–∞ –∫ –≤—ã–≤–æ–¥—É:</b> {amount:,} ‚≠ê
üí∏ <b>–ö–æ–º–∏—Å—Å–∏—è ({withdrawal_service.commission_rate*100}%):</b> {commission:,} ‚≠ê
‚úÖ <b>–ö –ø–æ–ª—É—á–µ–Ω–∏—é:</b> {net_amount:,} ‚≠ê

üìù –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å Telegram Wallet (TON):

üí° <b>–§–æ—Ä–º–∞—Ç –∞–¥—Ä–µ—Å–∞:</b> 
‚Ä¢ –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å EQ, UQ –∏–ª–∏ 0Q
‚Ä¢ –î–ª–∏–Ω–∞ 48 —Å–∏–º–≤–æ–ª–æ–≤
‚Ä¢ –ü—Ä–∏–º–µ—Ä: EQA0i8-CdGnF_DhUHHf92R1ONH6sIA9vLZ_WLcCIhfBBXwtG
"""
        
        await message.answer(amount_text)
        await state.set_state(WithdrawalStates.entering_wallet_address)
        await state.update_data(
            amount=amount,
            commission=commission,
            net_amount=net_amount
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—É–º–º—ã –≤—ã–≤–æ–¥–∞: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—É–º–º—ã.")


@router.message(WithdrawalStates.entering_wallet_address)
async def process_wallet_address(message: Message, session: AsyncSession, admin, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞ –∫–æ—à–µ–ª—å–∫–∞"""
    try:
        withdrawal_service = WithdrawalService(session)
        wallet_address = message.text.strip()
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∞–¥—Ä–µ—Å–∞ –∫–æ—à–µ–ª—å–∫–∞
        if not withdrawal_service.validate_wallet_address(wallet_address):
            await message.answer(
                "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞–¥—Ä–µ—Å–∞ –∫–æ—à–µ–ª—å–∫–∞</b>\n\n"
                "üí° TON –∞–¥—Ä–µ—Å –¥–æ–ª–∂–µ–Ω:\n"
                "‚Ä¢ –ù–∞—á–∏–Ω–∞—Ç—å—Å—è —Å EQ, UQ –∏–ª–∏ 0Q\n"
                "‚Ä¢ –ò–º–µ—Ç—å –¥–ª–∏–Ω—É 48 —Å–∏–º–≤–æ–ª–æ–≤\n"
                "‚Ä¢ –°–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, _ –∏ -\n\n"
                "üìù <b>–ü—Ä–∏–º–µ—Ä:</b> EQA0i8-CdGnF_DhUHHf92R1ONH6sIA9vLZ_WLcCIhfBBXwtG\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
            )
            return
        
        notes_text = f"""
üìù <b>–ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω</b>

üí≥ <b>–ö–æ—à–µ–ª–µ–∫:</b> <code>{wallet_address}</code>

üìù –î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –≤—ã–≤–æ–¥—É (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /skip –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞:

üí° <b>–ü—Ä–∏–º–µ—Ä—ã –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:</b>
‚Ä¢ –í—ã–≤–æ–¥ –ø—Ä–∏–±—ã–ª–∏ –∑–∞ –º–µ—Å—è—Ü
‚Ä¢ –ö–æ–º–∏—Å—Å–∏—è –∑–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
‚Ä¢ –î–æ—Ö–æ–¥—ã –æ—Ç –∫—É—Ä—Å–æ–≤
"""
        
        await message.answer(notes_text)
        await state.set_state(WithdrawalStates.entering_withdrawal_notes)
        await state.update_data(wallet_address=wallet_address)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–¥—Ä–µ—Å–∞ –∫–æ—à–µ–ª—å–∫–∞: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–¥—Ä–µ—Å–∞.")


@router.message(WithdrawalStates.entering_withdrawal_notes)
async def process_withdrawal_notes(message: Message, session: AsyncSession, admin, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ –≤—ã–≤–æ–¥—É"""
    try:
        notes = None if message.text.strip() == "/skip" else message.text.strip()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        amount = data.get('amount')
        commission = data.get('commission')
        net_amount = data.get('net_amount')
        wallet_address = data.get('wallet_address')
        
        confirm_text = f"""
‚úÖ <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—ã–≤–æ–¥</b>

üí∞ <b>–°—É–º–º–∞ –∫ –≤—ã–≤–æ–¥—É:</b> {amount:,} ‚≠ê
üí∏ <b>–ö–æ–º–∏—Å—Å–∏—è:</b> {commission:,} ‚≠ê
‚ú® <b>–ö –ø–æ–ª—É—á–µ–Ω–∏—é:</b> {net_amount:,} ‚≠ê

üí≥ <b>–ö–æ—à–µ–ª–µ–∫:</b> <code>{wallet_address}</code>
üìù <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {notes or "–ù–µ —É–∫–∞–∑–∞–Ω"}

‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ:</b>
‚Ä¢ –ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É
‚Ä¢ –°—Ä–µ–¥—Å—Ç–≤–∞ –±—É–¥—É—Ç –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤
‚Ä¢ –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –¥–æ –Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏

–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞?
"""
        
        await message.answer(
            confirm_text,
            reply_markup=withdrawal_confirm_keyboard(amount, commission, net_amount)
        )
        await state.set_state(WithdrawalStates.confirming_withdrawal)
        await state.update_data(notes=notes)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è.")


@router.callback_query(F.data == "withdrawal_confirm_yes", WithdrawalStates.confirming_withdrawal)
async def confirm_withdrawal_creation(callback: CallbackQuery, session: AsyncSession, admin, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—ã–≤–æ–¥"""
    try:
        withdrawal_service = WithdrawalService(session)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥
        withdrawal_request = await withdrawal_service.create_withdrawal_request(
            admin_id=admin.user_id,
            amount_stars=data.get('amount'),
            wallet_address=data.get('wallet_address'),
            notes=data.get('notes')
        )
        
        if withdrawal_request:
            success_text = f"""
‚úÖ <b>–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ —Å–æ–∑–¥–∞–Ω</b>

üÜî <b>ID –∑–∞–ø—Ä–æ—Å–∞:</b> #{withdrawal_request.id}
üí∞ <b>–°—É–º–º–∞:</b> {withdrawal_request.amount_stars:,} ‚≠ê
üí∏ <b>–ö–æ–º–∏—Å—Å–∏—è:</b> {withdrawal_request.commission_amount:,} ‚≠ê
‚ú® <b>–ö –ø–æ–ª—É—á–µ–Ω–∏—é:</b> {withdrawal_request.net_amount:,} ‚≠ê
‚è∞ <b>–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:</b> {withdrawal_request.request_date.strftime('%d.%m.%Y %H:%M')}

üìã <b>–°—Ç–∞—Ç—É—Å:</b> –û–∂–∏–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏

üí° –ó–∞–ø—Ä–æ—Å –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤.
–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏.
"""
            
            await callback.message.edit_text(
                success_text,
                reply_markup=withdrawal_main_keyboard()
            )
        else:
            await callback.message.edit_text(
                "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞</b>\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                reply_markup=withdrawal_main_keyboard()
            )
        
        await callback.answer()
        await state.clear()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—ã–≤–æ–¥: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞.")


@router.callback_query(F.data == "withdrawal_confirm_no")
async def cancel_withdrawal_creation(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—ã–≤–æ–¥"""
    try:
        await callback.message.edit_text(
            "‚ùå <b>–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ</b>\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.",
            reply_markup=withdrawal_main_keyboard()
        )
        await callback.answer()
        await state.clear()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ.")


@router.callback_query(F.data == "withdrawal_my_requests")
async def show_my_withdrawal_requests(callback: CallbackQuery, session: AsyncSession, admin, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –≤—ã–≤–æ–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    try:
        withdrawal_service = WithdrawalService(session)
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        requests = await withdrawal_service.get_withdrawal_requests_by_admin(admin.user_id)
        
        if not requests:
            await callback.message.edit_text(
                "üìù <b>–ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –≤—ã–≤–æ–¥</b>\n\n"
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤.\n\n"
                "üí° –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—É—á–∞—Ç—å –ø—Ä–∏–±—ã–ª—å!",
                reply_markup=withdrawal_main_keyboard()
            )
            await callback.answer()
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–æ—Å–æ–≤
        requests_text = "üìã <b>–í–∞—à–∏ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –≤—ã–≤–æ–¥</b>\n\n"
        
        for request in requests[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10
            status_emoji = {
                'pending': '‚è≥',
                'processing': 'üîÑ',
                'completed': '‚úÖ',
                'failed': '‚ùå',
                'cancelled': 'üö´'
            }.get(request.status, '‚ùì')
            
            requests_text += f"""
{status_emoji} <b>#{request.id}</b> ‚Ä¢ {request.amount_stars:,} ‚≠ê
üìÖ {request.request_date.strftime('%d.%m.%Y %H:%M')}
üí≥ {request.wallet_address[:10]}...{request.wallet_address[-10:]}
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
"""
        
        if len(requests) > 10:
            requests_text += f"\n... –∏ –µ—â–µ {len(requests) - 10} –∑–∞–ø—Ä–æ—Å–æ–≤"
        
        await callback.message.edit_text(
            requests_text,
            reply_markup=withdrawal_requests_keyboard()
        )
        await callback.answer()
        await state.set_state(WithdrawalStates.viewing_withdrawals)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –≤—ã–≤–æ–¥: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–ø—Ä–æ—Å–æ–≤.")


# –ë–∞–∑–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π –∏ –æ—Ç–º–µ–Ω—ã
@router.callback_query(F.data.startswith("withdrawal_details:"))
async def show_withdrawal_details(callback: CallbackQuery, session: AsyncSession, admin):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—ã–≤–æ–¥"""
    try:
        withdrawal_service = WithdrawalService(session)
        request_id = int(callback.data.split(":")[1])
        
        withdrawal_request = await withdrawal_service.get_withdrawal_request_by_id(request_id)
        
        if not withdrawal_request or withdrawal_request.admin_id != admin.user_id:
            await callback.answer("‚ùå –ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        status_info = {
            'pending': ('‚è≥', '–û–∂–∏–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏'),
            'processing': ('üîÑ', '–í –æ–±—Ä–∞–±–æ—Ç–∫–µ'),
            'completed': ('‚úÖ', '–ó–∞–≤–µ—Ä—à–µ–Ω'),
            'failed': ('‚ùå', '–û—Ç–∫–ª–æ–Ω–µ–Ω'),
            'cancelled': ('üö´', '–û—Ç–º–µ–Ω–µ–Ω')
        }
        
        status_emoji, status_text = status_info.get(withdrawal_request.status, ('‚ùì', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'))
        
        details_text = f"""
{status_emoji} <b>–ó–∞–ø—Ä–æ—Å #{withdrawal_request.id}</b>

üí∞ <b>–°—É–º–º–∞ –∑–∞–ø—Ä–æ—Å–∞:</b> {withdrawal_request.amount_stars:,} ‚≠ê
üí∏ <b>–ö–æ–º–∏—Å—Å–∏—è:</b> {withdrawal_request.commission_amount:,} ‚≠ê
‚ú® <b>–ö –ø–æ–ª—É—á–µ–Ω–∏—é:</b> {withdrawal_request.net_amount:,} ‚≠ê

üí≥ <b>–ö–æ—à–µ–ª–µ–∫:</b> <code>{withdrawal_request.wallet_address}</code>
üìù <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {withdrawal_request.notes or "–ù–µ —É–∫–∞–∑–∞–Ω"}

üìã <b>–°—Ç–∞—Ç—É—Å:</b> {status_text}
üìÖ <b>–°–æ–∑–¥–∞–Ω:</b> {withdrawal_request.request_date.strftime('%d.%m.%Y %H:%M')}
"""
        
        if withdrawal_request.processed_date:
            details_text += f"‚úÖ <b>–û–±—Ä–∞–±–æ—Ç–∞–Ω:</b> {withdrawal_request.processed_date.strftime('%d.%m.%Y %H:%M')}\n"
        
        if withdrawal_request.transaction_id:
            details_text += f"üÜî <b>ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:</b> <code>{withdrawal_request.transaction_id}</code>\n"
        
        if withdrawal_request.failure_reason:
            details_text += f"‚ùå <b>–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–∞–∑–∞:</b> {withdrawal_request.failure_reason}\n"
        
        can_cancel = withdrawal_request.status == 'pending'
        
        await callback.message.edit_text(
            details_text,
            reply_markup=withdrawal_details_keyboard(request_id, withdrawal_request.status, can_cancel)
        )
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –¥–µ—Ç–∞–ª–µ–π –∑–∞–ø—Ä–æ—Å–∞: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–µ—Ç–∞–ª–µ–π.")


@router.callback_query(F.data.startswith("withdrawal_cancel:"))
async def show_cancel_confirmation(callback: CallbackQuery, session: AsyncSession, admin):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–º–µ–Ω—ã –∑–∞–ø—Ä–æ—Å–∞"""
    try:
        withdrawal_service = WithdrawalService(session)
        request_id = int(callback.data.split(":")[1])
        
        withdrawal_request = await withdrawal_service.get_withdrawal_request_by_id(request_id)
        
        if not withdrawal_request or withdrawal_request.admin_id != admin.user_id:
            await callback.answer("‚ùå –ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        if withdrawal_request.status != 'pending':
            await callback.answer("‚ùå –ú–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–∂–∏–¥–∞—é—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã.")
            return
        
        cancel_text = f"""
üö´ <b>–û—Ç–º–µ–Ω–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—ã–≤–æ–¥</b>

üÜî <b>–ó–∞–ø—Ä–æ—Å:</b> #{withdrawal_request.id}
üí∞ <b>–°—É–º–º–∞:</b> {withdrawal_request.amount_stars:,} ‚≠ê
üí≥ <b>–ö–æ—à–µ–ª–µ–∫:</b> {withdrawal_request.wallet_address[:10]}...{withdrawal_request.wallet_address[-10:]}

‚ùì <b>–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —ç—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å?</b>

‚ö†Ô∏è –ü–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã –≤–∞–º –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤.
"""
        
        await callback.message.edit_text(
            cancel_text,
            reply_markup=withdrawal_cancel_confirm_keyboard(request_id)
        )
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–º–µ–Ω—ã: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ.")


@router.callback_query(F.data.startswith("withdrawal_cancel_confirm:"))
async def confirm_withdrawal_cancellation(callback: CallbackQuery, session: AsyncSession, admin):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–º–µ–Ω—ã –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—ã–≤–æ–¥"""
    try:
        withdrawal_service = WithdrawalService(session)
        request_id = int(callback.data.split(":")[1])
        
        withdrawal_request = await withdrawal_service.get_withdrawal_request_by_id(request_id)
        
        if not withdrawal_request or withdrawal_request.admin_id != admin.user_id:
            await callback.answer("‚ùå –ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        if withdrawal_request.status != 'pending':
            await callback.answer("‚ùå –ú–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–∂–∏–¥–∞—é—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã.")
            return
        
        # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
        success = await withdrawal_service.cancel_withdrawal_request(
            request_id, 
            admin.user_id,
            "–û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"
        )
        
        if success:
            success_text = f"""
‚úÖ <b>–ó–∞–ø—Ä–æ—Å #{request_id} –æ—Ç–º–µ–Ω–µ–Ω</b>

üí∞ –°—É–º–º–∞ {withdrawal_request.amount_stars:,} ‚≠ê –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞ –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å.

–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.
"""
            
            await callback.message.edit_text(
                success_text,
                reply_markup=withdrawal_main_keyboard()
            )
        else:
            await callback.message.edit_text(
                "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–ø—Ä–æ—Å–∞</b>\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                reply_markup=withdrawal_main_keyboard()
            )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –æ—Ç–º–µ–Ω—ã –∑–∞–ø—Ä–æ—Å–∞: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–ø—Ä–æ—Å–∞.")


@router.callback_query(F.data == "withdrawal_statistics")
async def show_withdrawal_statistics(callback: CallbackQuery, session: AsyncSession, admin):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—ã–≤–æ–¥–∞–º"""
    try:
        withdrawal_service = WithdrawalService(session)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        requests = await withdrawal_service.get_withdrawal_requests_by_admin(admin.user_id)
        
        if not requests:
            stats_text = """
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–≤–æ–¥–æ–≤</b>

–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤.

üí° –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—É—á–∞—Ç—å –ø—Ä–∏–±—ã–ª—å!
"""
        else:
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            total_requests = len(requests)
            total_amount = sum(r.amount_stars for r in requests)
            total_commission = sum(r.commission_amount for r in requests)
            total_net = sum(r.net_amount for r in requests)
            
            completed = [r for r in requests if r.status == 'completed']
            pending = [r for r in requests if r.status == 'pending']
            processing = [r for r in requests if r.status == 'processing']
            failed = [r for r in requests if r.status == 'failed']
            cancelled = [r for r in requests if r.status == 'cancelled']
            
            completed_amount = sum(r.net_amount for r in completed)
            
            stats_text = f"""
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–≤–æ–¥–æ–≤</b>

üìä <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {total_requests}
‚Ä¢ –û–±—â–∞—è —Å—É–º–º–∞: {total_amount:,} ‚≠ê
‚Ä¢ –ö–æ–º–∏—Å—Å–∏—è: {total_commission:,} ‚≠ê
‚Ä¢ –ö –ø–æ–ª—É—á–µ–Ω–∏—é: {total_net:,} ‚≠ê

üìä <b>–ü–æ —Å—Ç–∞—Ç—É—Å–∞–º:</b>
‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {len(completed)} ‚Ä¢ {completed_amount:,} ‚≠ê
‚è≥ –û–∂–∏–¥–∞–µ—Ç: {len(pending)}
üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è: {len(processing)}
‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: {len(failed)}
üôÖ –û—Ç–º–µ–Ω–µ–Ω–æ: {len(cancelled)}
"""
        
        await callback.message.edit_text(
            stats_text,
            reply_markup=withdrawal_main_keyboard()
        )
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤—ã–≤–æ–¥–æ–≤: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")