"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏
"""
import logging
from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession

from services.text import TextService
from keyboards.admin import (
    text_categories_keyboard, text_settings_keyboard, text_actions_keyboard,
    back_to_admin_keyboard, text_language_keyboard, text_search_keyboard
)
from states.admin import TextEditingStates
from middlewares.admin import AdminOnlyMiddleware

logger = logging.getLogger(__name__)
router = Router()
router.callback_query.middleware(AdminOnlyMiddleware())
router.message.middleware(AdminOnlyMiddleware())


@router.callback_query(F.data == "admin_texts")
async def show_text_editor_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ —Ç–µ–∫—Å—Ç–æ–≤"""
    try:
        text = """
üìù <b>–†–µ–¥–∞–∫—Ç–æ—Ä —Ç–µ–∫—Å—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞</b>

–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –≤—Å–µ–º–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏, –∫–Ω–æ–ø–∫–∞–º–∏ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –±–æ—Ç–∞.

üìÇ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–µ–∫—Å—Ç–æ–≤:</b>
‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏—è - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ, –ø–æ–º–æ—â—å, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
‚Ä¢ –ö–Ω–æ–ø–∫–∏ - –Ω–∞–∑–≤–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
‚Ä¢ –û—à–∏–±–∫–∏ - —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö
‚Ä¢ –£—Å–ø–µ—Ö - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± —É—Å–ø–µ—à–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏—è—Ö

üåê <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞ —è–∑—ã–∫–æ–≤:</b> –†—É—Å—Å–∫–∏–π, –ê–Ω–≥–ª–∏–π—Å–∫–∏–π

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
"""

        await callback.message.edit_text(
            text,
            reply_markup=text_categories_keyboard(),
            parse_mode="HTML"
        )
        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ —Ç–µ–∫—Å—Ç–æ–≤: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é")


@router.callback_query(F.data.startswith("text_category:"))
async def show_texts_by_category(callback: CallbackQuery, session: AsyncSession):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—Å—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    try:
        category = callback.data.split(":")[1]
        
        text_service = TextService(session)
        texts = await text_service.get_text_settings_by_category(category)
        
        # –ù–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        category_names = {
            "messages": "–°–æ–æ–±—â–µ–Ω–∏—è",
            "buttons": "–ö–Ω–æ–ø–∫–∏",
            "errors": "–û—à–∏–±–∫–∏",
            "success": "–£—Å–ø–µ—à–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è",
            "descriptions": "–û–ø–∏—Å–∞–Ω–∏—è"
        }
        
        category_name = category_names.get(category, category.capitalize())
        
        if not texts:
            text = f"""
üìÇ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name}</b>

üì≠ –í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤.
–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π —Ç–µ–∫—Å—Ç, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –µ–≥–æ –∑–¥–µ—Å—å.
"""
            await callback.message.edit_text(
                text,
                reply_markup=back_to_admin_keyboard(),
                parse_mode="HTML"
            )
        else:
            text = f"üìÇ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name}</b>\n\n–í—Å–µ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤: {len(texts)}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:\n\n"
            
            await callback.message.edit_text(
                text,
                reply_markup=text_settings_keyboard(texts, category),
                parse_mode="HTML"
            )
        
        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category}: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–µ–∫—Å—Ç–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")


@router.callback_query(F.data.startswith("edit_text:"))
async def show_text_details(callback: CallbackQuery, session: AsyncSession):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        text_key = callback.data.split(":")[1]
        
        text_service = TextService(session)
        text_setting = await text_service.get_text_setting_by_key(text_key)
        
        if not text_setting:
            await callback.answer("‚ùå –¢–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—Å—Ç–µ
        text = f"""
üìù <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞</b>

üîë <b>–ö–ª—é—á:</b> <code>{text_setting.key}</code>
üìÇ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {text_setting.category}
üìã <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {text_setting.description or '–ù–µ –∑–∞–¥–∞–Ω–æ'}

üá∑üá∫ <b>–†—É—Å—Å–∫–∏–π —Ç–µ–∫—Å—Ç:</b>
{text_setting.value_ru}

üá¨üáß <b>–ê–Ω–≥–ª–∏–π—Å–∫–∏–π —Ç–µ–∫—Å—Ç:</b>
{text_setting.value_en or '–ù–µ –∑–∞–¥–∞–Ω'}

‚è∞ <b>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:</b> {text_setting.updated_at.strftime('%d.%m.%Y %H:%M') if text_setting.updated_at else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
"""

        await callback.message.edit_text(
            text,
            reply_markup=text_actions_keyboard(text_key),
            parse_mode="HTML"
        )
        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π —Ç–µ–∫—Å—Ç–∞ {text_key}: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–µ—Ç–∞–ª–µ–π —Ç–µ–∫—Å—Ç–∞")


@router.callback_query(F.data.startswith("edit_text_lang:"))
async def start_text_editing(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ"""
    try:
        _, text_key, language = callback.data.split(":")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.set_data({
            'text_key': text_key,
            'language': language
        })
        
        lang_name = "—Ä—É—Å—Å–∫–æ–º" if language == "ru" else "–∞–Ω–≥–ª–∏–π—Å–∫–æ–º"
        
        text = f"""
‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ {lang_name} —è–∑—ã–∫–µ</b>

üîë <b>–ö–ª—é—á:</b> <code>{text_key}</code>

–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç:

<i>üí° –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è HTML-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: 
&lt;b&gt;–∂–∏—Ä–Ω—ã–π&lt;/b&gt;, &lt;i&gt;–∫—É—Ä—Å–∏–≤&lt;/i&gt;, &lt;code&gt;–∫–æ–¥&lt;/code&gt;</i>
"""

        await callback.message.edit_text(
            text,
            parse_mode="HTML"
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        if language == "ru":
            await state.set_state(TextEditingStates.entering_new_text_ru)
        else:
            await state.set_state(TextEditingStates.entering_new_text_en)
        
        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")


@router.message(TextEditingStates.entering_new_text_ru)
async def handle_new_text_ru(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–æ–≤—ã–π —Ä—É—Å—Å–∫–∏–π —Ç–µ–∫—Å—Ç"""
    try:
        data = await state.get_data()
        text_key = data.get('text_key')
        new_text = message.text
        
        if not new_text or len(new_text.strip()) == 0:
            await message.answer("‚ùå –¢–µ–∫—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
        
        if len(new_text) > 4000:
            await message.answer(
                "‚ùå –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞: 4000 —Å–∏–º–≤–æ–ª–æ–≤.\n"
                f"–í–∞—à —Ç–µ–∫—Å—Ç: {len(new_text)} —Å–∏–º–≤–æ–ª–æ–≤. –°–æ–∫—Ä–∞—Ç–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
            )
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
        text_service = TextService(session)
        result = await text_service.update_text_setting(
            key=text_key,
            value_ru=new_text
        )
        
        if result:
            await message.answer(
                f"‚úÖ –†—É—Å—Å–∫–∏–π —Ç–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!\n\n"
                f"üîë <b>–ö–ª—é—á:</b> <code>{text_key}</code>\n"
                f"üìù <b>–ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç:</b>\n{new_text}",
                reply_markup=back_to_admin_keyboard(),
                parse_mode="HTML"
            )
            logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω —Ä—É—Å—Å–∫–∏–π —Ç–µ–∫—Å—Ç –¥–ª—è –∫–ª—é—á–∞ {text_key}")
        else:
            await message.answer(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=back_to_admin_keyboard()
            )
        
        await state.clear()
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        try:
            await message.delete()
        except:
            pass

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–æ–≤–æ–≥–æ —Ä—É—Å—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞")
        await state.clear()


@router.message(TextEditingStates.entering_new_text_en)
async def handle_new_text_en(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–æ–≤—ã–π –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —Ç–µ–∫—Å—Ç"""
    try:
        data = await state.get_data()
        text_key = data.get('text_key')
        new_text = message.text
        
        if not new_text or len(new_text.strip()) == 0:
            await message.answer("‚ùå –¢–µ–∫—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
        
        if len(new_text) > 4000:
            await message.answer(
                "‚ùå –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞: 4000 —Å–∏–º–≤–æ–ª–æ–≤.\n"
                f"–í–∞—à —Ç–µ–∫—Å—Ç: {len(new_text)} —Å–∏–º–≤–æ–ª–æ–≤. –°–æ–∫—Ä–∞—Ç–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
            )
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
        text_service = TextService(session)
        result = await text_service.update_text_setting(
            key=text_key,
            value_en=new_text
        )
        
        if result:
            await message.answer(
                f"‚úÖ –ê–Ω–≥–ª–∏–π—Å–∫–∏–π —Ç–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!\n\n"
                f"üîë <b>–ö–ª—é—á:</b> <code>{text_key}</code>\n"
                f"üìù <b>–ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç:</b>\n{new_text}",
                reply_markup=back_to_admin_keyboard(),
                parse_mode="HTML"
            )
            logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —Ç–µ–∫—Å—Ç –¥–ª—è –∫–ª—é—á–∞ {text_key}")
        else:
            await message.answer(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=back_to_admin_keyboard()
            )
        
        await state.clear()
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            await message.delete()
        except:
            pass

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–æ–≤–æ–≥–æ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞")
        await state.clear()


@router.callback_query(F.data == "admin_text_search")
async def show_text_search_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –ø–æ–∏—Å–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤"""
    try:
        text = """
üîç <b>–ü–æ–∏—Å–∫ —Ç–µ–∫—Å—Ç–æ–≤</b>

–í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ:
‚Ä¢ –ö–ª—é—á—É —Ç–µ–∫—Å—Ç–∞
‚Ä¢ –°–æ–¥–µ—Ä–∂–∏–º–æ–º—É (—Ä—É—Å—Å–∫–∏–π/–∞–Ω–≥–ª–∏–π—Å–∫–∏–π)
‚Ä¢ –û–ø–∏—Å–∞–Ω–∏—é
‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏

–ù–∞—á–Ω–∏—Ç–µ –≤–≤–æ–¥–∏—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞:
"""

        await callback.message.edit_text(
            text,
            reply_markup=back_to_admin_keyboard(),
            parse_mode="HTML"
        )
        
        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –º–µ–Ω—é –ø–æ–∏—Å–∫–∞: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–∏—Å–∫–∞")


@router.callback_query(F.data == "admin_text_stats")
async def show_text_statistics(callback: CallbackQuery, session: AsyncSession):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–µ–∫—Å—Ç–æ–≤"""
    try:
        text_service = TextService(session)
        stats = await text_service.get_text_statistics()
        
        if not stats:
            text = """
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤</b>

‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
"""
        else:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            category_text = ""
            for category, count in stats.get('category_distribution', {}).items():
                category_text += f"‚Ä¢ {category}: {count}\n"
            
            text = f"""
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞</b>

üìà <b>–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>
‚Ä¢ –í—Å–µ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤: {stats.get('total_texts', 0)}
‚Ä¢ –° –ø–µ—Ä–µ–≤–æ–¥–æ–º: {stats.get('texts_with_translation', 0)}
‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏–π: {stats.get('categories_count', 0)}
‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã—Ö: {stats.get('translation_percentage', 0):.1f}%

üìÇ <b>–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:</b>
{category_text if category_text else '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}

üåê <b>–ú–Ω–æ–≥–æ—è–∑—ã—á–Ω–æ—Å—Ç—å:</b>
–ü–æ–¥–¥–µ—Ä–∂–∫–∞: –†—É—Å—Å–∫–∏–π (–æ—Å–Ω–æ–≤–Ω–æ–π), –ê–Ω–≥–ª–∏–π—Å–∫–∏–π
"""
        
        await callback.message.edit_text(
            text,
            reply_markup=back_to_admin_keyboard(),
            parse_mode="HTML"
        )
        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")


@router.callback_query(F.data == "admin_text_create")
async def show_text_creation_form(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ä–º—É —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
    try:
        text = """
‚ûï <b>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞</b>

–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å:

1Ô∏è‚É£ <b>–ö–ª—é—á</b> - —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä: welcome_message)
2Ô∏è‚É£ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è</b> - messages, buttons, errors, success, descriptions
3Ô∏è‚É£ <b>–¢–µ–∫—Å—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º</b> - –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç
4Ô∏è‚É£ <b>–¢–µ–∫—Å—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º</b> - –ø–µ—Ä–µ–≤–æ–¥ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
5Ô∏è‚É£ <b>–û–ø–∏—Å–∞–Ω–∏–µ</b> - –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)

<i>üí° –ö–ª—é—á –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è</i>

–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞:
"""

        await callback.message.edit_text(
            text,
            parse_mode="HTML"
        )
        
        await state.set_state(TextEditingStates.selecting_text_category)
        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Ñ–æ—Ä–º—ã —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–æ—Ä–º—ã")


@router.callback_query(F.data.startswith("delete_text:"))
async def delete_text_setting(callback: CallbackQuery, session: AsyncSession):
    """–£–¥–∞–ª–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Ç–µ–∫—Å—Ç–∞"""
    try:
        text_key = callback.data.split(":")[1]
        
        text_service = TextService(session)
        success = await text_service.delete_text_setting(text_key)
        
        if success:
            await callback.answer("‚úÖ –¢–µ–∫—Å—Ç —É–¥–∞–ª–µ–Ω")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ —Ç–µ–∫—Å—Ç–æ–≤
            await show_text_editor_menu(callback)
        else:
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–µ–∫—Å—Ç")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ {text_key}: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞")


@router.callback_query(F.data == "admin_text_export")
async def export_texts_for_translation(callback: CallbackQuery, session: AsyncSession):
    """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç—ã –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞"""
    try:
        text_service = TextService(session)
        export_data = await text_service.export_texts_for_translation()
        
        if not export_data:
            await callback.message.edit_text(
                "üì≠ –ù–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞",
                reply_markup=back_to_admin_keyboard()
            )
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞ (–ø–µ—Ä–≤—ã–µ 10 –∑–∞–ø–∏—Å–µ–π –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏)
        export_text = "üì§ <b>–≠–∫—Å–ø–æ—Ä—Ç —Ç–µ–∫—Å—Ç–æ–≤ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞</b>\n\n"
        
        for i, item in enumerate(export_data[:10]):
            export_text += f"üîë <b>{item['key']}</b>\n"
            export_text += f"üìÇ {item['category']}\n"
            export_text += f"üá∑üá∫ {item['value_ru'][:50]}{'...' if len(item['value_ru']) > 50 else ''}\n"
            if item['value_en']:
                export_text += f"üá¨üáß {item['value_en'][:50]}{'...' if len(item['value_en']) > 50 else ''}\n"
            export_text += "\n"
        
        if len(export_data) > 10:
            export_text += f"... –∏ –µ—â–µ {len(export_data) - 10} —Ç–µ–∫—Å—Ç–æ–≤\n\n"
        
        export_text += f"–í—Å–µ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: {len(export_data)} —Ç–µ–∫—Å—Ç–æ–≤"
        
        await callback.message.edit_text(
            export_text,
            reply_markup=back_to_admin_keyboard(),
            parse_mode="HTML"
        )
        
        logger.info(f"–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(export_data)} —Ç–µ–∫—Å—Ç–æ–≤ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞")
        await callback.answer("‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤")


@router.callback_query(F.data == "admin_text_init")
async def initialize_default_texts(callback: CallbackQuery, session: AsyncSession):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
    try:
        text_service = TextService(session)
        success = await text_service.initialize_default_texts()
        
        if success:
            await callback.message.edit_text(
                "‚úÖ <b>–¢–µ–∫—Å—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã</b>\n\n"
                "–°–æ–∑–¥–∞–Ω—ã –±–∞–∑–æ–≤—ã–µ —Ç–µ–∫—Å—Ç—ã –¥–ª—è:\n"
                "‚Ä¢ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π\n"
                "‚Ä¢ –ö–Ω–æ–ø–æ–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞\n" 
                "‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö\n"
                "‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± —É—Å–ø–µ—Ö–µ\n\n"
                "–í—ã –º–æ–∂–µ—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏—Ö –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö.",
                reply_markup=back_to_admin_keyboard(),
                parse_mode="HTML"
            )
            logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —Ç–µ–∫—Å—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
        else:
            await callback.message.edit_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é",
                reply_markup=back_to_admin_keyboard()
            )
        
        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏")