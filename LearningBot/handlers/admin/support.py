"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
"""
import logging
from aiogram import Router, F, Bot
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from sqlalchemy.ext.asyncio import AsyncSession
from typing import List

from services.support import SupportService
from services.notification import NotificationService
from services.admin import AdminService
from states.admin import SupportManagementStates
from middlewares.admin import AdminOnlyMiddleware
from database.models import SupportTicket

logger = logging.getLogger(__name__)

router = Router()
router.message.middleware(AdminOnlyMiddleware())
router.callback_query.middleware(AdminOnlyMiddleware())


def support_tickets_keyboard(tickets: List[SupportTicket], page: int = 0, per_page: int = 10) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º —Ç–∏–∫–µ—Ç–æ–≤ –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
    builder = InlineKeyboardBuilder()
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ç–∏–∫–µ—Ç—ã –ø–æ —Å—Ç–∞—Ç—É—Å—É
    status_icons = {
        "open": "üü°",
        "in_progress": "üîµ", 
        "closed": "üü¢"
    }
    
    start_idx = page * per_page
    end_idx = start_idx + per_page
    tickets_page = tickets[start_idx:end_idx]
    
    for ticket in tickets_page:
        icon = status_icons.get(ticket.status, "‚ö™")
        text = f"{icon} #{ticket.ticket_number} - {ticket.user.full_name[:20]}"
        builder.row(InlineKeyboardButton(
            text=text,
            callback_data=f"ticket:{ticket.id}"
        ))
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏—è
    nav_buttons = []
    total_pages = (len(tickets) + per_page - 1) // per_page
    
    if page > 0:
        nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"tickets_page:{page-1}"))
    
    nav_buttons.append(InlineKeyboardButton(text=f"{page+1}/{total_pages}", callback_data="current_page"))
    
    if page < total_pages - 1:
        nav_buttons.append(InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"tickets_page:{page+1}"))
    
    if nav_buttons:
        builder.row(*nav_buttons)
    
    # –§–∏–ª—å—Ç—Ä—ã –ø–æ —Å—Ç–∞—Ç—É—Å—É
    builder.row(
        InlineKeyboardButton(text="üü° –û—Ç–∫—Ä—ã—Ç—ã–µ", callback_data="filter:open"),
        InlineKeyboardButton(text="üîµ –í —Ä–∞–±–æ—Ç–µ", callback_data="filter:in_progress")
    )
    builder.row(
        InlineKeyboardButton(text="üü¢ –ó–∞–∫—Ä—ã—Ç—ã–µ", callback_data="filter:closed"),
        InlineKeyboardButton(text="üìã –í—Å–µ", callback_data="filter:all")
    )
    
    builder.row(InlineKeyboardButton(text="üîô –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin_menu"))
    
    return builder.as_markup()


def ticket_details_keyboard(ticket: SupportTicket, admin_id: int) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º —Ç–∏–∫–µ—Ç–æ–º"""
    builder = InlineKeyboardBuilder()
    
    # –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Ç–∏–∫–µ—Ç
    builder.row(InlineKeyboardButton(
        text="üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å",
        callback_data=f"respond:{ticket.id}"
    ))
    
    # –î–µ–π—Å—Ç–≤–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
    if ticket.status == "open":
        builder.row(
            InlineKeyboardButton(text="üìù –í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É", callback_data=f"assign:{ticket.id}"),
            InlineKeyboardButton(text="‚úÖ –ó–∞–∫—Ä—ã—Ç—å", callback_data=f"close:{ticket.id}")
        )
    elif ticket.status == "in_progress":
        if ticket.assigned_admin_id == admin_id:
            builder.row(InlineKeyboardButton(text="‚úÖ –ó–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç", callback_data=f"close:{ticket.id}"))
        builder.row(InlineKeyboardButton(text="üîÑ –ü–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–∏—Ç—å", callback_data=f"reassign:{ticket.id}"))
    elif ticket.status == "closed":
        builder.row(InlineKeyboardButton(text="üîÑ –ü–µ—Ä–µ–æ—Ç–∫—Ä—ã—Ç—å", callback_data=f"reopen:{ticket.id}"))
    

    
    builder.row(InlineKeyboardButton(text="üîô –ö —Å–ø–∏—Å–∫—É —Ç–∏–∫–µ—Ç–æ–≤", callback_data="admin_support"))
    
    return builder.as_markup()


@router.callback_query(F.data == "admin_support")
async def show_support_tickets(callback: CallbackQuery, session: AsyncSession, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ç–æ–≤ –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
    try:
        support_service = SupportService(session)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–∏–∫–µ—Ç—ã
        tickets = await support_service.get_admin_tickets(limit=100)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        open_count = len([t for t in tickets if t.status == "open"])
        in_progress_count = len([t for t in tickets if t.status == "in_progress"])
        closed_count = len([t for t in tickets if t.status == "closed"])
        
        text = f"""
üé´ <b>–¢–∏–∫–µ—Ç—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏</b>

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
üü° –û—Ç–∫—Ä—ã—Ç—ã–µ: {open_count}
üîµ –í —Ä–∞–±–æ—Ç–µ: {in_progress_count}
üü¢ –ó–∞–∫—Ä—ã—Ç—ã–µ: {closed_count}
üìù –í—Å–µ–≥–æ: {len(tickets)}

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–∫–µ—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:
"""
        
        await state.set_state(SupportManagementStates.viewing_support_tickets)
        
        if callback.message:
            await callback.message.edit_text(
                text,
                reply_markup=support_tickets_keyboard(tickets),
                parse_mode="HTML"
            )
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Ç–∏–∫–µ—Ç–æ–≤ –ø–æ–¥–¥–µ—Ä–∂–∫–∏: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@router.callback_query(F.data.startswith("filter:"))
async def filter_support_tickets(callback: CallbackQuery, session: AsyncSession):
    """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–∏–∫–µ—Ç–æ–≤ –ø–æ —Å—Ç–∞—Ç—É—Å—É"""
    try:
        status = callback.data.split(":")[1]
        support_service = SupportService(session)
        
        if status == "all":
            tickets = await support_service.get_admin_tickets(limit=100)
        else:
            tickets = await support_service.get_tickets_by_status(status, limit=100)
        
        status_names = {
            "open": "–û—Ç–∫—Ä—ã—Ç—ã–µ",
            "in_progress": "–í —Ä–∞–±–æ—Ç–µ", 
            "closed": "–ó–∞–∫—Ä—ã—Ç—ã–µ",
            "all": "–í—Å–µ"
        }
        
        text = f"""
üé´ <b>–¢–∏–∫–µ—Ç—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏ - {status_names.get(status, status)}</b>

üìù –ù–∞–π–¥–µ–Ω–æ —Ç–∏–∫–µ—Ç–æ–≤: {len(tickets)}

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–∫–µ—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:
"""
        
        if callback.message:
            await callback.message.edit_text(
                text,
                reply_markup=support_tickets_keyboard(tickets),
                parse_mode="HTML"
            )
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ç–∏–∫–µ—Ç–æ–≤: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@router.callback_query(F.data.startswith("ticket:"))
async def show_ticket_details(callback: CallbackQuery, session: AsyncSession, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ —Ç–∏–∫–µ—Ç–∞"""
    try:
        ticket_id = int(callback.data.split(":")[1])
        support_service = SupportService(session)
        
        ticket = await support_service.get_ticket_by_id(ticket_id)
        if not ticket:
            await callback.answer("–¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–∫–µ—Ç–µ
        status_icons = {
            "open": "üü° –û—Ç–∫—Ä—ã—Ç",
            "in_progress": "üîµ –í —Ä–∞–±–æ—Ç–µ",
            "closed": "üü¢ –ó–∞–∫—Ä—ã—Ç"
        }
        
        priority_icons = {
            "low": "üü¢ –ù–∏–∑–∫–∏–π",
            "normal": "üü° –û–±—ã—á–Ω—ã–π",
            "high": "üü† –í—ã—Å–æ–∫–∏–π",
            "urgent": "üî¥ –°—Ä–æ—á–Ω—ã–π"
        }
        
        assigned_text = "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω"
        if ticket.assigned_admin:
            assigned_text = f"@{ticket.assigned_admin.username or 'Admin'}"
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç—ã
        user_responses = len([r for r in ticket.responses if r.sender_type == "user"])
        admin_responses = len([r for r in ticket.responses if r.sender_type == "admin" and not r.is_internal])
        
        text = f"""
üé´ <b>–¢–∏–∫–µ—Ç #{ticket.ticket_number}</b>

üìä <b>–°—Ç–∞—Ç—É—Å:</b> {status_icons.get(ticket.status, ticket.status)}
üî• <b>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</b> {priority_icons.get(ticket.priority, ticket.priority)}
üë®‚Äçüíº <b>–ù–∞–∑–Ω–∞—á–µ–Ω:</b> {assigned_text}

üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b>
‚Ä¢ –ò–º—è: {ticket.user.full_name}
‚Ä¢ ID: <code>{ticket.user_id}</code>
‚Ä¢ Username: @{ticket.user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}

üí¨ <b>–ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:</b>
{ticket.initial_message}

üìà <b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b>
‚Ä¢ –û—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_responses}
‚Ä¢ –û—Ç–≤–µ—Ç–æ–≤ –ø–æ–¥–¥–µ—Ä–∂–∫–∏: {admin_responses}

üïê <b>–í—Ä–µ–º—è:</b>
‚Ä¢ –°–æ–∑–¥–∞–Ω: {ticket.created_at.strftime('%d.%m.%Y %H:%M')}
‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω: {ticket.updated_at.strftime('%d.%m.%Y %H:%M') if ticket.updated_at else '–ù–µ—Ç'}
{f"‚Ä¢ –ó–∞–∫—Ä—ã—Ç: {ticket.closed_at.strftime('%d.%m.%Y %H:%M')}" if ticket.closed_at else ""}
"""
        
        await state.set_state(SupportManagementStates.viewing_ticket_details)
        await state.update_data(current_ticket_id=ticket_id)
        
        if callback.message:
            try:
                await callback.message.edit_text(
                    text,
                    reply_markup=ticket_details_keyboard(ticket, callback.from_user.id),
                    parse_mode="HTML"
                )
            except Exception as edit_error:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ: {edit_error}")
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                from aiogram import Bot
                bot = Bot.get_current()
                await bot.send_message(
                    chat_id=callback.from_user.id,
                    text=text,
                    reply_markup=ticket_details_keyboard(ticket, callback.from_user.id),
                    parse_mode="HTML"
                )
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –¥–µ—Ç–∞–ª–µ–π —Ç–∏–∫–µ—Ç–∞: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@router.callback_query(F.data.startswith("respond:"))
async def start_response(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ —Ç–∏–∫–µ—Ç"""
    try:
        ticket_id = int(callback.data.split(":")[1])
        
        await state.set_state(SupportManagementStates.responding_to_support)
        await state.update_data(responding_to_ticket=ticket_id)
        
        text = """
üí¨ <b>–û—Ç–≤–µ—Ç –Ω–∞ —Ç–∏–∫–µ—Ç</b>

–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. –°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –µ–º—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.

<i>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ç–≤–µ—Ç–æ–º:</i>
"""
        
        cancel_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"ticket:{ticket_id}")]
        ])
        
        if callback.message:
            await callback.message.edit_text(
                text,
                reply_markup=cancel_keyboard,
                parse_mode="HTML"
            )
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –æ—Ç–≤–µ—Ç–∞: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@router.message(SupportManagementStates.responding_to_support)
async def handle_support_response(message: Message, session: AsyncSession, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    try:
        if not message.text:
            await message.answer("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            return
        
        data = await state.get_data()
        ticket_id = data.get("responding_to_ticket")
        
        if not ticket_id:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: —Ç–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await state.clear()
            return
        
        support_service = SupportService(session)
        notification_service = NotificationService(bot, session)
        admin_service = AdminService(session)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–∫–µ—Ç
        ticket = await support_service.get_ticket_by_id(ticket_id)
        if not ticket:
            await message.answer("‚ùå –¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await state.clear()
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        response = await support_service.add_response(
            ticket_id=ticket_id,
            sender_id=message.from_user.id,
            message=message.text,
            sender_type="admin"
        )
        
        if not response:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç")
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "–≤ —Ä–∞–±–æ—Ç–µ" –µ—Å–ª–∏ –±—ã–ª "–æ—Ç–∫—Ä—ã—Ç"
        if ticket.status == "open":
            await support_service.update_ticket_status(
                ticket_id=ticket_id,
                status="in_progress",
                admin_id=message.from_user.id
            )
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–µ
        admin = await admin_service.get_admin_by_user_id(message.from_user.id)
        admin_name = admin.username if admin and admin.username else "Support"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await notification_service.notify_user_of_response(
            ticket=ticket,
            response_message=message.text,
            admin_name=admin_name
        )
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        await message.answer(
            f"‚úÖ <b>–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!</b>\\n\\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {ticket.user.full_name} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤–∞—à –æ—Ç–≤–µ—Ç –ø–æ —Ç–∏–∫–µ—Ç—É #{ticket.ticket_number}.",
            parse_mode="HTML"
        )
        
        await state.clear()
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –¥–µ—Ç–∞–ª—è–º —Ç–∏–∫–µ—Ç–∞
        try:
            # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π callback –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π —Ç–∏–∫–µ—Ç–∞
            fake_callback = type('FakeCallback', (), {
                'data': f'ticket:{ticket_id}',
                'from_user': message.from_user,
                'message': None,
                'answer': lambda text="": None
            })()
            
            await show_ticket_details(
                callback=fake_callback,
                session=session,
                state=state
            )
        except Exception as detail_error:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π —Ç–∏–∫–µ—Ç–∞: {detail_error}")
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –¥–µ—Ç–∞–ª–∏, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            pass
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞")
        await state.clear()


@router.callback_query(F.data.startswith("assign:"))
async def assign_ticket(callback: CallbackQuery, session: AsyncSession):
    """–ù–∞–∑–Ω–∞—á–∏—Ç—å —Ç–∏–∫–µ—Ç –Ω–∞ —Å–µ–±—è"""
    try:
        ticket_id = int(callback.data.split(":")[1])
        support_service = SupportService(session)
        
        success = await support_service.assign_ticket(ticket_id, callback.from_user.id)
        
        if success:
            await callback.answer("‚úÖ –¢–∏–∫–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–∞ –≤–∞—Å")
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏ —Ç–∏–∫–µ—Ç–∞
            try:
                ticket = await support_service.get_ticket_by_id(ticket_id)
                if ticket and callback.message:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º–∏ –¥–µ—Ç–∞–ª—è–º–∏
                    text = f"‚úÖ –¢–∏–∫–µ—Ç #{ticket.ticket_number} –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–∞ –≤–∞—Å!"
                    await callback.bot.send_message(
                        chat_id=callback.from_user.id,
                        text=text
                    )
            except Exception as update_error:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {update_error}")
        else:
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–∑–Ω–∞—á–∏—Ç—å —Ç–∏–∫–µ—Ç")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ —Ç–∏–∫–µ—Ç–∞: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@router.callback_query(F.data.startswith("close:"))
async def close_ticket(callback: CallbackQuery, session: AsyncSession):
    """–ó–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç"""
    try:
        ticket_id = int(callback.data.split(":")[1])
        support_service = SupportService(session)
        
        success = await support_service.close_ticket(ticket_id, callback.from_user.id)
        
        if success:
            await callback.answer("‚úÖ –¢–∏–∫–µ—Ç –∑–∞–∫—Ä—ã—Ç")
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            try:
                ticket = await support_service.get_ticket_by_id(ticket_id)
                if ticket:
                    text = f"‚úÖ –¢–∏–∫–µ—Ç #{ticket.ticket_number} –∑–∞–∫—Ä—ã—Ç!"
                    await callback.bot.send_message(
                        chat_id=callback.from_user.id,
                        text=text
                    )
            except Exception as update_error:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {update_error}")
        else:
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Ç–∏–∫–µ—Ç–∞: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@router.callback_query(F.data.startswith("reopen:"))
async def reopen_ticket(callback: CallbackQuery, session: AsyncSession):
    """–ü–µ—Ä–µ–æ—Ç–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç"""
    try:
        ticket_id = int(callback.data.split(":")[1])
        support_service = SupportService(session)
        
        success = await support_service.reopen_ticket(ticket_id)
        
        if success:
            await callback.answer("‚úÖ –¢–∏–∫–µ—Ç –ø–µ—Ä–µ–æ—Ç–∫—Ä—ã—Ç")
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            try:
                ticket = await support_service.get_ticket_by_id(ticket_id)
                if ticket:
                    text = f"‚úÖ –¢–∏–∫–µ—Ç #{ticket.ticket_number} –ø–µ—Ä–µ–æ—Ç–∫—Ä—ã—Ç!"
                    await callback.bot.send_message(
                        chat_id=callback.from_user.id,
                        text=text
                    )
            except Exception as update_error:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {update_error}")
        else:
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–æ—Ç–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ç–∏–∫–µ—Ç–∞: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")