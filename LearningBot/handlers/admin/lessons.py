"""
–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—Ä–æ–∫–∞–º–∏
"""
import logging
from datetime import datetime, timezone
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession

from services.lesson import LessonService
from services.admin import AdminService
from database.models import Lesson
from keyboards.admin import (
    lessons_list_keyboard,
    lesson_edit_keyboard,
    lesson_type_keyboard,
    confirm_action_keyboard,
    confirm_lesson_delete_keyboard,
    lessons_management_keyboard,
    back_to_admin_keyboard
)
from states.admin import LessonManagementStates
from middlewares.admin import AdminOnlyMiddleware

logger = logging.getLogger(__name__)

# –†–æ—É—Ç–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—Ä–æ–∫–∞–º–∏
router = Router()
router.message.middleware(AdminOnlyMiddleware())
router.callback_query.middleware(AdminOnlyMiddleware())


@router.callback_query(F.data == "admin_lessons_list")
async def show_lessons_list(callback: CallbackQuery, session: AsyncSession):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É—Ä–æ–∫–æ–≤"""
    try:
        lesson_service = LessonService(session)
        
        # –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–∫–∏ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
        lessons, total_lessons = await lesson_service.get_lessons_paginated(
            page=0, 
            per_page=10,
            include_inactive=True  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —É—Ä–æ–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞
        )
        
        if not lessons:
            await callback.message.edit_text(
                "üìö <b>–°–ø–∏—Å–æ–∫ —É—Ä–æ–∫–æ–≤ –ø—É—Å—Ç</b>\n\n–ù–∞—á–Ω–∏—Ç–µ —Å —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ —É—Ä–æ–∫–∞!",
                reply_markup=back_to_admin_keyboard()
            )
            await callback.answer()
            return
        
        lessons_text = f"""
üìö <b>–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É—Ä–æ–∫–æ–≤</b>

üìä <b>–í—Å–µ–≥–æ —É—Ä–æ–∫–æ–≤:</b> {total_lessons}

üìã <b>–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:</b>
"""
        
        await callback.message.edit_text(
            lessons_text,
            reply_markup=lessons_list_keyboard(lessons, page=0)
        )
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å–ø–∏—Å–∫–∞ —É—Ä–æ–∫–æ–≤: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ —É—Ä–æ–∫–æ–≤.")


@router.callback_query(F.data.startswith("admin_lessons_page:"))
async def navigate_lessons_pages(callback: CallbackQuery, session: AsyncSession):
    """–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º —É—Ä–æ–∫–æ–≤"""
    try:
        page = int(callback.data.split(":")[1])
        lesson_service = LessonService(session)
        
        lessons, total_lessons = await lesson_service.get_lessons_paginated(
            page=page, 
            per_page=10,
            include_inactive=True
        )
        
        if not lessons and page > 0:
            # –ï—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—É—Å—Ç–∞—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é
            lessons, total_lessons = await lesson_service.get_lessons_paginated(
                page=0, 
                per_page=10,
                include_inactive=True
            )
            page = 0
        
        lessons_text = f"""
üìö <b>–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É—Ä–æ–∫–æ–≤</b>

üìä <b>–í—Å–µ–≥–æ —É—Ä–æ–∫–æ–≤:</b> {total_lessons}
üìÑ <b>–°—Ç—Ä–∞–Ω–∏—Ü–∞:</b> {page + 1}

üìã <b>–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:</b>
"""
        
        await callback.message.edit_text(
            lessons_text,
            reply_markup=lessons_list_keyboard(lessons, page=page)
        )
        await callback.answer()
        
    except (ValueError, IndexError):
        await callback.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —É—Ä–æ–∫–∞–º: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã.")


@router.callback_query(F.data.startswith("admin_edit_lesson:"))
async def edit_lesson_menu(callback: CallbackQuery, session: AsyncSession):
    """–ú–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —É—Ä–æ–∫–∞"""
    try:
        lesson_id = int(callback.data.split(":")[1])
        
        lesson_service = LessonService(session)
        lesson = await lesson_service.get_lesson_by_id(lesson_id, include_inactive=True)
        
        if not lesson:
            await callback.answer("‚ùå –£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        status_text = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if lesson.is_active else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
        type_text = "üéÅ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π" if lesson.is_free else f"üí∞ {lesson.price_stars} ‚≠ê"
        
        lesson_text = f"""
üìö <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞</b>

<b>üìñ –ù–∞–∑–≤–∞–Ω–∏–µ:</b> {lesson.title}

<b>üìù –û–ø–∏—Å–∞–Ω–∏–µ:</b> {lesson.description[:100]}{'...' if len(lesson.description) > 100 else ''}

<b>üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {type_text}
<b>üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {lesson.category or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}
<b>üîÑ –°—Ç–∞—Ç—É—Å:</b> {status_text}
<b>üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä—ã:</b> {lesson.views_count}

<b>üé¨ –¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞:</b> {lesson.content_type.upper() if lesson.content_type else '–ù–µ —É–∫–∞–∑–∞–Ω'}

–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:
"""
        
        await callback.message.edit_text(
            lesson_text,
            reply_markup=lesson_edit_keyboard(lesson_id)
        )
        await callback.answer()
        
    except (ValueError, IndexError):
        await callback.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —É—Ä–æ–∫–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —É—Ä–æ–∫–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —É—Ä–æ–∫–∞.")


@router.callback_query(F.data == "admin_create_lesson")
async def start_lesson_creation(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —É—Ä–æ–∫–∞"""
    try:
        print(f"\n==== START LESSON CREATION ====")
        print(f"Setting FSM state to creating_lesson")
        
        await state.set_state(LessonManagementStates.creating_lesson)
        await state.update_data(step="title")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª–æ—Å—å
        current_state = await state.get_state()
        data = await state.get_data()
        print(f"FSM state set to: {current_state}")
        print(f"FSM data: {data}")
        print(f"==============================\n")
        
        create_text = """
‚ûï <b>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —É—Ä–æ–∫–∞</b>

üìù <b>–®–∞–≥ 1 –∏–∑ 6:</b> –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞

–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É—Ä–æ–∫–∞ (–º–∞–∫—Å–∏–º—É–º 200 —Å–∏–º–≤–æ–ª–æ–≤):
"""
        
        await callback.message.edit_text(
            create_text,
            reply_markup=back_to_admin_keyboard()
        )
        await callback.answer("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —É—Ä–æ–∫–∞: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —É—Ä–æ–∫–∞.")


@router.message(LessonManagementStates.creating_lesson, F.content_type == "text")
async def process_lesson_creation(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É—Ä–æ–∫–∞ –ø–æ —à–∞–≥–∞–º"""
    print(f"\n==== PROCESS LESSON CREATION ====")
    print(f"Message content_type: {message.content_type}")
    print(f"Message text: {message.text}")
    
    try:
        data = await state.get_data()
        step = data.get("step")
        print(f"Current step: {step}")
        print(f"FSM data: {data}")
        print(f"=================================\n")
        
        if step == "title":
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
            if len(message.text) > 200:
                await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 200 —Å–∏–º–≤–æ–ª–æ–≤.")
                return
            
            await state.update_data(title=message.text, step="description")
            
            await message.answer("""
üìù <b>–®–∞–≥ 2 –∏–∑ 6:</b> –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–∞

–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–∞ (–º–∞–∫—Å–∏–º—É–º 1000 —Å–∏–º–≤–æ–ª–æ–≤):
""")
        
        elif step == "description":
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
            if len(message.text) > 1000:
                await message.answer("‚ùå –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 1000 —Å–∏–º–≤–æ–ª–æ–≤.")
                return
            
            await state.update_data(description=message.text, step="price")
            
            await message.answer("""
üí∞ <b>–®–∞–≥ 3 –∏–∑ 6:</b> –£–∫–∞–∂–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —É—Ä–æ–∫–∞

–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ Telegram (–∏–ª–∏ 0 –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ —É—Ä–æ–∫–∞):
""")
        
        elif step == "price":
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–µ–Ω—É
            try:
                price = int(message.text)
                if price < 0:
                    await message.answer("‚ùå –¶–µ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π.")
                    return
                
                await state.update_data(price_stars=price, step="category")
                
                await message.answer("""
üìÅ <b>–®–∞–≥ 4 –∏–∑ 6:</b> –£–∫–∞–∂–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —É—Ä–æ–∫–∞

–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ", "–î–∏–∑–∞–π–Ω", "–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥"):
""")
                
            except ValueError:
                await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
                return
        
        elif step == "category":
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —Å–æ–∑–¥–∞–Ω–∏–µ–º
            from services.category import CategoryService
            
            category_service = CategoryService(session)
            category_name = message.text.strip()
            
            # –ù–∞—Ö–æ–¥–∏–º –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            category, created = await category_service.find_or_create_category(category_name)
            
            if created:
                category_status = f"üÜï <b>–ù–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∞:</b> {category.name}"
            else:
                category_status = f"‚úÖ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–∞–π–¥–µ–Ω–∞:</b> {category.name}"
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –µ—ë –Ω–∞–∑–≤–∞–Ω–∏–µ
            await state.update_data(
                category_id=category.id, 
                category_name=category.name, 
                step="content_type"
            )
            
            response_text = f"""
{category_status}

üé¨ <b>–®–∞–≥ 5 –∏–∑ 6:</b> –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —É—Ä–æ–∫–∞
"""
            
            await message.answer(
                response_text,
                reply_markup=lesson_type_keyboard()
            )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–∑–¥–∞–Ω–∏—è —É—Ä–æ–∫–∞: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —É—Ä–æ–∫–∞.")


@router.callback_query(F.data.startswith("lesson_type:"), LessonManagementStates.creating_lesson)
async def select_lesson_type(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–í—ã–±–æ—Ä —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —É—Ä–æ–∫–∞"""
    try:
        content_type = callback.data.split(":")[1]
        print(f"\n==== SELECT LESSON TYPE ====")
        print(f"Selected content_type: {content_type}")
        print(f"Setting step to 'content'")
        
        await state.update_data(content_type=content_type, step="content")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª–æ—Å—å
        data = await state.get_data()
        print(f"FSM data after update: {data}")
        current_state = await state.get_state()
        print(f"Current FSM state: {current_state}")
        print(f"============================\n")
        
        type_names = {
            "video": "üé• –í–∏–¥–µ–æ",
            "photo": "üì∑ –§–æ—Ç–æ",
            "text": "üìù –¢–µ–∫—Å—Ç"
        }
        
        type_name = type_names.get(content_type, content_type)
        
        if content_type == "text":
            # –î–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —É—Ä–æ–∫–æ–≤ –Ω–µ –Ω—É–∂–µ–Ω –º–µ–¥–∏–∞ —Ñ–∞–π–ª
            await state.update_data(file_id=None)  # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –º–µ–¥–∏–∞ –Ω–µ—Ç
            await finalize_lesson_creation(callback, state, session)
        else:
            await callback.message.edit_text(f"""
üì§ <b>–®–∞–≥ 6 –∏–∑ 6:</b> –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∫–æ–Ω—Ç–µ–Ω—Ç —É—Ä–æ–∫–∞

–í—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø: {type_name}

–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–µ–¥–∏–∞-—Ñ–∞–π–ª —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–∏–ø–∞:
""")
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ç–∏–ø–∞ —É—Ä–æ–∫–∞: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ç–∏–ø–∞.")


async def finalize_lesson_creation(callback_or_message, state: FSMContext, session: AsyncSession):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —É—Ä–æ–∫–∞"""
    try:
        data = await state.get_data()
        
        # –°–æ–∑–¥–∞–µ–º —É—Ä–æ–∫ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
        lesson_service = LessonService(session)
        
        lesson_data = {
            'title': data["title"],
            'description': data["description"],
            'price_stars': data["price_stars"],
            'content_type': data["content_type"],
            'file_id': data.get("file_id"),
            'duration': data.get("duration"),
            'category': data.get("category_name") or "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
            'category_id': data.get("category_id"),  # –î–æ–±–∞–≤–ª—è–µ–º category_id
            'is_active': True
        }
        
        new_lesson = await lesson_service.create_lesson(lesson_data)
        
        await state.clear()
        
        if not new_lesson:
            error_msg = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —É—Ä–æ–∫–∞"
            if hasattr(callback_or_message, 'message'):
                await callback_or_message.message.edit_text(error_msg)
            else:
                await callback_or_message.answer(error_msg)
            return
        
        success_text = f"""
‚úÖ <b>–£—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!</b>

üìö <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {data["title"]}
üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {"üéÅ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π" if data["price_stars"] == 0 else f"{data['price_stars']} ‚≠ê"}
üìÅ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {data.get("category_name", "–ù–µ —É–∫–∞–∑–∞–Ω–∞")}
üé¨ <b>–¢–∏–ø:</b> {data["content_type"]}

–£—Ä–æ–∫ –∞–∫—Ç–∏–≤–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!
"""
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        if hasattr(callback_or_message, 'message'):
            # CallbackQuery
            await callback_or_message.message.edit_text(
                success_text,
                reply_markup=back_to_admin_keyboard()
            )
        else:
            # Message
            await callback_or_message.answer(
                success_text,
                reply_markup=back_to_admin_keyboard()
            )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è —É—Ä–æ–∫–∞: {e}")
        if hasattr(callback_or_message, 'message'):
            await callback_or_message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —É—Ä–æ–∫–∞.")
        else:
            await callback_or_message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —É—Ä–æ–∫–∞.")


@router.message(LessonManagementStates.creating_lesson, F.content_type.in_(["video", "photo"]))
async def process_lesson_media(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–¥–∏–∞ –¥–ª—è —É—Ä–æ–∫–∞"""
    print(f"\n\n==== MEDIA HANDLER CALLED ====")
    print(f"message.content_type: {message.content_type}")
    print(f"message.from_user.id: {message.from_user.id if message.from_user else 'None'}")
    print(f"================================\n")
    
    try:
        data = await state.get_data()
        logger.error(f"üöÄ MEDIA HANDLER TRIGGERED: content_type={message.content_type}, step={data.get('step')}, expected_content={data.get('content_type')}, user_id={message.from_user.id}")
        print(f"üöÄ MEDIA HANDLER TRIGGERED: content_type={message.content_type}, step={data.get('step')}, expected_content={data.get('content_type')}, user_id={message.from_user.id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —à–∞–≥–µ
        if data.get("step") != "content":
            logger.error(f"MEDIA UPLOAD: Wrong step. Expected 'content', got '{data.get('step')}'")
            await message.answer(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —à–∞–≥. –û–∂–∏–¥–∞–µ—Ç—Å—è 'content', –ø–æ–ª—É—á–µ–Ω '{data.get('step')}'")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º file_id –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        file_id = None
        duration = None
        expected_content_type = data.get("content_type")
        
        logger.error(f"MEDIA UPLOAD: Expected={expected_content_type}, Received={message.content_type}")
        
        if expected_content_type == "video" and message.video:
            file_id = message.video.file_id
            duration = message.video.duration
            logger.error(f"MEDIA UPLOAD: Video processed - file_id={file_id}, duration={duration}")
        elif expected_content_type == "photo" and message.photo:
            file_id = message.photo[-1].file_id  # –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ
            logger.error(f"MEDIA UPLOAD: Photo processed - file_id={file_id}")
        else:
            logger.error(f"MEDIA UPLOAD: Type mismatch - expected={expected_content_type}, received={message.content_type}")
            logger.error(f"MEDIA UPLOAD: message.video exists: {message.video is not None}")
            logger.error(f"MEDIA UPLOAD: message.photo exists: {message.photo is not None}")
        
        if not file_id:
            type_names = {
                "video": "–≤–∏–¥–µ–æ",
                "photo": "—Ñ–æ—Ç–æ"
            }
            error_msg = f"‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–µ–¥–∏–∞-—Ñ–∞–π–ª —Ç–∏–ø–∞ {type_names.get(expected_content_type, expected_content_type)}"
            logger.error(f"MEDIA UPLOAD: {error_msg}")
            await message.answer(error_msg)
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –º–µ–¥–∏–∞
        await state.update_data(file_id=file_id, duration=duration)
        logger.error(f"MEDIA UPLOAD: Data saved, calling finalize_lesson_creation")
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —É—Ä–æ–∫–∞
        await finalize_lesson_creation(message, state, session)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–µ–¥–∏–∞ —É—Ä–æ–∫–∞: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–¥–∏–∞.")


@router.callback_query(F.data.startswith("edit_lesson_title:"))
async def edit_lesson_title(callback: CallbackQuery, session: AsyncSession, state: FSMContext):
    """–ù–∞—á–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —É—Ä–æ–∫–∞"""
    try:
        lesson_id = int(callback.data.split(":")[1])
        await state.set_state(LessonManagementStates.editing_lesson_title)
        await state.update_data(editing_lesson_id=lesson_id)
        
        lesson_service = LessonService(session)
        lesson = await lesson_service.get_lesson_by_id(lesson_id, include_inactive=True)
        
        edit_text = f"""
‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —É—Ä–æ–∫–∞</b>

üìù <b>–¢–µ–∫—É—â–µ–µ:</b> {lesson.title}

–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–º–∞–∫—Å 200 —Å–∏–º–≤.):
"""
        
        await callback.message.edit_text(edit_text, reply_markup=back_to_admin_keyboard())
        await callback.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ")
    except Exception as e:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞")


@router.callback_query(F.data.startswith("edit_lesson_description:"))
async def edit_lesson_description(callback: CallbackQuery, session: AsyncSession, state: FSMContext):
    """–ù–∞—á–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è —É—Ä–æ–∫–∞"""
    try:
        lesson_id = int(callback.data.split(":")[1])
        await state.set_state(LessonManagementStates.editing_lesson_description)
        await state.update_data(editing_lesson_id=lesson_id)
        
        lesson_service = LessonService(session)
        lesson = await lesson_service.get_lesson_by_id(lesson_id, include_inactive=True)
        
        edit_text = f"""
‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è —É—Ä–æ–∫–∞</b>

üìù <b>–¢–µ–∫—É—â–µ–µ:</b> {lesson.description if lesson.description else '–ù–µ –∑–∞–¥–∞–Ω–æ'}

–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–º–∞–∫—Å 1000 —Å–∏–º–≤.):
"""
        
        await callback.message.edit_text(edit_text, reply_markup=back_to_admin_keyboard())
        await callback.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ")
    except Exception as e:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞")


@router.message(LessonManagementStates.editing_lesson_title)
async def process_lesson_title_edit(message: Message, session: AsyncSession, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è"""
    try:
        if not message.text or len(message.text) > 200:
            await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å 200 —Å–∏–º–≤.")
            return
        
        data = await state.get_data()
        lesson_id = data.get("editing_lesson_id")
        
        if not lesson_id:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: ID —É—Ä–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await state.clear()
            return
        
        lesson_service = LessonService(session)
        lesson = await lesson_service.get_lesson_by_id(lesson_id, include_inactive=True)
        
        if not lesson:
            await message.answer("‚ùå –£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await state.clear()
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
        lesson.title = message.text
        lesson.updated_at = datetime.now(timezone.utc)
        
        await session.commit()
        
        success_text = f"""
‚úÖ <b>–ù–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ</b>

<b>üìú –ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:</b> {message.text}

–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!
"""
        
        await message.answer(
            success_text,
            reply_markup=back_to_admin_keyboard()
        )
        
        await state.clear()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏")
        await state.clear()


@router.message(LessonManagementStates.editing_lesson_description)
async def process_lesson_description_edit(message: Message, session: AsyncSession, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è"""
    try:
        if not message.text or len(message.text) > 1000:
            await message.answer("‚ùå –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å 1000 —Å–∏–º–≤.")
            return
        
        data = await state.get_data()
        lesson_id = data.get("editing_lesson_id")
        
        lesson_service = LessonService(session)
        success = await lesson_service.update_lesson_description(lesson_id, message.text)
        
        if success:
            await message.answer("‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
        
        await state.clear()
        
    except Exception as e:
        await message.answer("‚ùå –û—à–∏–±–∫–∞")


@router.callback_query(F.data.startswith("delete_lesson:"))
async def confirm_lesson_deletion(callback: CallbackQuery, session: AsyncSession):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —É—Ä–æ–∫–∞"""
    try:
        lesson_id = int(callback.data.split(":")[1])
        
        lesson_service = LessonService(session)
        lesson = await lesson_service.get_lesson_by_id(lesson_id, include_inactive=True)
        
        if not lesson:
            await callback.answer("‚ùå –£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        confirmation_text = f"""
‚ö†Ô∏è <b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ</b>

üìö <b>–£—Ä–æ–∫:</b> {lesson.title}
üí∞ <b>–¶–µ–Ω–∞:</b> {'üéÅ –ë–µ—Å–ø–ª–∞—Ç–Ω–æ' if lesson.is_free else f'‚≠ê {lesson.price_stars}'}
üìà <b>–ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤:</b> {lesson.views_count}

‚ùó <b>–í–Ω–∏–º–∞–Ω–∏–µ:</b> –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!
–£—Ä–æ–∫ –±—É–¥–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª—ë–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.

–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —É—Ä–æ–∫?
"""
        
        from keyboards.admin import confirm_lesson_delete_keyboard
        
        await callback.message.edit_text(
            confirmation_text,
            reply_markup=confirm_lesson_delete_keyboard(lesson_id)
        )
        await callback.answer()
        
    except (ValueError, IndexError):
        await callback.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —É—Ä–æ–∫–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞")


@router.callback_query(F.data.startswith("confirm_delete_lesson:"))
async def delete_lesson_confirmed(callback: CallbackQuery, session: AsyncSession):
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ —É—Ä–æ–∫–∞ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    try:
        lesson_id = int(callback.data.split(":")[1])
        
        lesson_service = LessonService(session)
        lesson = await lesson_service.get_lesson_by_id(lesson_id, include_inactive=True)
        
        if not lesson:
            await callback.answer("‚ùå –£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        lesson_title = lesson.title  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
        
        # –£–¥–∞–ª—è–µ–º —É—Ä–æ–∫ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
        success = await lesson_service.delete_lesson(lesson_id)
        
        if success:
            success_text = f"""
‚úÖ <b>–£—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω</b>

üìö <b>–£–¥–∞–ª—ë–Ω–Ω—ã–π —É—Ä–æ–∫:</b> {lesson_title}

‚ú® –£—Ä–æ–∫ –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª—ë–Ω –∏–∑ —Å–∏—Å—Ç–µ–º—ã.
–í—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–∞–∫–∂–µ —É–¥–∞–ª–µ–Ω—ã.
"""
            
            from keyboards.admin import lessons_management_keyboard
            
            await callback.message.edit_text(
                success_text,
                reply_markup=lessons_management_keyboard()
            )
            await callback.answer("‚úÖ –£—Ä–æ–∫ —É–¥–∞–ª—ë–Ω")
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏")
        
    except (ValueError, IndexError):
        await callback.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —É—Ä–æ–∫–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É—Ä–æ–∫–∞: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏")


# –í–ê–ñ–ù–û: –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ü–û–°–õ–ï–î–ù–ò–ú –≤ —Ñ–∞–π–ª–µ!
@router.message(LessonManagementStates.creating_lesson)
async def debug_lesson_creation_messages(message: Message, state: FSMContext):
    """–û—Ç–ª–∞–¥–æ—á–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —É—Ä–æ–∫–∞"""
    print(f"\n\n==== DEBUG HANDLER CALLED ====")
    print(f"message.content_type: {message.content_type}")
    print(f"message.from_user.id: {message.from_user.id if message.from_user else 'None'}")
    
    data = await state.get_data()
    print(f"FSM data: {data}")
    print(f"================================\n")
    
    logger.error(f"üö® UNHANDLED MESSAGE in creating_lesson: content_type={message.content_type}, step={data.get('step')}, expected_content={data.get('content_type')}, user_id={message.from_user.id}")
    print(f"üö® UNHANDLED MESSAGE in creating_lesson: content_type={message.content_type}, step={data.get('step')}, expected_content={data.get('content_type')}, user_id={message.from_user.id}")
    
    if data.get("step") == "content":
        content_type = data.get("content_type")
        if content_type in ["video", "photo"]:
            await message.answer(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞: {message.content_type}. –û–∂–∏–¥–∞–µ—Ç—Å—è: {content_type}")
        else:
            await message.answer(f"‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ {content_type}-—Ñ–∞–π–ª –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —É—Ä–æ–∫–∞")
    else:
        await message.answer(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —à–∞–≥–µ: {data.get('step')}")








@router.callback_query(F.data == "admin_delete_lesson")
async def start_lesson_deletion(callback: CallbackQuery, session: AsyncSession, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —É–¥–∞–ª–µ–Ω–∏—è —É—Ä–æ–∫–∞"""
    try:
        await state.set_state(LessonManagementStates.deleting_lesson)
        
        lesson_service = LessonService(session)
        lessons, total_count = await lesson_service.get_lessons_paginated(
            page=0, per_page=10, include_inactive=True
        )
        
        if not lessons:
            await callback.message.edit_text(
                "üìö <b>–£—Ä–æ–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</b>\n\n–ù–µ—Ç —É—Ä–æ–∫–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.",
                reply_markup=back_to_admin_keyboard()
            )
            return
        
        delete_text = f"""
üóëÔ∏è <b>–£–¥–∞–ª–µ–Ω–∏–µ —É—Ä–æ–∫–∞</b>

üìä <b>–í—Å–µ–≥–æ —É—Ä–æ–∫–æ–≤:</b> {total_count}

üìã <b>–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:</b>
"""
        
        await callback.message.edit_text(
            delete_text,
            reply_markup=lessons_list_keyboard(lessons, page=0)
        )
        await callback.answer("üóëÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–∫")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —É–¥–∞–ª–µ–Ω–∏—è: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞")


@router.callback_query(F.data.startswith("admin_confirm_delete:"))
async def confirm_lesson_deletion(callback: CallbackQuery, session: AsyncSession, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —É—Ä–æ–∫–∞"""
    try:
        lesson_id = int(callback.data.split(":")[1])
        
        lesson_service = LessonService(session)
        lesson = await lesson_service.get_lesson_by_id(lesson_id, include_inactive=True)
        
        if not lesson:
            await callback.answer("‚ùå –£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        can_delete, reason = await lesson_service.can_delete_lesson(lesson_id)
        dependencies = await lesson_service.get_lesson_dependencies(lesson_id)
        
        await state.set_state(LessonManagementStates.confirming_lesson_deletion)
        await state.update_data(deleting_lesson_id=lesson_id)
        
        status_text = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if lesson.is_active else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
        type_text = "üéÅ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π" if lesson.is_free else f"üí∞ {lesson.price_stars} ‚≠ê"
        
        confirm_text = f"""
üóëÔ∏è <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —É—Ä–æ–∫–∞</b>

<b>üìñ –ù–∞–∑–≤–∞–Ω–∏–µ:</b> {lesson.title}

<b>üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {type_text}
<b>üîÑ –°—Ç–∞—Ç—É—Å:</b> {status_text}

<b>üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: {dependencies.get('views_count', 0)}
‚Ä¢ –ü–æ–∫—É–ø–∫–∏: {dependencies.get('total_purchases', 0)}
‚Ä¢ –î–æ—Ö–æ–¥: {dependencies.get('total_revenue', 0)} ‚≠ê

‚ö†Ô∏è <b>–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —É—Ä–æ–∫?</b>
"""
        
        from keyboards.admin import simple_confirmation_keyboard
        
        # –ü—Ä–æ—Å—Ç–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ - –±–µ–∑ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —É–¥–∞–ª–µ–Ω–∏—è
        confirm_keyboard = simple_confirmation_keyboard(
            action_data=f"confirm_delete_lesson:{lesson_id}",
            cancel_data="admin_lessons_list"
        )
        
        await callback.message.edit_text(
            confirm_text,
            reply_markup=confirm_keyboard
        )
        await callback.answer()
        
    except (ValueError, IndexError):
        await callback.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —É—Ä–æ–∫–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞")


@router.callback_query(F.data.startswith("confirm_delete_lesson:"))
async def execute_lesson_deletion(callback: CallbackQuery, session: AsyncSession, state: FSMContext):
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ —É—Ä–æ–∫–∞"""
    try:
        lesson_id = int(callback.data.split(":")[1])
        
        lesson_service = LessonService(session)
        lesson = await lesson_service.get_lesson_by_id(lesson_id, include_inactive=True)
        
        if not lesson:
            await callback.answer("‚ùå –£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        lesson_title = lesson.title
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ —É–¥–∞–ª–∏—Ç—å
        can_delete, reason = await lesson_service.can_delete_lesson(lesson_id)
        
        if can_delete:
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ (–∂–µ—Å—Ç–∫–æ–µ)
            success = await lesson_service.delete_lesson(lesson_id, force=False)
            delete_type = "–ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω"
        else:
            # –ú—è–≥–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ (–¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è)
            success = await lesson_service.soft_delete_lesson(lesson_id)
            delete_type = "–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω"
        
        if success:
            success_text = f"""
‚úÖ <b>–£—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω</b>

<b>üìñ –£—Ä–æ–∫:</b> {lesson_title}

–£—Ä–æ–∫ {delete_type} –∏ –±–æ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.
"""
            
            await callback.message.edit_text(
                success_text,
                reply_markup=back_to_admin_keyboard()
            )
            await callback.answer(f"‚úÖ –£—Ä–æ–∫ {delete_type}")
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏")
        
        await state.clear()
        
    except (ValueError, IndexError):
        await callback.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —É—Ä–æ–∫–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É—Ä–æ–∫–∞: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞")


@router.callback_query(F.data.startswith("soft_delete:"))
async def execute_soft_delete(callback: CallbackQuery, session: AsyncSession, state: FSMContext):
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å –º—è–≥–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ (–¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è)"""
    try:
        lesson_id = int(callback.data.split(":")[1])
        
        lesson_service = LessonService(session)
        lesson = await lesson_service.get_lesson_by_id(lesson_id, include_inactive=True)
        
        if not lesson:
            await callback.answer("‚ùå –£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        success = await lesson_service.soft_delete_lesson(lesson_id)
        
        if success:
            success_text = f"""
‚úÖ <b>–ú—è–≥–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ</b>

<b>üìñ –£—Ä–æ–∫:</b> {lesson.title}

–£—Ä–æ–∫ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∏ –±–æ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.
–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.
"""
            
            await callback.message.edit_text(
                success_text,
                reply_markup=back_to_admin_keyboard()
            )
            await callback.answer("‚úÖ –£—Ä–æ–∫ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏")
        
        await state.clear()
        
    except (ValueError, IndexError):
        await callback.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —É—Ä–æ–∫–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –º—è–≥–∫–æ–º —É–¥–∞–ª–µ–Ω–∏–∏: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞")


@router.callback_query(F.data.startswith("hard_delete:"))
async def execute_hard_delete(callback: CallbackQuery, session: AsyncSession, state: FSMContext):
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∂–µ—Å—Ç–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ"""
    try:
        lesson_id = int(callback.data.split(":")[1])
        
        lesson_service = LessonService(session)
        lesson = await lesson_service.get_lesson_by_id(lesson_id, include_inactive=True)
        
        if not lesson:
            await callback.answer("‚ùå –£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        lesson_title = lesson.title
        success = await lesson_service.delete_lesson(lesson_id, force=False)
        
        if success:
            success_text = f"""
‚úÖ <b>–ñ–µ—Å—Ç–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ</b>

<b>üìñ –£—Ä–æ–∫:</b> {lesson_title}

–£—Ä–æ–∫ –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.

‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ:</b> –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!
"""
            
            await callback.message.edit_text(
                success_text,
                reply_markup=back_to_admin_keyboard()
            )
            await callback.answer("‚úÖ –£—Ä–æ–∫ –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω")
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏")
        
        await state.clear()
        
    except (ValueError, IndexError):
        await callback.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —É—Ä–æ–∫–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∂–µ—Å—Ç–∫–æ–º —É–¥–∞–ª–µ–Ω–∏–∏: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞")


@router.callback_query(F.data.startswith("force_delete:"))
async def execute_force_delete(callback: CallbackQuery, session: AsyncSession, state: FSMContext):
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ"""
    try:
        lesson_id = int(callback.data.split(":")[1])
        
        lesson_service = LessonService(session)
        lesson = await lesson_service.get_lesson_by_id(lesson_id, include_inactive=True)
        
        if not lesson:
            await callback.answer("‚ùå –£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        lesson_title = lesson.title
        success = await lesson_service.delete_lesson(lesson_id, force=True)
        
        if success:
            success_text = f"""
‚ö†Ô∏è <b>–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ</b>

<b>üìñ –£—Ä–æ–∫:</b> {lesson_title}

–£—Ä–æ–∫ –∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω—ã.
–ü–æ–∫—É–ø–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω—ã.

‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ:</b> –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!
"""
            
            await callback.message.edit_text(
                success_text,
                reply_markup=back_to_admin_keyboard()
            )
            await callback.answer("‚ö†Ô∏è –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª–µ–Ω")
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏")
        
        await state.clear()
        
    except (ValueError, IndexError):
        await callback.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —É—Ä–æ–∫–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞")


@router.callback_query(F.data.startswith("edit_lesson_price:"))
async def edit_lesson_price(callback: CallbackQuery, session: AsyncSession, state: FSMContext):
    """–ù–∞—á–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã —É—Ä–æ–∫–∞"""
    try:
        lesson_id = int(callback.data.split(":")[1])
        await state.set_state(LessonManagementStates.editing_lesson_price)
        await state.update_data(editing_lesson_id=lesson_id)
        
        lesson_service = LessonService(session)
        lesson = await lesson_service.get_lesson_by_id(lesson_id, include_inactive=True)
        
        edit_text = f"""
üí∞ <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã —É—Ä–æ–∫–∞</b>

üí∞ <b>–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞:</b> ‚≠ê {lesson.price_stars}
üéÅ <b>–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π:</b> {'–î–∞' if lesson.is_free else '–ù–µ—Ç'}

–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –≤ Telegram Stars (—á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 2500):
–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ 0 –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ —É—Ä–æ–∫–∞.
"""
        
        await callback.message.edit_text(edit_text, reply_markup=back_to_admin_keyboard())
        await callback.answer("üí∞ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É")
    except Exception as e:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞")


@router.callback_query(F.data.startswith("edit_lesson_media:"))
async def edit_lesson_media(callback: CallbackQuery, session: AsyncSession, state: FSMContext):
    """–ù–∞—á–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–¥–∏–∞-–º–∞—Ç–µ—Ä–∏–∞–ª–∞ —É—Ä–æ–∫–∞"""
    try:
        lesson_id = int(callback.data.split(":")[1])
        
        lesson_service = LessonService(session)
        lesson = await lesson_service.get_lesson_by_id(lesson_id, include_inactive=True)
        
        if not lesson:
            await callback.answer("‚ùå –£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —Ç–∏–ø –º–µ–¥–∏–∞ –∏ –Ω–∞–ª–∏—á–∏–µ
        has_media = lesson.file_id is not None
        media_info = ""
        
        if has_media:
            if lesson.content_type == "video":
                media_info = f"üé• –¢–µ–∫—É—â–∏–π –º–∞—Ç–µ—Ä–∏–∞–ª: –í–∏–¥–µ–æ"
            elif lesson.content_type == "photo":
                media_info = f"üì∑ –¢–µ–∫—É—â–∏–π –º–∞—Ç–µ—Ä–∏–∞–ª: –§–æ—Ç–æ"
            else:
                media_info = f"üìù –¢–µ–∫—É—â–∏–π –º–∞—Ç–µ—Ä–∏–∞–ª: –¢–µ–∫—Å—Ç"
        else:
            media_info = "‚ùå –ú–∞—Ç–µ—Ä–∏–∞–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
        
        edit_text = f"""
üé¨ <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–¥–∏–∞-–º–∞—Ç–µ—Ä–∏–∞–ª–∞</b>

üìö <b>–£—Ä–æ–∫:</b> {lesson.title}

{media_info}

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –º–µ–¥–∏–∞ –¥–ª—è {'<b>–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è</b>' if has_media else '<b>–∑–∞–≥—Ä—É–∑–∫–∏</b>'}:
"""
        
        from keyboards.admin import media_update_type_keyboard
        
        await callback.message.edit_text(
            edit_text,
            reply_markup=media_update_type_keyboard(lesson_id)
        )
        await callback.answer()
        
    except (ValueError, IndexError):
        await callback.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —É—Ä–æ–∫–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –º–µ–¥–∏–∞: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞")


@router.callback_query(F.data.startswith("update_media_"))
async def start_media_update(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–¥–∏–∞-–º–∞—Ç–µ—Ä–∏–∞–ª–∞"""
    try:
        data_parts = callback.data.split("_")
        media_type = data_parts[2].split(":")[0]  # video –∏–ª–∏ photo
        lesson_id = int(data_parts[2].split(":")[1])
        
        await state.set_state(LessonManagementStates.editing_lesson_media)
        await state.update_data(
            editing_lesson_id=lesson_id,
            new_media_type=media_type
        )
        
        media_names = {
            "video": "üé• –≤–∏–¥–µ–æ",
            "photo": "üì∑ —Ñ–æ—Ç–æ"
        }
        
        media_name = media_names.get(media_type, media_type)
        
        edit_text = f"""
üì§ <b>–ó–∞–≥—Ä—É–∑–∫–∞ {media_name}</b>

–û—Ç–ø—Ä–∞–≤—å—Ç–µ {media_name}-—Ñ–∞–π–ª –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—Ä–æ–∫–∞:
"""
        
        await callback.message.edit_text(
            edit_text,
            reply_markup=back_to_admin_keyboard()
        )
        await callback.answer(f"üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ {media_name}")
        
    except (ValueError, IndexError):
        await callback.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ–¥–∏–∞: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞")


@router.message(LessonManagementStates.editing_lesson_media, F.content_type.in_(["video", "photo"]))
async def process_media_update(message: Message, session: AsyncSession, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ–¥–∏–∞-–º–∞—Ç–µ—Ä–∏–∞–ª–∞"""
    try:
        data = await state.get_data()
        lesson_id = data.get("editing_lesson_id")
        expected_type = data.get("new_media_type")
        
        if not lesson_id or not expected_type:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            await state.clear()
            return
        
        # –ü–æ–ª—É—á–∞–µ–º file_id –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
        file_id = None
        duration = None
        
        if expected_type == "video" and message.video:
            file_id = message.video.file_id
            duration = message.video.duration
        elif expected_type == "photo" and message.photo:
            file_id = message.photo[-1].file_id  # –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ
        
        if not file_id:
            type_names = {
                "video": "–≤–∏–¥–µ–æ",
                "photo": "—Ñ–æ—Ç–æ"
            }
            await message.answer(f"‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ {type_names.get(expected_type, expected_type)}-—Ñ–∞–π–ª")
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–∫ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        lesson_service = LessonService(session)
        lesson = await lesson_service.get_lesson_by_id(lesson_id, include_inactive=True)
        
        if not lesson:
            await message.answer("‚ùå –£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await state.clear()
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è —É—Ä–æ–∫–∞
        lesson.file_id = file_id
        lesson.content_type = expected_type
        lesson.updated_at = datetime.now(timezone.utc)
        
        if duration and expected_type == "video":
            lesson.duration = duration
        
        await session.commit()
        
        action_text = "–æ–±–Ω–æ–≤–ª–µ–Ω" if lesson.file_id else "–¥–æ–±–∞–≤–ª–µ–Ω"
        type_names = {
            "video": "–í–∏–¥–µ–æ",
            "photo": "–§–æ—Ç–æ"
        }
        
        success_text = f"""
‚úÖ <b>–ú–µ–¥–∏–∞-–º–∞—Ç–µ—Ä–∏–∞–ª —É—Å–ø–µ—à–Ω–æ {action_text}</b>

üìö <b>–£—Ä–æ–∫:</b> {lesson.title}
üé¨ <b>–ù–æ–≤—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª:</b> {type_names.get(expected_type, expected_type)}

–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!
"""
        
        await message.answer(
            success_text,
            reply_markup=back_to_admin_keyboard()
        )
        
        await state.clear()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–µ–¥–∏–∞: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–µ–¥–∏–∞")
        await state.clear()


@router.message(LessonManagementStates.editing_lesson_price)
async def process_lesson_price_edit(message: Message, session: AsyncSession, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–π —Ü–µ–Ω—ã"""
    try:
        if not message.text or not message.text.isdigit():
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 2500")
            return
        
        price = int(message.text)
        if price < 0 or price > 2500:
            await message.answer("‚ùå –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 0 –¥–æ 2500 ‚≠ê")
            return
        
        data = await state.get_data()
        lesson_id = data.get("editing_lesson_id")
        
        lesson_service = LessonService(session)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É –∏ —Å—Ç–∞—Ç—É—Å –±–µ—Å–ø–ª–∞—Ç–Ω–æ—Å—Ç–∏
        success_price = await lesson_service.update_lesson_price(lesson_id, price)
        
        if success_price:
            if price == 0:
                await message.answer("‚úÖ –£—Ä–æ–∫ —Å—Ç–∞–ª –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º")
            else:
                await message.answer(f"‚úÖ –¶–µ–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: ‚≠ê {price}")
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
        
        await state.clear()
        
    except Exception as e:
        await message.answer("‚ùå –û—à–∏–±–∫–∞")