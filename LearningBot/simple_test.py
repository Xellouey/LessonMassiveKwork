"""
–ü—Ä–æ—Å—Ç–µ–π—à–∏–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –±–µ–∑ pytest
"""
import asyncio
import sys
from datetime import datetime
from sqlalchemy.ext.asyncio import AsyncSession, create_async_engine, async_sessionmaker

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ path
sys.path.insert(0, '.')

from database.database import Base
from database.models import User, Lesson, Purchase
from services.user import UserService
from services.lesson import LessonService

# –¢–µ—Å—Ç–æ–≤–∞—è –ë–î –≤ –ø–∞–º—è—Ç–∏
TEST_DATABASE_URL = "sqlite+aiosqlite:///:memory:"

async def test_user_service():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ UserService"""
    print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ UserService...")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –¥–≤–∏–∂–∫–∞ –ë–î
    engine = create_async_engine(
        TEST_DATABASE_URL,
        echo=False,
        future=True
    )
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.create_all)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏
    async_session = async_sessionmaker(
        engine, 
        class_=AsyncSession, 
        expire_on_commit=False
    )
    
    async with async_session() as session:
        user_service = UserService(session)
        
        print("  ‚úÖ 1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
        user = await user_service.get_user_by_telegram_id(999999999)
        assert user is None, "–ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å None"
        print("     ‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω!")
        
        print("  ‚úÖ 2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
        user_id = 123456789
        username = "test_user"
        full_name = "–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        
        created_user = await user_service.create_user(user_id, username, full_name)
        assert created_user is not None, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω"
        assert created_user.user_id == user_id, "ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å"
        assert created_user.username == username, "Username –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å"
        assert created_user.full_name == full_name, "–ü–æ–ª–Ω–æ–µ –∏–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å"
        print("     ‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω!")
        
        print("  ‚úÖ 3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
        found_user = await user_service.get_user_by_telegram_id(user_id)
        assert found_user is not None, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞–π–¥–µ–Ω"
        assert found_user.id == created_user.id, "ID –¥–æ–ª–∂–Ω—ã —Å–æ–≤–ø–∞–¥–∞—Ç—å"
        print("     ‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω!")
        
        print("  ‚úÖ 4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
        success = await user_service.update_user_language(user_id, 'en')
        assert success is True, "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É—Å–ø–µ—à–Ω—ã–º"
        
        updated_user = await user_service.get_user_by_telegram_id(user_id)
        assert updated_user.language == 'en', "–Ø–∑—ã–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω"
        print("     ‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω!")
        
        print("  ‚úÖ 5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
        success = await user_service.log_user_activity(
            user_id, 
            "test_action", 
            lesson_id=1, 
            extra_data="test_data"
        )
        assert success is True, "–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É—Å–ø–µ—à–Ω—ã–º"
        print("     ‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω!")
    
    await engine.dispose()
    print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã UserService –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")

async def test_lesson_service():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ LessonService"""
    print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ LessonService...")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –¥–≤–∏–∂–∫–∞ –ë–î
    engine = create_async_engine(
        TEST_DATABASE_URL,
        echo=False,
        future=True
    )
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.create_all)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏
    async_session = async_sessionmaker(
        engine, 
        class_=AsyncSession, 
        expire_on_commit=False
    )
    
    async with async_session() as session:
        lesson_service = LessonService(session)
        
        print("  ‚úÖ 1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —É—Ä–æ–∫–∞...")
        lesson = await lesson_service.get_lesson_by_id(999999)
        assert lesson is None, "–ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —É—Ä–æ–∫ –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å None"
        print("     ‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω!")
        
        print("  ‚úÖ 2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∏ –ø–æ–ª—É—á–µ–Ω–∏—è —É—Ä–æ–∫–∞...")
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É—Ä–æ–∫–∞
        test_lesson = Lesson(
            title="–¢–µ—Å—Ç–æ–≤—ã–π —É—Ä–æ–∫",
            description="–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É—Ä–æ–∫–∞",
            price_stars=100,
            content_type="video",
            file_id="test_file_123",
            duration=300,
            is_active=True,
            is_free=False,
            category="–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ",
            created_at=datetime.utcnow(),
            updated_at=datetime.utcnow(),
            views_count=0
        )
        
        session.add(test_lesson)
        await session.commit()
        await session.refresh(test_lesson)
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —É—Ä–æ–∫–∞ –ø–æ ID
        found_lesson = await lesson_service.get_lesson_by_id(test_lesson.id)
        assert found_lesson is not None, "–£—Ä–æ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞–π–¥–µ–Ω"
        assert found_lesson.title == test_lesson.title, "–ù–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞ –¥–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å"
        print("     ‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω!")
        
        print("  ‚úÖ 3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤...")
        initial_views = found_lesson.views_count
        
        success = await lesson_service.increment_lesson_views(test_lesson.id)
        assert success is True, "–£–≤–µ–ª–∏—á–µ–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É—Å–ø–µ—à–Ω—ã–º"
        
        updated_lesson = await lesson_service.get_lesson_by_id(test_lesson.id)
        assert updated_lesson.views_count == initial_views + 1, "–°—á–µ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –¥–æ–ª–∂–µ–Ω —É–≤–µ–ª–∏—á–∏—Ç—å—Å—è"
        print("     ‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω!")
        
        print("  ‚úÖ 4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —É—Ä–æ–∫–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π...")
        lessons, total_count = await lesson_service.get_lessons_paginated(page=0, per_page=10)
        assert isinstance(lessons, list), "–î–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è —Å–ø–∏—Å–æ–∫"
        assert isinstance(total_count, int), "–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º"
        assert total_count >= 1, "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —É—Ä–æ–∫"
        print("     ‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω!")
    
    await engine.dispose()
    print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã LessonService –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")

async def test_integration():
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç: –ø–æ–∫—É–ø–∫–∞ —É—Ä–æ–∫–∞"""
    print("üß™ –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –ø–æ–∫—É–ø–∫–∏ —É—Ä–æ–∫–∞...")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –¥–≤–∏–∂–∫–∞ –ë–î
    engine = create_async_engine(
        TEST_DATABASE_URL,
        echo=False,
        future=True
    )
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.create_all)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏
    async_session = async_sessionmaker(
        engine, 
        class_=AsyncSession, 
        expire_on_commit=False
    )
    
    async with async_session() as session:
        user_service = UserService(session)
        lesson_service = LessonService(session)
        
        print("  ‚úÖ 1. –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —É—Ä–æ–∫–∞...")
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await user_service.create_user(
            user_id=555666777,
            username="integration_user",
            full_name="–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        )
        assert user is not None
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —É—Ä–æ–∫–∞
        lesson = Lesson(
            title="–ü–ª–∞—Ç–Ω—ã–π —É—Ä–æ–∫",
            description="–£—Ä–æ–∫ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞",
            price_stars=150,
            content_type="video",
            file_id="integration_video",
            is_active=True,
            is_free=False,
            category="–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è"
        )
        
        session.add(lesson)
        await session.commit()
        await session.refresh(lesson)
        print("     ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ —É—Ä–æ–∫ —Å–æ–∑–¥–∞–Ω—ã!")
        
        print("  ‚úÖ 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –¥–æ—Å—Ç—É–ø–∞...")
        has_access = await lesson_service.check_user_has_lesson(user.user_id, lesson.id)
        assert has_access is False, "–ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –¥–æ—Å—Ç—É–ø–∞ –±—ã—Ç—å –Ω–µ –¥–æ–ª–∂–Ω–æ"
        print("     ‚úÖ –î–æ—Å—Ç—É–ø –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!")
        
        print("  ‚úÖ 3. –°–∏–º—É–ª—è—Ü–∏—è –ø–æ–∫—É–ø–∫–∏ —É—Ä–æ–∫–∞...")
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏ (—Å–∏–º—É–ª—è—Ü–∏—è —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞)
        purchase = Purchase(
            user_id=user.user_id,
            lesson_id=lesson.id,
            payment_charge_id="integration_test_payment",
            purchase_date=datetime.utcnow(),
            status="completed",
            amount_stars=lesson.price_stars
        )
        
        session.add(purchase)
        await session.commit()
        await session.refresh(purchase)
        print("     ‚úÖ –ü–æ–∫—É–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!")
        
        print("  ‚úÖ 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏...")
        has_access_after = await lesson_service.check_user_has_lesson(user.user_id, lesson.id)
        assert has_access_after is True, "–ü–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏ –¥–æ—Å—Ç—É–ø –¥–æ–ª–∂–µ–Ω –ø–æ—è–≤–∏—Ç—å—Å—è"
        print("     ‚úÖ –î–æ—Å—Ç—É–ø –ø–æ–ª—É—á–µ–Ω –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏!")
        
        print("  ‚úÖ 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–∫—É–ø–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
        purchases, total_count = await lesson_service.get_user_purchases(user.user_id)
        assert total_count == 1, "–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ–¥–Ω–∞ –ø–æ–∫—É–ø–∫–∞"
        assert purchases[0]['lesson'].id == lesson.id, "–í –ø–æ–∫—É–ø–∫–∞—Ö –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞—à —É—Ä–æ–∫"
        print("     ‚úÖ –°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π!")
    
    await engine.dispose()
    print("üéâ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ!")

"""
Simple validation test for main menu changes
"""
import sys
sys.path.append('.')

def test_main_menu():
    try:
        from keyboards.user import main_menu_keyboard
        
        kb = main_menu_keyboard()
        kb_str = str(kb.inline_keyboard)
        
        print("Testing main menu keyboard...")
        print("Buttons found:", kb_str)
        
        # Test for profile button
        if "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å" in kb_str and "profile" in kb_str:
            print("‚úÖ Profile button found")
        else:
            print("‚ùå Profile button not found")
        
        # Test settings button is removed
        if "–ù–∞—Å—Ç—Ä–æ–π–∫–∏" not in kb_str:
            print("‚úÖ Settings button removed")
        else:
            print("‚ùå Settings button still present")
            
        return True
        
    except Exception as e:
        print(f"Error: {e}")
        return False

async def main():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Learning Bot...\n")
    
    try:
        await test_user_service()
        print()
        
        await test_lesson_service()
        print()
        
        await test_integration()
        print()
        
        print("üéâüéâüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û! üéâüéâüéâ")
        print("‚úÖ UserService —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("‚úÖ LessonService —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ") 
        print("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
        print("‚úÖ –ú–æ–¥–µ–ª–∏ —Å–æ–∑–¥–∞–Ω—ã –±–µ–∑ –æ—à–∏–±–æ–∫")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(main())
