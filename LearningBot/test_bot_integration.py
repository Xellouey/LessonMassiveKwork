"""
Integration test that simulates actual bot interaction
"""
import asyncio
import sys
import logging
from unittest.mock import AsyncMock, MagicMock

sys.path.insert(0, '.')

from database.database import AsyncSessionLocal
from handlers.user.catalog import show_catalog, show_lessons_by_category
from handlers.user.lesson_detail import show_lesson_detail
from handlers.user.start import cmd_start
from aiogram.fsm.context import FSMContext

# Suppress logs for clean output
logging.getLogger().setLevel(logging.ERROR)

def create_mock_callback(user_id=897676474, data="catalog", username="dmitriy_mityuk"):
    """Create a realistic mock callback query"""
    callback = AsyncMock()
    callback.from_user.id = user_id
    callback.from_user.username = username
    callback.from_user.full_name = "–î–º–∏—Ç—Ä–∏–π –ú–∏—Ç—é–∫"
    callback.data = data
    callback.answer = AsyncMock()
    
    # Mock message with tracking
    message = AsyncMock()
    message.edit_text = AsyncMock()
    message.answer = AsyncMock()
    callback.message = message
    
    return callback

def create_mock_message(user_id=897676474, text="/start", username="dmitriy_mityuk"):
    """Create a realistic mock message"""
    message = AsyncMock()
    message.text = text
    message.answer = AsyncMock()
    
    # Mock user with realistic data
    user = MagicMock()
    user.id = user_id
    user.username = username
    user.full_name = "–î–º–∏—Ç—Ä–∏–π –ú–∏—Ç—é–∫"
    user.language_code = "ru"
    message.from_user = user
    
    return message

async def test_complete_user_journey():
    """Test complete user journey from start to lesson viewing"""
    print("üé≠ Simulating Complete User Journey...")
    print("=" * 50)
    
    async with AsyncSessionLocal() as session:
        
        # Step 1: User starts the bot
        print("1Ô∏è‚É£ User sends /start command...")
        try:
            message = create_mock_message()
            state = AsyncMock()
            await cmd_start(message, session, state)
            print("   ‚úÖ /start command processed successfully")
            
            # Check if welcome message was sent
            if message.answer.called:
                print("   ‚úÖ Welcome message sent to user")
            else:
                print("   ‚ùå Welcome message NOT sent")
                
        except Exception as e:
            print(f"   ‚ùå /start failed: {e}")
            return False
        
        # Step 2: User clicks catalog button  
        print("\n2Ô∏è‚É£ User clicks '–ö–∞—Ç–∞–ª–æ–≥ —É—Ä–æ–∫–æ–≤' button...")
        try:
            callback = create_mock_callback(data="catalog")
            state = AsyncMock()
            await show_catalog(callback, session, state)
            print("   ‚úÖ Catalog handler processed successfully")
            
            # Check if catalog was displayed
            if callback.message.edit_text.called:
                call_args = callback.message.edit_text.call_args
                text_content = call_args[0][0] if call_args else ""
                print("   ‚úÖ Catalog message updated")
                if "–ö–∞—Ç–∞–ª–æ–≥ —É—Ä–æ–∫–æ–≤" in text_content:
                    print("   ‚úÖ Catalog header found in response")
                if "–í—Å–µ–≥–æ —É—Ä–æ–∫–æ–≤:" in text_content:
                    print("   ‚úÖ Lesson count displayed")
            else:
                print("   ‚ùå Catalog message NOT updated")
                
        except Exception as e:
            print(f"   ‚ùå Catalog failed: {e}")
            return False
        
        # Step 3: User clicks "–í—Å–µ —É—Ä–æ–∫–∏" button
        print("\n3Ô∏è‚É£ User clicks '–í—Å–µ —É—Ä–æ–∫–∏' button...")
        try:
            callback = create_mock_callback(data="catalog:all")
            await show_lessons_by_category(callback, session)
            print("   ‚úÖ '–í—Å–µ —É—Ä–æ–∫–∏' handler processed successfully")
            
            # Check if lesson list was displayed
            if callback.message.edit_text.called:
                call_args = callback.message.edit_text.call_args
                text_content = call_args[0][0] if call_args else ""
                print("   ‚úÖ Lesson list message updated")
                if "–í—Å–µ —É—Ä–æ–∫–∏" in text_content:
                    print("   ‚úÖ '–í—Å–µ —É—Ä–æ–∫–∏' header found")
                # Look for lesson indicators
                if "üìö" in text_content or "‚≠ê" in text_content:
                    print("   ‚úÖ Lesson entries found in list")
                else:
                    print("   ‚ö†Ô∏è  No lesson entries visible")
            else:
                print("   ‚ùå Lesson list message NOT updated")
                
        except Exception as e:
            print(f"   ‚ùå '–í—Å–µ —É—Ä–æ–∫–∏' failed: {e}")
            return False
        
        # Step 4: User clicks on a specific lesson
        print("\n4Ô∏è‚É£ User clicks on first lesson...")
        try:
            callback = create_mock_callback(data="lesson:1")
            await show_lesson_detail(callback, session)
            print("   ‚úÖ Lesson detail handler processed successfully")
            
            # Check if lesson detail was displayed
            if callback.message.edit_text.called:
                call_args = callback.message.edit_text.call_args
                text_content = call_args[0][0] if call_args else ""
                print("   ‚úÖ Lesson detail message updated")
                if "–û–ø–∏—Å–∞–Ω–∏–µ:" in text_content:
                    print("   ‚úÖ Lesson description found")
                if "–¶–µ–Ω–∞:" in text_content:
                    print("   ‚úÖ Lesson price displayed")
                if "–°—Ç–∞—Ç—É—Å:" in text_content:
                    print("   ‚úÖ Access status shown")
            else:
                print("   ‚ùå Lesson detail message NOT updated")
                
        except Exception as e:
            print(f"   ‚ùå Lesson detail failed: {e}")
            return False
        
        print("\nüéâ User Journey Test Completed Successfully!")
        return True

async def test_admin_user_journey():
    """Test admin-specific functionality"""
    print("\nüë®‚Äçüíº Testing Admin User Journey...")
    print("=" * 50)
    
    async with AsyncSessionLocal() as session:
        
        # Test admin can see all lessons (including inactive)
        print("1Ô∏è‚É£ Admin viewing catalog (should see all lessons)...")
        try:
            callback = create_mock_callback(data="catalog")
            state = AsyncMock()
            await show_catalog(callback, session, state)
            print("   ‚úÖ Admin catalog access successful")
        except Exception as e:
            print(f"   ‚ùå Admin catalog failed: {e}")
            return False
        
        print("\n‚úÖ Admin Journey Test Completed!")
        return True

async def test_error_scenarios():
    """Test error handling scenarios"""
    print("\n‚ö†Ô∏è  Testing Error Scenarios...")
    print("=" * 50)
    
    async with AsyncSessionLocal() as session:
        
        # Test invalid lesson ID
        print("1Ô∏è‚É£ Testing invalid lesson ID...")
        try:
            callback = create_mock_callback(data="lesson:999999")
            await show_lesson_detail(callback, session)
            print("   ‚úÖ Invalid lesson ID handled gracefully")
        except Exception as e:
            print(f"   ‚ùå Invalid lesson ID caused error: {e}")
        
        # Test malformed callback data
        print("\n2Ô∏è‚É£ Testing malformed callback data...")
        try:
            callback = create_mock_callback(data="lesson:invalid")
            await show_lesson_detail(callback, session)
            print("   ‚úÖ Malformed data handled gracefully")
        except Exception as e:
            print(f"   ‚ùå Malformed data caused error: {e}")
        
        print("\n‚úÖ Error Scenarios Test Completed!")
        return True

async def main():
    """Run all integration tests"""
    print("üöÄ Bot Integration Testing")
    print("=" * 50)
    
    success_count = 0
    total_tests = 3
    
    # Test 1: Complete user journey
    if await test_complete_user_journey():
        success_count += 1
    
    # Test 2: Admin journey  
    if await test_admin_user_journey():
        success_count += 1
    
    # Test 3: Error scenarios
    if await test_error_scenarios():
        success_count += 1
    
    print(f"\nüìä Integration Test Results: {success_count}/{total_tests} passed")
    
    if success_count == total_tests:
        print("üéâ ALL INTEGRATION TESTS PASSED!")
        print("\n‚úÖ Bot lesson functionality is working correctly")
        print("‚úÖ User can navigate catalog and view lessons")
        print("‚úÖ Admin functionality is accessible")
        print("‚úÖ Error handling is working properly")
        print("\nüöÄ The bot is ready for users!")
    else:
        print("‚ùå Some integration tests failed")
        print("üîß Please check the failed tests above")

if __name__ == "__main__":
    asyncio.run(main())