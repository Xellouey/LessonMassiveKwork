import config
import utils
from aiogram.types import ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder


def markup_admin(user_id):
    items = [
        [InlineKeyboardButton(text='üì• –†–∞—Å—Å—ã–ª–∫–∞', callback_data='mail')], 
        [InlineKeyboardButton(text='‚¨áÔ∏è –í—ã–≥—Ä—É–∑–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', callback_data='export')], 
        [InlineKeyboardButton(text='‚úèÔ∏è –†–µ–¥–∞–∫—Ç–æ—Ä —à–∞–≥–æ–≤', callback_data='editor')] 
    ]
    
    if user_id in config.ADMINS:
        items.append([InlineKeyboardButton(text='üîë –í—ã–¥–∞—Ç—å / –ó–∞–±—Ä–∞—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', callback_data='adminRights')]) 
    
    markup_admin = InlineKeyboardMarkup(inline_keyboard=items)
    return markup_admin


def markup_pass():
    items = [
        [KeyboardButton(text='‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å')]
        [KeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞')]
    ]
    
    markup_pass = ReplyKeyboardMarkup(keyboard=items, resize_keyboard=True)
    return markup_pass


def markup_phone():
    items = [
        [KeyboardButton(text='üìû –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è', request_contact=True)]
    ]
    
    markup_phone = ReplyKeyboardMarkup(keyboard=items, resize_keyboard=True, one_time_keyboard=True)
    return markup_phone


def markup_cancel():
    items = [
        [KeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞')]
    ]
    
    markup_cancel = ReplyKeyboardMarkup(keyboard=items, resize_keyboard=True)
    return markup_cancel


def markup_remove():
    markup_remove = ReplyKeyboardRemove()
    return markup_remove
    

def markup_pass():
    items = [
        [KeyboardButton(text='‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å')],
        [KeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞')]
    ]
    
    markup_pass = ReplyKeyboardMarkup(keyboard=items, resize_keyboard=True)
    return markup_pass


def markup_confirm():
    items = [
        [KeyboardButton(text='‚úÖ –î–∞')],
        [KeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞')]
    ]
    
    markup_confirm = ReplyKeyboardMarkup(keyboard=items, resize_keyboard=True)
    return markup_confirm


def markup_custom(keyboard):
    if keyboard == None:
        return None
    
    items = []

    for button in keyboard:
        for name in button:
            url = button[name]
            items.append([InlineKeyboardButton(text=name, url=url)])
        
    markup_custom = InlineKeyboardMarkup(inline_keyboard=items)
    return markup_custom


def markup_editor():
    items = [
        [
            InlineKeyboardButton(text='‚ûï –°–æ–∑–¥–∞—Ç—å —à–∞–≥', callback_data='createStep')
        ],
        [
            InlineKeyboardButton(text='ü§ù –í—Å—Ç—É–ø–ª–µ–Ω–∏–µ', callback_data='edit:join'),
            InlineKeyboardButton(text='üëã –°—Ç–∞—Ä—Ç', callback_data='edit:start')
        ]
    ]
    
    steps = utils.get_steps()
    s_list = list(steps.keys())
    
    try:
        step_bot = s_list[2:]
    except:
        step_bot = []
        
    row = []
    
    i = 1
    for step in step_bot:
        row.append(InlineKeyboardButton(text=f"üëü –®–∞–≥{i}", callback_data=f"edit:{step}"))
        
        if len(row) == 2:
            items.append(row)
            row = []
            
        i += 1
            
    if row != []:
        items.append(row)
        
    items.append([InlineKeyboardButton(text='‚Ü™Ô∏è –ù–∞–∑–∞–¥', callback_data='backAdmin')])
    
    markup_editor = InlineKeyboardMarkup(inline_keyboard=items)
    return markup_editor


def markup_edit(disable_default=False):
    items = [
        [KeyboardButton(text='üëü –®–∞–≥')]
    ]
    
    if disable_default == False:
        items.extend((
            [
                KeyboardButton(text='üñå –ü–æ–∑–∏—Ü–∏—é'),
                KeyboardButton(text='‚è≥ –ó–∞–¥–µ—Ä–∂–∫—É')
            ],
            [
                KeyboardButton(text='üîó –ö–Ω–æ–ø–∫–∏'),
                KeyboardButton(text='‚õîÔ∏è –£–¥–∞–ª–∏—Ç—å')
            ]
        ))
        
    items.append([KeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞')])
    
    markup_edit = ReplyKeyboardMarkup(keyboard=items, resize_keyboard=True)
    return markup_edit