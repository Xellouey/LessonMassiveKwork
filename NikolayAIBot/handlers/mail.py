import asyncio
import config
import json
import logging
import keyboards as kb
from datetime import datetime as dt
from aiogram import types, Router, F, Bot
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from states import FSMMail
from database import mail


logging.basicConfig(
    level=logging.ERROR,
    format="%(asctime)s - %(levelname)s - %(name)s - %(filename)s - %(message)s",
    # filename='file.log'
)

router = Router()
bot = Bot(config.TOKEN)
m = mail.Mail()


@router.callback_query(F.data == 'mail')
async def mailingFirstLine(call: types.CallbackQuery, state: FSMContext):
    await state.set_state(FSMMail.date_mail)
    
    await call.message.answer('üëâ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥–≥–≥ —á—á:–º–º –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', reply_markup=kb.markup_pass())
    await call.answer()
    
    
@router.message(FSMMail.date_mail)
async def takeMailDatetime(message: types.Message, state: FSMMail):
    if message.text == '‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
        date_mail = dt.now()
    else:
        try:
            date_mail = dt.strptime(message.text, '%d.%m.%Y %H:%M')
        except:
            await message.answer('üëâ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥–≥–≥ —á—á:–º–º –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', reply_markup=kb.markup_pass())
            return 
        
    await state.update_data(date_mail=date_mail)
    await state.set_state(FSMMail.message)
    
    await message.answer('üëâ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', reply_markup=kb.markup_cancel())

    
@router.message(FSMMail.message)
async def takeMailMessage(message: types.Message, state: FSMMail):
    message_id = message.message_id
    from_id = message.from_user.id
    
    await state.update_data(message_id=message_id, from_id=from_id)
    await state.set_state(FSMMail.keyboard)
    
    await message.answer('üëâ –•–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã –¥–æ–±–∞–≤–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É? –ù–∞–∂–º–∏—Ç–µ ‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∏–ª–∏ –≤–ø–∏—à–∏—Ç–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON: [{"–ù–∞–∑–≤–∞–Ω–∏–µ": "—Å—Å—ã–ª–∫–∞"}, {"–ù–∞–∑–≤–∞–Ω–∏–µ": "—Å—Å—ã–ª–∫–∞"}], –Ω–∞–ø—Ä–∏–º–µ—Ä <code>[{"Google": "google.com"}, {"Yandex": "yandex.ru"}]</code>', parse_mode='html', reply_markup=kb.markup_pass())
  
    
@router.message(FSMMail.keyboard)
async def takeMailkeyboard(message: types.Message, state: FSMMail):    
    if message.text.lower() == '‚û°Ô∏è –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
        keyboard = None
        
    else:
        keyboard = message.text

        try:
            keyboard = json.loads(keyboard)
        except:
            await message.answer('üëâ –•–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã –¥–æ–±–∞–≤–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É? –ù–∞–∂–º–∏—Ç–µ ‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∏–ª–∏ –≤–ø–∏—à–∏—Ç–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON: [{"–ù–∞–∑–≤–∞–Ω–∏–µ": "—Å—Å—ã–ª–∫–∞"}, {"–ù–∞–∑–≤–∞–Ω–∏–µ": "—Å—Å—ã–ª–∫–∞"}], –Ω–∞–ø—Ä–∏–º–µ—Ä <code>[{"Google": "google.com"}, {"Yandex": "yandex.ru"}]</code>', parse_mode='html', reply_markup=kb.markup_pass())
            return

    await state.update_data(keyboard=keyboard)
    await state.set_state(FSMMail.confirm)
    
    stateData = await state.get_data()
    message_id = stateData['message_id']
    from_id = stateData['from_id']
    
    await bot.copy_message(message.from_user.id, from_id, message_id, reply_markup=kb.markup_custom(keyboard))
    await message.answer('üëâ –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–æ—Å–ª–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ?', reply_markup=kb.markup_confirm())
    
    
@router.message(FSMMail.confirm)
async def takeMailConfirm(message: types.Message, state: FSMMail):
    try:
        if message.text.lower() != '‚úÖ –¥–∞':
            await message.answer('üëâ –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–æ—Å–ª–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ?', reply_markup=kb.markup_confirm())
            return
    except:
        await message.answer('üëâ –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–æ—Å–ª–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ?', reply_markup=kb.markup_confirm())
        return

    stateData = await state.get_data()
    date_mail = stateData['date_mail']
    message_id = stateData['message_id']
    from_id = stateData['from_id']
    keyboard = stateData['keyboard']
    await state.clear()

    date_mail_str = date_mail.strftime('%d.%m.%Y %H:%M')

    await m.create_mail(date_mail, message_id, from_id, keyboard)
    await message.answer(f'‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω–∞ {date_mail_str}', reply_markup=kb.markup_remove())
